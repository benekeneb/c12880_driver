
c12880ma_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  0800a000  0800a000  0001a000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8e0  0800a8e0  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8e0  0800a8e0  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8e0  0800a8e0  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8e4  0800a8e4  0001a8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800a8e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020240  2**0
                  CONTENTS
 10 .bss          00004dac  20000240  20000240  00020240  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004fec  20004fec  00020240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014db0  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad3  00000000  00000000  00035020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00037af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  00038c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223a7  00000000  00000000  00039ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000168c3  00000000  00000000  0005c087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccdaf  00000000  00000000  0007294a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f6f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bb0  00000000  00000000  0013f74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fe4 	.word	0x08009fe4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	08009fe4 	.word	0x08009fe4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <adcRead>:
extern I2C_HandleTypeDef hi2c3;
extern uint16_t adc_data_rate;
extern uint8_t adc_mode;

int16_t adcRead()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af02      	add	r7, sp, #8
	uint8_t first_conf_byte = 0b11000001;
 8000c1e:	23c1      	movs	r3, #193	; 0xc1
 8000c20:	73fb      	strb	r3, [r7, #15]
	switch(adc_mode){
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <adcRead+0x10c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <adcRead+0x18>
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d003      	beq.n	8000c36 <adcRead+0x1e>
 8000c2e:	e005      	b.n	8000c3c <adcRead+0x24>
		case 0: 	first_conf_byte = 0b11000000; break; //continuous conversion
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e002      	b.n	8000c3c <adcRead+0x24>
		case 1: 	first_conf_byte = 0b11000001; break; //single shot
 8000c36:	23c1      	movs	r3, #193	; 0xc1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	bf00      	nop
	}

	uint8_t sec_conf_byte = 0b10000011;
 8000c3c:	2383      	movs	r3, #131	; 0x83
 8000c3e:	73bb      	strb	r3, [r7, #14]
	switch(adc_data_rate){
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <adcRead+0x110>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8000c48:	d033      	beq.n	8000cb2 <adcRead+0x9a>
 8000c4a:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8000c4e:	dc33      	bgt.n	8000cb8 <adcRead+0xa0>
 8000c50:	f240 12db 	movw	r2, #475	; 0x1db
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d029      	beq.n	8000cac <adcRead+0x94>
 8000c58:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 8000c5c:	da2c      	bge.n	8000cb8 <adcRead+0xa0>
 8000c5e:	2bfa      	cmp	r3, #250	; 0xfa
 8000c60:	d021      	beq.n	8000ca6 <adcRead+0x8e>
 8000c62:	2bfa      	cmp	r3, #250	; 0xfa
 8000c64:	dc28      	bgt.n	8000cb8 <adcRead+0xa0>
 8000c66:	2b80      	cmp	r3, #128	; 0x80
 8000c68:	d01a      	beq.n	8000ca0 <adcRead+0x88>
 8000c6a:	2b80      	cmp	r3, #128	; 0x80
 8000c6c:	dc24      	bgt.n	8000cb8 <adcRead+0xa0>
 8000c6e:	2b40      	cmp	r3, #64	; 0x40
 8000c70:	d013      	beq.n	8000c9a <adcRead+0x82>
 8000c72:	2b40      	cmp	r3, #64	; 0x40
 8000c74:	dc20      	bgt.n	8000cb8 <adcRead+0xa0>
 8000c76:	2b20      	cmp	r3, #32
 8000c78:	d00c      	beq.n	8000c94 <adcRead+0x7c>
 8000c7a:	2b20      	cmp	r3, #32
 8000c7c:	dc1c      	bgt.n	8000cb8 <adcRead+0xa0>
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d002      	beq.n	8000c88 <adcRead+0x70>
 8000c82:	2b10      	cmp	r3, #16
 8000c84:	d003      	beq.n	8000c8e <adcRead+0x76>
 8000c86:	e017      	b.n	8000cb8 <adcRead+0xa0>
		case 8: 	sec_conf_byte = 0b00000011; break;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	73bb      	strb	r3, [r7, #14]
 8000c8c:	e014      	b.n	8000cb8 <adcRead+0xa0>
		case 16: 	sec_conf_byte = 0b00100011; break;
 8000c8e:	2323      	movs	r3, #35	; 0x23
 8000c90:	73bb      	strb	r3, [r7, #14]
 8000c92:	e011      	b.n	8000cb8 <adcRead+0xa0>
		case 32: 	sec_conf_byte = 0b01000011; break;
 8000c94:	2343      	movs	r3, #67	; 0x43
 8000c96:	73bb      	strb	r3, [r7, #14]
 8000c98:	e00e      	b.n	8000cb8 <adcRead+0xa0>
		case 64: 	sec_conf_byte = 0b01100011; break;
 8000c9a:	2363      	movs	r3, #99	; 0x63
 8000c9c:	73bb      	strb	r3, [r7, #14]
 8000c9e:	e00b      	b.n	8000cb8 <adcRead+0xa0>
		case 128: 	sec_conf_byte = 0b10000011; break;
 8000ca0:	2383      	movs	r3, #131	; 0x83
 8000ca2:	73bb      	strb	r3, [r7, #14]
 8000ca4:	e008      	b.n	8000cb8 <adcRead+0xa0>
		case 250: 	sec_conf_byte = 0b10100011; break;
 8000ca6:	23a3      	movs	r3, #163	; 0xa3
 8000ca8:	73bb      	strb	r3, [r7, #14]
 8000caa:	e005      	b.n	8000cb8 <adcRead+0xa0>
		case 475: 	sec_conf_byte = 0b11000011; break;
 8000cac:	23c3      	movs	r3, #195	; 0xc3
 8000cae:	73bb      	strb	r3, [r7, #14]
 8000cb0:	e002      	b.n	8000cb8 <adcRead+0xa0>
		case 860: 	sec_conf_byte = 0b11100011; break;
 8000cb2:	23e3      	movs	r3, #227	; 0xe3
 8000cb4:	73bb      	strb	r3, [r7, #14]
 8000cb6:	bf00      	nop
	}


    unsigned char ADSwrite[6];
    uint8_t address = 0b1001000;
 8000cb8:	2348      	movs	r3, #72	; 0x48
 8000cba:	737b      	strb	r3, [r7, #13]
    ADSwrite[0] = 0x01;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	713b      	strb	r3, [r7, #4]

    // Channel 0
    ADSwrite[1] = first_conf_byte;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	717b      	strb	r3, [r7, #5]
    ADSwrite[2] = sec_conf_byte;
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c3, address << 1, ADSwrite, 3, 100);
 8000cc8:	7b7b      	ldrb	r3, [r7, #13]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	b299      	uxth	r1, r3
 8000cd0:	1d3a      	adds	r2, r7, #4
 8000cd2:	2364      	movs	r3, #100	; 0x64
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	4814      	ldr	r0, [pc, #80]	; (8000d2c <adcRead+0x114>)
 8000cda:	f001 fd87 	bl	80027ec <HAL_I2C_Master_Transmit>

    ADSwrite[0] = 0x00;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c3, address << 1, ADSwrite, 1, 100);
 8000ce2:	7b7b      	ldrb	r3, [r7, #13]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	b299      	uxth	r1, r3
 8000cea:	1d3a      	adds	r2, r7, #4
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <adcRead+0x114>)
 8000cf4:	f001 fd7a 	bl	80027ec <HAL_I2C_Master_Transmit>

    HAL_I2C_Master_Receive(&hi2c3, address << 1, ADSwrite, 2, 100);
 8000cf8:	7b7b      	ldrb	r3, [r7, #13]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	1d3a      	adds	r2, r7, #4
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2302      	movs	r3, #2
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <adcRead+0x114>)
 8000d0a:	f001 fe63 	bl	80029d4 <HAL_I2C_Master_Receive>
    return (ADSwrite[0] << 8 | ADSwrite[1]);
 8000d0e:	793b      	ldrb	r3, [r7, #4]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21b      	sxth	r3, r3
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000002 	.word	0x20000002
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20004a80 	.word	0x20004a80

08000d30 <setSensorClockMode>:
int rawSampleBufferPosition;
uint16_t rawSampleBuffer[SENSOR_MAX_AVERAGE_COUNT][SENSOR_PIXEL_COUNT];

extern TIM_HandleTypeDef htim1;

void setSensorClockMode(char mode){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b61      	cmp	r3, #97	; 0x61
 8000d3e:	d012      	beq.n	8000d66 <setSensorClockMode+0x36>
 8000d40:	2b69      	cmp	r3, #105	; 0x69
 8000d42:	d123      	bne.n	8000d8c <setSensorClockMode+0x5c>
		case 'i': //INTEGRATION MODE --> 250kHz
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000d44:	210c      	movs	r1, #12
 8000d46:	4813      	ldr	r0, [pc, #76]	; (8000d94 <setSensorClockMode+0x64>)
 8000d48:	f004 f82e 	bl	8004da8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <setSensorClockMode+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
			htim1.Instance->ARR = 72-1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <setSensorClockMode+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2247      	movs	r2, #71	; 0x47
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 9);
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <setSensorClockMode+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2209      	movs	r2, #9
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000d64:	e012      	b.n	8000d8c <setSensorClockMode+0x5c>

		case 'a': //ADC MODE --> 600Hz
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000d66:	210c      	movs	r1, #12
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <setSensorClockMode+0x64>)
 8000d6a:	f004 f81d 	bl	8004da8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <setSensorClockMode+0x64>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
			htim1.Instance->ARR = 30000-1;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <setSensorClockMode+0x64>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f247 522f 	movw	r2, #29999	; 0x752f
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 15000);
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <setSensorClockMode+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000d88:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000d8a:	bf00      	nop
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20004acc 	.word	0x20004acc

08000d98 <sensorInit>:


void sensorInit()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Sensor_CLK_GPIO_Port, Sensor_CLK_Pin, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4810      	ldr	r0, [pc, #64]	; (8000de4 <sensorInit+0x4c>)
 8000da2:	f001 fc63 	bl	800266c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Sensor_ST_GPIO_Port, Sensor_ST_Pin, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2104      	movs	r1, #4
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <sensorInit+0x4c>)
 8000dac:	f001 fc5e 	bl	800266c <HAL_GPIO_WritePin>

    sensorClockSig = 0;
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <sensorInit+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
    sensorReady = 0;
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <sensorInit+0x54>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
    sensorState = SensorIdle;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <sensorInit+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
    sensorDataIndex = 0;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <sensorInit+0x5c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]

    memset(rawSampleBuffer, 0, sizeof(rawSampleBuffer));
 8000dc8:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000dcc:	2100      	movs	r1, #0
 8000dce:	480a      	ldr	r0, [pc, #40]	; (8000df8 <sensorInit+0x60>)
 8000dd0:	f006 fa72 	bl	80072b8 <memset>
    rawSampleBufferPosition = 0;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <sensorInit+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]

    averageCount = SENSOR_MAX_AVERAGE_COUNT;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <sensorInit+0x68>)
 8000ddc:	2220      	movs	r2, #32
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	48000800 	.word	0x48000800
 8000de8:	20000264 	.word	0x20000264
 8000dec:	2000025c 	.word	0x2000025c
 8000df0:	20000260 	.word	0x20000260
 8000df4:	20000270 	.word	0x20000270
 8000df8:	20000280 	.word	0x20000280
 8000dfc:	2000027c 	.word	0x2000027c
 8000e00:	20000278 	.word	0x20000278

08000e04 <sensorStartScan>:

void sensorStartScan(int intTimeUS, int avgCount)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
    if (sensorState == SensorIdle)
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <sensorStartScan+0x54>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d11b      	bne.n	8000e50 <sensorStartScan+0x4c>
    {
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f001 fc24 	bl	800266c <HAL_GPIO_WritePin>

    	setSensorClockMode('i');
 8000e24:	2069      	movs	r0, #105	; 0x69
 8000e26:	f7ff ff83 	bl	8000d30 <setSensorClockMode>

        sensorReady = 0;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <sensorStartScan+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
        integrationTimeUS = intTimeUS;
 8000e30:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <sensorStartScan+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
        averageCount = avgCount < SENSOR_MAX_AVERAGE_COUNT ? avgCount : SENSOR_MAX_AVERAGE_COUNT;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b20      	cmp	r3, #32
 8000e3a:	bfa8      	it	ge
 8000e3c:	2320      	movge	r3, #32
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <sensorStartScan+0x60>)
 8000e40:	6013      	str	r3, [r2, #0]

        sensorState = SensorStart;
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <sensorStartScan+0x54>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000e48:	210c      	movs	r1, #12
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <sensorStartScan+0x64>)
 8000e4c:	f003 fea0 	bl	8004b90 <HAL_TIM_PWM_Start>
    }
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000260 	.word	0x20000260
 8000e5c:	2000025c 	.word	0x2000025c
 8000e60:	20000274 	.word	0x20000274
 8000e64:	20000278 	.word	0x20000278
 8000e68:	20004acc 	.word	0x20004acc

08000e6c <sensorIsReady>:

int sensorIsReady()
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
    return sensorReady;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <sensorIsReady+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000025c 	.word	0x2000025c

08000e84 <sensorRead>:

void sensorRead(uint16_t *rawSpectrumBuffer)
{
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	f5ad 6d11 	sub.w	sp, sp, #2320	; 0x910
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8000e90:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 8000e94:	6018      	str	r0, [r3, #0]
    double averagedSampleBuffer[SENSOR_PIXEL_COUNT];
    memset(averagedSampleBuffer, 0, sizeof(averagedSampleBuffer));
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fa09 	bl	80072b8 <memset>
    int i, j;
    for (i = 0; i < averageCount; i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 8000eac:	e03d      	b.n	8000f2a <sensorRead+0xa6>
    {
        for (j = 0; j < SENSOR_PIXEL_COUNT; j++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8000eb4:	e02f      	b.n	8000f16 <sensorRead+0x92>
        {
            averagedSampleBuffer[j] += (double)rawSampleBuffer[i][j];
 8000eb6:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8000eba:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 8000ebe:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000eca:	4938      	ldr	r1, [pc, #224]	; (8000fac <sensorRead+0x128>)
 8000ecc:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8000edc:	4413      	add	r3, r2
 8000ede:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fb26 	bl	8000534 <__aeabi_ui2d>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4620      	mov	r0, r4
 8000eee:	4629      	mov	r1, r5
 8000ef0:	f7ff f9e4 	bl	80002bc <__adddf3>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 8000efc:	f6a1 1008 	subw	r0, r1, #2312	; 0x908
 8000f00:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 8000f04:	00c9      	lsls	r1, r1, #3
 8000f06:	4401      	add	r1, r0
 8000f08:	e9c1 2300 	strd	r2, r3, [r1]
        for (j = 0; j < SENSOR_PIXEL_COUNT; j++)
 8000f0c:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8000f10:	3301      	adds	r3, #1
 8000f12:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8000f16:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8000f1a:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8000f1e:	dbca      	blt.n	8000eb6 <sensorRead+0x32>
    for (i = 0; i < averageCount; i++)
 8000f20:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8000f24:	3301      	adds	r3, #1
 8000f26:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <sensorRead+0x12c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
 8000f32:	429a      	cmp	r2, r3
 8000f34:	dbbb      	blt.n	8000eae <sensorRead+0x2a>
        }
    }
    for (j = 0; j < SENSOR_PIXEL_COUNT; j++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8000f3c:	e02b      	b.n	8000f96 <sensorRead+0x112>
    {
        rawSpectrumBuffer[j] = (uint16_t)(averagedSampleBuffer[j] / averageCount);
 8000f3e:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8000f42:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 8000f46:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <sensorRead+0x12c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fafc 	bl	8000554 <__aeabi_i2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff fc8a 	bl	800087c <__aeabi_ddiv>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	f507 6211 	add.w	r2, r7, #2320	; 0x910
 8000f7a:	f6a2 120c 	subw	r2, r2, #2316	; 0x90c
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	18d4      	adds	r4, r2, r3
 8000f82:	f7ff fe29 	bl	8000bd8 <__aeabi_d2uiz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	8023      	strh	r3, [r4, #0]
    for (j = 0; j < SENSOR_PIXEL_COUNT; j++)
 8000f8c:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8000f90:	3301      	adds	r3, #1
 8000f92:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8000f96:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8000f9a:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8000f9e:	dbce      	blt.n	8000f3e <sensorRead+0xba>
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	f507 6711 	add.w	r7, r7, #2320	; 0x910
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bdb0      	pop	{r4, r5, r7, pc}
 8000fac:	20000280 	.word	0x20000280
 8000fb0:	20000278 	.word	0x20000278

08000fb4 <handleSensorTrigger>:

void handleSensorTrigger()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
    sensorTriggerCount++; // increment the sensorTriggerCount
 8000fba:	4b65      	ldr	r3, [pc, #404]	; (8001150 <handleSensorTrigger+0x19c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a63      	ldr	r2, [pc, #396]	; (8001150 <handleSensorTrigger+0x19c>)
 8000fc2:	6013      	str	r3, [r2, #0]

    switch (sensorState)
 8000fc4:	4b63      	ldr	r3, [pc, #396]	; (8001154 <handleSensorTrigger+0x1a0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	f200 80b2 	bhi.w	8001136 <handleSensorTrigger+0x182>
 8000fd2:	a201      	add	r2, pc, #4	; (adr r2, 8000fd8 <handleSensorTrigger+0x24>)
 8000fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd8:	08001061 	.word	0x08001061
 8000fdc:	08000fff 	.word	0x08000fff
 8000fe0:	08000fed 	.word	0x08000fed
 8000fe4:	0800102b 	.word	0x0800102b
 8000fe8:	08001095 	.word	0x08001095
    {

    case SensorIntegrating:
        if (sensorTriggerCount >= 48)
 8000fec:	4b58      	ldr	r3, [pc, #352]	; (8001150 <handleSensorTrigger+0x19c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ff2:	f340 80a2 	ble.w	800113a <handleSensorTrigger+0x186>
        {
            sensorState = SensorWaiting;
 8000ff6:	4b57      	ldr	r3, [pc, #348]	; (8001154 <handleSensorTrigger+0x1a0>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000ffc:	e09d      	b.n	800113a <handleSensorTrigger+0x186>

    case SensorStartSampling:
    //    	printf("SensorStartSampling\r\n");
            sensorIntegrationCycleCountdown--;
 8000ffe:	4b56      	ldr	r3, [pc, #344]	; (8001158 <handleSensorTrigger+0x1a4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3b01      	subs	r3, #1
 8001004:	4a54      	ldr	r2, [pc, #336]	; (8001158 <handleSensorTrigger+0x1a4>)
 8001006:	6013      	str	r3, [r2, #0]

            if (sensorIntegrationCycleCountdown == 0)
 8001008:	4b53      	ldr	r3, [pc, #332]	; (8001158 <handleSensorTrigger+0x1a4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 8096 	bne.w	800113e <handleSensorTrigger+0x18a>
            {
                HAL_GPIO_WritePin(Sensor_ST_GPIO_Port, Sensor_ST_Pin, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2104      	movs	r1, #4
 8001016:	4851      	ldr	r0, [pc, #324]	; (800115c <handleSensorTrigger+0x1a8>)
 8001018:	f001 fb28 	bl	800266c <HAL_GPIO_WritePin>
                sensorTriggerCount = 0;
 800101c:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <handleSensorTrigger+0x19c>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
                sensorState = SensorIntegrating;
 8001022:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <handleSensorTrigger+0x1a0>)
 8001024:	2203      	movs	r2, #3
 8001026:	701a      	strb	r2, [r3, #0]
            }

            break;
 8001028:	e089      	b.n	800113e <handleSensorTrigger+0x18a>

    case SensorWaiting:
    //    	printf("SensorWaiting\r\n");
            if (sensorTriggerCount >= 87)
 800102a:	4b49      	ldr	r3, [pc, #292]	; (8001150 <handleSensorTrigger+0x19c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b56      	cmp	r3, #86	; 0x56
 8001030:	f340 8087 	ble.w	8001142 <handleSensorTrigger+0x18e>
            {
            	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8001034:	210c      	movs	r1, #12
 8001036:	484a      	ldr	r0, [pc, #296]	; (8001160 <handleSensorTrigger+0x1ac>)
 8001038:	f003 feb6 	bl	8004da8 <HAL_TIM_PWM_Stop>
            	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800103c:	4b48      	ldr	r3, [pc, #288]	; (8001160 <handleSensorTrigger+0x1ac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
                sensorDataIndex = 0;
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <handleSensorTrigger+0x1b0>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]

                setSensorClockMode('a');
 800104a:	2061      	movs	r0, #97	; 0x61
 800104c:	f7ff fe70 	bl	8000d30 <setSensorClockMode>
                HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001050:	210c      	movs	r1, #12
 8001052:	4843      	ldr	r0, [pc, #268]	; (8001160 <handleSensorTrigger+0x1ac>)
 8001054:	f003 fd9c 	bl	8004b90 <HAL_TIM_PWM_Start>
                sensorState = SensorReading;
 8001058:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <handleSensorTrigger+0x1a0>)
 800105a:	2205      	movs	r2, #5
 800105c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800105e:	e070      	b.n	8001142 <handleSensorTrigger+0x18e>

    case SensorStart:
        sensorReady = 0;
 8001060:	4b41      	ldr	r3, [pc, #260]	; (8001168 <handleSensorTrigger+0x1b4>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
        sensorDataIndex = 0;
 8001066:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <handleSensorTrigger+0x1b0>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
        sensorIntegrationCycleCountdown = 4 + (integrationTimeUS / (SENSOR_CLK_PERIOD_NS*1000));
 800106c:	4b3f      	ldr	r3, [pc, #252]	; (800116c <handleSensorTrigger+0x1b8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a3f      	ldr	r2, [pc, #252]	; (8001170 <handleSensorTrigger+0x1bc>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	13d2      	asrs	r2, r2, #15
 8001078:	17db      	asrs	r3, r3, #31
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	3304      	adds	r3, #4
 800107e:	4a36      	ldr	r2, [pc, #216]	; (8001158 <handleSensorTrigger+0x1a4>)
 8001080:	6013      	str	r3, [r2, #0]
        sensorState = SensorStartSampling;
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <handleSensorTrigger+0x1a0>)
 8001084:	2202      	movs	r2, #2
 8001086:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(Sensor_ST_GPIO_Port, Sensor_ST_Pin, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	2104      	movs	r1, #4
 800108c:	4833      	ldr	r0, [pc, #204]	; (800115c <handleSensorTrigger+0x1a8>)
 800108e:	f001 faed 	bl	800266c <HAL_GPIO_WritePin>
        break;
 8001092:	e059      	b.n	8001148 <handleSensorTrigger+0x194>




    case SensorReading:
        if (sensorDataIndex < 288)
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <handleSensorTrigger+0x1b0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800109c:	da10      	bge.n	80010c0 <handleSensorTrigger+0x10c>
        {
        	uint16_t adc_val = adcRead();
 800109e:	f7ff fdbb 	bl	8000c18 <adcRead>
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
            rawSampleBuffer[rawSampleBufferPosition][sensorDataIndex] = adc_val;
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <handleSensorTrigger+0x1c0>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <handleSensorTrigger+0x1b0>)
 80010ac:	6819      	ldr	r1, [r3, #0]
 80010ae:	4832      	ldr	r0, [pc, #200]	; (8001178 <handleSensorTrigger+0x1c4>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	015b      	lsls	r3, r3, #5
 80010b8:	440b      	add	r3, r1
 80010ba:	88fa      	ldrh	r2, [r7, #6]
 80010bc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        }

        sensorDataIndex++;
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <handleSensorTrigger+0x1b0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <handleSensorTrigger+0x1b0>)
 80010c8:	6013      	str	r3, [r2, #0]

        if (sensorDataIndex >= 288)
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <handleSensorTrigger+0x1b0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80010d2:	db38      	blt.n	8001146 <handleSensorTrigger+0x192>
        {


            rawSampleBufferPosition++;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <handleSensorTrigger+0x1c0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a26      	ldr	r2, [pc, #152]	; (8001174 <handleSensorTrigger+0x1c0>)
 80010dc:	6013      	str	r3, [r2, #0]
            if (rawSampleBufferPosition > averageCount)
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <handleSensorTrigger+0x1c0>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b26      	ldr	r3, [pc, #152]	; (800117c <handleSensorTrigger+0x1c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dd1a      	ble.n	8001120 <handleSensorTrigger+0x16c>
            {
                rawSampleBufferPosition = 0;
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <handleSensorTrigger+0x1c0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
                sensorReady = 1;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <handleSensorTrigger+0x1b4>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
                sensorState = SensorIdle;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <handleSensorTrigger+0x1a0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
                HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80010fc:	210c      	movs	r1, #12
 80010fe:	4818      	ldr	r0, [pc, #96]	; (8001160 <handleSensorTrigger+0x1ac>)
 8001100:	f003 fe52 	bl	8004da8 <HAL_TIM_PWM_Stop>
                __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <handleSensorTrigger+0x1ac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2120      	movs	r1, #32
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f001 faaa 	bl	800266c <HAL_GPIO_WritePin>
                setSensorClockMode('i');
 8001118:	2069      	movs	r0, #105	; 0x69
 800111a:	f7ff fe09 	bl	8000d30 <setSensorClockMode>
                sensorState = SensorStart;
                setSensorClockMode('i');
                HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
            }
        }
        break;
 800111e:	e012      	b.n	8001146 <handleSensorTrigger+0x192>
                sensorState = SensorStart;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <handleSensorTrigger+0x1a0>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
                setSensorClockMode('i');
 8001126:	2069      	movs	r0, #105	; 0x69
 8001128:	f7ff fe02 	bl	8000d30 <setSensorClockMode>
                HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800112c:	210c      	movs	r1, #12
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <handleSensorTrigger+0x1ac>)
 8001130:	f003 fd2e 	bl	8004b90 <HAL_TIM_PWM_Start>
        break;
 8001134:	e007      	b.n	8001146 <handleSensorTrigger+0x192>

    default:
        break;
 8001136:	bf00      	nop
 8001138:	e006      	b.n	8001148 <handleSensorTrigger+0x194>
        break;
 800113a:	bf00      	nop
 800113c:	e004      	b.n	8001148 <handleSensorTrigger+0x194>
            break;
 800113e:	bf00      	nop
 8001140:	e002      	b.n	8001148 <handleSensorTrigger+0x194>
            break;
 8001142:	bf00      	nop
 8001144:	e000      	b.n	8001148 <handleSensorTrigger+0x194>
        break;
 8001146:	bf00      	nop
    }
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000026c 	.word	0x2000026c
 8001154:	20000260 	.word	0x20000260
 8001158:	20000268 	.word	0x20000268
 800115c:	48000800 	.word	0x48000800
 8001160:	20004acc 	.word	0x20004acc
 8001164:	20000270 	.word	0x20000270
 8001168:	2000025c 	.word	0x2000025c
 800116c:	20000274 	.word	0x20000274
 8001170:	14f8b589 	.word	0x14f8b589
 8001174:	2000027c 	.word	0x2000027c
 8001178:	20000280 	.word	0x20000280
 800117c:	20000278 	.word	0x20000278

08001180 <sensorGetIntegrationTime>:

int sensorGetIntegrationTime()
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    return integrationTimeUS;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <sensorGetIntegrationTime+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000274 	.word	0x20000274

08001198 <sensorGetAverageCount>:

int sensorGetAverageCount()
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
    return averageCount;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <sensorGetAverageCount+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000278 	.word	0x20000278

080011b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == Sensor_TRG_Pin)
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b80      	cmp	r3, #128	; 0x80
 80011be:	d101      	bne.n	80011c4 <HAL_GPIO_EXTI_Callback+0x14>
    {
        handleSensorTrigger();
 80011c0:	f7ff fef8 	bl	8000fb4 <handleSensorTrigger>
    }
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011d4:	1d39      	adds	r1, r7, #4
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011da:	2201      	movs	r2, #1
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <__io_putchar+0x20>)
 80011de:	f004 fe21 	bl	8005e24 <HAL_UART_Transmit>
  return ch;
 80011e2:	687b      	ldr	r3, [r7, #4]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20004b18 	.word	0x20004b18

080011f0 <start_scan>:
  char* name;
  void (*handler)(char*);
} Command;

// Command functions
void start_scan(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	sensorStartScan(integration_time_main, average_count_main);
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <start_scan+0x2c>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <start_scan+0x30>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	4610      	mov	r0, r2
 8001202:	f7ff fdff 	bl	8000e04 <sensorStartScan>

	while(!sensorIsReady());
 8001206:	bf00      	nop
 8001208:	f7ff fe30 	bl	8000e6c <sensorIsReady>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0fa      	beq.n	8001208 <start_scan+0x18>
	printf("ACK\r\n");
 8001212:	4804      	ldr	r0, [pc, #16]	; (8001224 <start_scan+0x34>)
 8001214:	f006 fd48 	bl	8007ca8 <puts>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20004f9c 	.word	0x20004f9c
 8001220:	20000003 	.word	0x20000003
 8001224:	0800a000 	.word	0x0800a000

08001228 <read_values>:

void read_values(){
 8001228:	b580      	push	{r7, lr}
 800122a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800122e:	af00      	add	r7, sp, #0
	ProtocolResponseFrame response;
	sensorRead(&response.spectrum);
 8001230:	463b      	mov	r3, r7
 8001232:	3308      	adds	r3, #8
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe25 	bl	8000e84 <sensorRead>

	response.integrationTime = sensorGetIntegrationTime();
 800123a:	f7ff ffa1 	bl	8001180 <sensorGetIntegrationTime>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001246:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800124a:	805a      	strh	r2, [r3, #2]
	response.averageCount = sensorGetAverageCount();
 800124c:	f7ff ffa4 	bl	8001198 <sensorGetAverageCount>
 8001250:	4603      	mov	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001258:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800125c:	809a      	strh	r2, [r3, #4]
	response.start = PROTOCOL_START;
 800125e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001262:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001266:	f64a 22bb 	movw	r2, #43707	; 0xaabb
 800126a:	801a      	strh	r2, [r3, #0]
	response.dataStart = PROTOCOL_DATA_START;
 800126c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001270:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001274:	f64a 720f 	movw	r2, #44815	; 0xaf0f
 8001278:	80da      	strh	r2, [r3, #6]
	response.end = PROTOCOL_END;
 800127a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800127e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001282:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001286:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
	memset(response.pad, 0, PROTOCOL_PAD_SIZE);
 800128a:	463b      	mov	r3, r7
 800128c:	f203 234a 	addw	r3, r3, #586	; 0x24a
 8001290:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f006 f80e 	bl	80072b8 <memset>

	for(int i = 0; i < SENSOR_PIXEL_COUNT; i++){
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80012a2:	e01c      	b.n	80012de <read_values+0xb6>
		int val = response.spectrum[i] - calibration_response.spectrum[i];
 80012a4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80012a8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80012ac:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 80012b0:	3204      	adds	r2, #4
 80012b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <read_values+0xd8>)
 80012ba:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80012be:	3304      	adds	r3, #4
 80012c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c4:	1acb      	subs	r3, r1, r3
 80012c6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
		printf("%d,", val);
 80012ca:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <read_values+0xdc>)
 80012d0:	f006 fc64 	bl	8007b9c <iprintf>
	for(int i = 0; i < SENSOR_PIXEL_COUNT; i++){
 80012d4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80012d8:	3301      	adds	r3, #1
 80012da:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80012de:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80012e2:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80012e6:	dbdd      	blt.n	80012a4 <read_values+0x7c>
	}
	printf("\r\n");
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <read_values+0xe0>)
 80012ea:	f006 fcdd 	bl	8007ca8 <puts>
	printf("ACK\r\n");
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <read_values+0xe4>)
 80012f0:	f006 fcda 	bl	8007ca8 <puts>
}
 80012f4:	bf00      	nop
 80012f6:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20004b9c 	.word	0x20004b9c
 8001304:	0800a008 	.word	0x0800a008
 8001308:	0800a00c 	.word	0x0800a00c
 800130c:	0800a000 	.word	0x0800a000

08001310 <cal_sensor>:

void cal_sensor(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	sensorStartScan(integration_time_main, average_count_main);
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <cal_sensor+0x34>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <cal_sensor+0x38>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f7ff fd6f 	bl	8000e04 <sensorStartScan>
	while(!sensorIsReady());
 8001326:	bf00      	nop
 8001328:	f7ff fda0 	bl	8000e6c <sensorIsReady>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0fa      	beq.n	8001328 <cal_sensor+0x18>

	sensorRead(&calibration_response.spectrum);
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <cal_sensor+0x3c>)
 8001334:	f7ff fda6 	bl	8000e84 <sensorRead>
	printf("ACK\r\n");
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <cal_sensor+0x40>)
 800133a:	f006 fcb5 	bl	8007ca8 <puts>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20004f9c 	.word	0x20004f9c
 8001348:	20000003 	.word	0x20000003
 800134c:	20004ba4 	.word	0x20004ba4
 8001350:	0800a000 	.word	0x0800a000

08001354 <set_integration_time>:

void set_integration_time(char* time){
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	if (time != NULL){
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <set_integration_time+0x26>
		int time_int = atoi(time);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f005 ff79 	bl	800725a <atoi>
 8001368:	60f8      	str	r0, [r7, #12]
		integration_time_main = time_int;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <set_integration_time+0x34>)
 8001370:	801a      	strh	r2, [r3, #0]
		printf("ACK\r\n");
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <set_integration_time+0x38>)
 8001374:	f006 fc98 	bl	8007ca8 <puts>
	}
	else
	{
		printf("ERROR.\r\n");
	}
}
 8001378:	e002      	b.n	8001380 <set_integration_time+0x2c>
		printf("ERROR.\r\n");
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <set_integration_time+0x3c>)
 800137c:	f006 fc94 	bl	8007ca8 <puts>
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20004f9c 	.word	0x20004f9c
 800138c:	0800a000 	.word	0x0800a000
 8001390:	0800a010 	.word	0x0800a010

08001394 <set_avg_count>:

void set_avg_count(char* count){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	if (count != NULL){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <set_avg_count+0x26>
		int count_int = atoi(count);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f005 ff59 	bl	800725a <atoi>
 80013a8:	60f8      	str	r0, [r7, #12]
		average_count_main = count_int;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <set_avg_count+0x34>)
 80013b0:	701a      	strb	r2, [r3, #0]
		printf("ACK\r\n");
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <set_avg_count+0x38>)
 80013b4:	f006 fc78 	bl	8007ca8 <puts>
	}
	else
	{
		printf("ERROR.\r\n");
	}
}
 80013b8:	e002      	b.n	80013c0 <set_avg_count+0x2c>
		printf("ERROR.\r\n");
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <set_avg_count+0x3c>)
 80013bc:	f006 fc74 	bl	8007ca8 <puts>
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000003 	.word	0x20000003
 80013cc:	0800a000 	.word	0x0800a000
 80013d0:	0800a010 	.word	0x0800a010

080013d4 <set_adc_data_rate>:

void set_adc_data_rate(char* data_rate){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	if (data_rate != NULL){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <set_adc_data_rate+0x26>
		int data_rate_int = atoi(data_rate);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f005 ff39 	bl	800725a <atoi>
 80013e8:	60f8      	str	r0, [r7, #12]
		adc_data_rate = data_rate_int;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <set_adc_data_rate+0x34>)
 80013f0:	801a      	strh	r2, [r3, #0]
		printf("ACK\r\n");
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <set_adc_data_rate+0x38>)
 80013f4:	f006 fc58 	bl	8007ca8 <puts>
	}
	else
	{
		printf("ERROR.\r\n");
	}
}
 80013f8:	e002      	b.n	8001400 <set_adc_data_rate+0x2c>
		printf("ERROR.\r\n");
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <set_adc_data_rate+0x3c>)
 80013fc:	f006 fc54 	bl	8007ca8 <puts>
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000000 	.word	0x20000000
 800140c:	0800a000 	.word	0x0800a000
 8001410:	0800a010 	.word	0x0800a010

08001414 <set_adc_mode>:

void set_adc_mode(char* mode){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if (mode != NULL){
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00b      	beq.n	800143a <set_adc_mode+0x26>
		int mode_int = atoi(mode);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f005 ff19 	bl	800725a <atoi>
 8001428:	60f8      	str	r0, [r7, #12]
		adc_mode = mode_int;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <set_adc_mode+0x34>)
 8001430:	701a      	strb	r2, [r3, #0]
		printf("ACK\r\n");
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <set_adc_mode+0x38>)
 8001434:	f006 fc38 	bl	8007ca8 <puts>
	}
	else
	{
		printf("ERROR.\r\n");
	}
}
 8001438:	e002      	b.n	8001440 <set_adc_mode+0x2c>
		printf("ERROR.\r\n");
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <set_adc_mode+0x3c>)
 800143c:	f006 fc34 	bl	8007ca8 <puts>
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000002 	.word	0x20000002
 800144c:	0800a000 	.word	0x0800a000
 8001450:	0800a010 	.word	0x0800a010

08001454 <get_integration_time>:

void get_integration_time(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	printf("INTEGRATION TIME: %d\r\n", integration_time_main);
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <get_integration_time+0x1c>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <get_integration_time+0x20>)
 8001460:	f006 fb9c 	bl	8007b9c <iprintf>
	printf("ACK\r\n");
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <get_integration_time+0x24>)
 8001466:	f006 fc1f 	bl	8007ca8 <puts>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20004f9c 	.word	0x20004f9c
 8001474:	0800a018 	.word	0x0800a018
 8001478:	0800a000 	.word	0x0800a000

0800147c <get_avg_count>:
void get_avg_count(){
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	printf("AVG COUNT: %d\r\n", average_count_main);
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <get_avg_count+0x1c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <get_avg_count+0x20>)
 8001488:	f006 fb88 	bl	8007b9c <iprintf>
	printf("ACK\r\n");
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <get_avg_count+0x24>)
 800148e:	f006 fc0b 	bl	8007ca8 <puts>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000003 	.word	0x20000003
 800149c:	0800a030 	.word	0x0800a030
 80014a0:	0800a000 	.word	0x0800a000

080014a4 <get_adc_data_rate>:
void get_adc_data_rate(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	printf("ADC DATA RATE: %d\r\n", adc_data_rate);
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <get_adc_data_rate+0x1c>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <get_adc_data_rate+0x20>)
 80014b0:	f006 fb74 	bl	8007b9c <iprintf>
	printf("ACK\r\n");
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <get_adc_data_rate+0x24>)
 80014b6:	f006 fbf7 	bl	8007ca8 <puts>
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000
 80014c4:	0800a040 	.word	0x0800a040
 80014c8:	0800a000 	.word	0x0800a000

080014cc <get_adc_mode>:
void get_adc_mode(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	printf("ADC CONVERISON MODE: %d\r\n", adc_mode);
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <get_adc_mode+0x1c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <get_adc_mode+0x20>)
 80014d8:	f006 fb60 	bl	8007b9c <iprintf>
	printf("ACK\r\n");
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <get_adc_mode+0x24>)
 80014de:	f006 fbe3 	bl	8007ca8 <puts>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000002 	.word	0x20000002
 80014ec:	0800a054 	.word	0x0800a054
 80014f0:	0800a000 	.word	0x0800a000

080014f4 <help>:
void help(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	printf("'start_scan': Start scan procedure with given integration time and average count.\r\n");
 80014f8:	4812      	ldr	r0, [pc, #72]	; (8001544 <help+0x50>)
 80014fa:	f006 fbd5 	bl	8007ca8 <puts>
	printf("'cal_sensor': Calibrate sensor. Before calling this function please cover the sensor.\r\n");
 80014fe:	4812      	ldr	r0, [pc, #72]	; (8001548 <help+0x54>)
 8001500:	f006 fbd2 	bl	8007ca8 <puts>
	printf("'read_values': Print the last measurement of sensor to terminal.\r\n");
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <help+0x58>)
 8001506:	f006 fbcf 	bl	8007ca8 <puts>
	printf("'set_integration_time': Set the integration time of sensor in us (adjustment in 400ns steps possible).\r\n");
 800150a:	4811      	ldr	r0, [pc, #68]	; (8001550 <help+0x5c>)
 800150c:	f006 fbcc 	bl	8007ca8 <puts>
	printf("'set_avg_count': Set the average count value of sensor.\r\n");
 8001510:	4810      	ldr	r0, [pc, #64]	; (8001554 <help+0x60>)
 8001512:	f006 fbc9 	bl	8007ca8 <puts>
	printf("'set_adc_data_rate': Set data-rate of ADS1115. Possible values in SPS: 8, 16, 32, 64, 128, 250, 475, 860\r\n");
 8001516:	4810      	ldr	r0, [pc, #64]	; (8001558 <help+0x64>)
 8001518:	f006 fbc6 	bl	8007ca8 <puts>
	printf("'set_adc_mode': Set conversion mode of ADS1115. 1: single conversion, 0: continuous conversion\n");
 800151c:	480f      	ldr	r0, [pc, #60]	; (800155c <help+0x68>)
 800151e:	f006 fbc3 	bl	8007ca8 <puts>
	printf("'get_integration_time': Outputs set integration time.\r\n");
 8001522:	480f      	ldr	r0, [pc, #60]	; (8001560 <help+0x6c>)
 8001524:	f006 fbc0 	bl	8007ca8 <puts>
	printf("'get_avg_count': Outputs set average count.\r\n");
 8001528:	480e      	ldr	r0, [pc, #56]	; (8001564 <help+0x70>)
 800152a:	f006 fbbd 	bl	8007ca8 <puts>
	printf("'get_adc_data_rate': Outputs set ADC data-rate.\r\n");
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <help+0x74>)
 8001530:	f006 fbba 	bl	8007ca8 <puts>
	printf("'get_adc_mode': Outputs set ADC Mode.\n");
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <help+0x78>)
 8001536:	f006 fbb7 	bl	8007ca8 <puts>
	printf("'help': Help.\n");
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <help+0x7c>)
 800153c:	f006 fbb4 	bl	8007ca8 <puts>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	0800a070 	.word	0x0800a070
 8001548:	0800a0c4 	.word	0x0800a0c4
 800154c:	0800a11c 	.word	0x0800a11c
 8001550:	0800a160 	.word	0x0800a160
 8001554:	0800a1c8 	.word	0x0800a1c8
 8001558:	0800a204 	.word	0x0800a204
 800155c:	0800a270 	.word	0x0800a270
 8001560:	0800a2d0 	.word	0x0800a2d0
 8001564:	0800a308 	.word	0x0800a308
 8001568:	0800a338 	.word	0x0800a338
 800156c:	0800a36c 	.word	0x0800a36c
 8001570:	0800a394 	.word	0x0800a394

08001574 <HAL_UART_RxCpltCallback>:
char cmdBuffer[CMD_BUFFER_SIZE];
uint8_t cmdIndex = 0;

// USART2 interrupt handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  cmdBuffer[cmdIndex++] = huart->Instance->RDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001582:	b299      	uxth	r1, r3
 8001584:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_UART_RxCpltCallback+0x100>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	b2d0      	uxtb	r0, r2
 800158c:	4a39      	ldr	r2, [pc, #228]	; (8001674 <HAL_UART_RxCpltCallback+0x100>)
 800158e:	7010      	strb	r0, [r2, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	b2c9      	uxtb	r1, r1
 8001594:	4b38      	ldr	r3, [pc, #224]	; (8001678 <HAL_UART_RxCpltCallback+0x104>)
 8001596:	5499      	strb	r1, [r3, r2]

  if (cmdIndex == CMD_BUFFER_SIZE || cmdBuffer[cmdIndex - 1] == '\n')
 8001598:	4b36      	ldr	r3, [pc, #216]	; (8001674 <HAL_UART_RxCpltCallback+0x100>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b32      	cmp	r3, #50	; 0x32
 800159e:	d006      	beq.n	80015ae <HAL_UART_RxCpltCallback+0x3a>
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_UART_RxCpltCallback+0x100>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a34      	ldr	r2, [pc, #208]	; (8001678 <HAL_UART_RxCpltCallback+0x104>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d153      	bne.n	8001656 <HAL_UART_RxCpltCallback+0xe2>
  {
    cmdBuffer[cmdIndex] = '\0';
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_UART_RxCpltCallback+0x100>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_UART_RxCpltCallback+0x104>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	5499      	strb	r1, [r3, r2]
    char* cmdName = strtok(cmdBuffer, " \r\n");
 80015ba:	4930      	ldr	r1, [pc, #192]	; (800167c <HAL_UART_RxCpltCallback+0x108>)
 80015bc:	482e      	ldr	r0, [pc, #184]	; (8001678 <HAL_UART_RxCpltCallback+0x104>)
 80015be:	f006 fb7b 	bl	8007cb8 <strtok>
 80015c2:	4603      	mov	r3, r0
 80015c4:	613b      	str	r3, [r7, #16]
    if (cmdName != NULL)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d041      	beq.n	8001650 <HAL_UART_RxCpltCallback+0xdc>
    {
      char* arg = strtok(NULL, " \r\n");
 80015cc:	492b      	ldr	r1, [pc, #172]	; (800167c <HAL_UART_RxCpltCallback+0x108>)
 80015ce:	2000      	movs	r0, #0
 80015d0:	f006 fb72 	bl	8007cb8 <strtok>
 80015d4:	4603      	mov	r3, r0
 80015d6:	60fb      	str	r3, [r7, #12]
      if (arg != NULL)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01c      	beq.n	8001618 <HAL_UART_RxCpltCallback+0xa4>
      {
        uint8_t i;
        for (i = 0; i < sizeof(commands)/sizeof(commands[0]); i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	75fb      	strb	r3, [r7, #23]
 80015e2:	e015      	b.n	8001610 <HAL_UART_RxCpltCallback+0x9c>
        {
          if (strcmp(commands[i].name, cmdName) == 0)
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_UART_RxCpltCallback+0x10c>)
 80015e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80015ec:	6939      	ldr	r1, [r7, #16]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fdf6 	bl	80001e0 <strcmp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d107      	bne.n	800160a <HAL_UART_RxCpltCallback+0x96>
          {
            commands[i].handler(arg);
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	4a20      	ldr	r2, [pc, #128]	; (8001680 <HAL_UART_RxCpltCallback+0x10c>)
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	4798      	blx	r3
            break;
 8001608:	e022      	b.n	8001650 <HAL_UART_RxCpltCallback+0xdc>
        for (i = 0; i < sizeof(commands)/sizeof(commands[0]); i++)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	3301      	adds	r3, #1
 800160e:	75fb      	strb	r3, [r7, #23]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b0b      	cmp	r3, #11
 8001614:	d9e6      	bls.n	80015e4 <HAL_UART_RxCpltCallback+0x70>
 8001616:	e01b      	b.n	8001650 <HAL_UART_RxCpltCallback+0xdc>
        }
      }
      else
      {
        uint8_t i;
        for (i = 0; i < sizeof(commands)/sizeof(commands[0]); i++)
 8001618:	2300      	movs	r3, #0
 800161a:	75bb      	strb	r3, [r7, #22]
 800161c:	e015      	b.n	800164a <HAL_UART_RxCpltCallback+0xd6>
        {
          if (strcmp(commands[i].name, cmdName) == 0)
 800161e:	7dbb      	ldrb	r3, [r7, #22]
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_UART_RxCpltCallback+0x10c>)
 8001622:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001626:	6939      	ldr	r1, [r7, #16]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fdd9 	bl	80001e0 <strcmp>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_UART_RxCpltCallback+0xd0>
          {
            commands[i].handler(NULL);
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_UART_RxCpltCallback+0x10c>)
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2000      	movs	r0, #0
 8001640:	4798      	blx	r3
            break;
 8001642:	e005      	b.n	8001650 <HAL_UART_RxCpltCallback+0xdc>
        for (i = 0; i < sizeof(commands)/sizeof(commands[0]); i++)
 8001644:	7dbb      	ldrb	r3, [r7, #22]
 8001646:	3301      	adds	r3, #1
 8001648:	75bb      	strb	r3, [r7, #22]
 800164a:	7dbb      	ldrb	r3, [r7, #22]
 800164c:	2b0b      	cmp	r3, #11
 800164e:	d9e6      	bls.n	800161e <HAL_UART_RxCpltCallback+0xaa>
          }
        }
      }
    }
    cmdIndex = 0;
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_UART_RxCpltCallback+0x100>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
  }

  // Wait for the next character
  HAL_UART_Receive_IT(&huart2, (uint8_t*)cmdBuffer + cmdIndex, 1);
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_UART_RxCpltCallback+0x100>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_UART_RxCpltCallback+0x104>)
 800165e:	4413      	add	r3, r2
 8001660:	2201      	movs	r2, #1
 8001662:	4619      	mov	r1, r3
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <HAL_UART_RxCpltCallback+0x110>)
 8001666:	f004 fc71 	bl	8005f4c <HAL_UART_Receive_IT>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20004fd2 	.word	0x20004fd2
 8001678:	20004fa0 	.word	0x20004fa0
 800167c:	0800a468 	.word	0x0800a468
 8001680:	20000004 	.word	0x20000004
 8001684:	20004b18 	.word	0x20004b18

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168c:	f000 fc76 	bl	8001f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001690:	f000 f814 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001694:	f000 f990 	bl	80019b8 <MX_GPIO_Init>
  MX_I2C3_Init();
 8001698:	f000 f874 	bl	8001784 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 800169c:	f000 f95c 	bl	8001958 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016a0:	f000 f8b0 	bl	8001804 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  sensorInit();
 80016a4:	f7ff fb78 	bl	8000d98 <sensorInit>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)cmdBuffer, 1);
 80016a8:	2201      	movs	r2, #1
 80016aa:	4902      	ldr	r1, [pc, #8]	; (80016b4 <main+0x2c>)
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <main+0x30>)
 80016ae:	f004 fc4d 	bl	8005f4c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <main+0x2a>
 80016b4:	20004fa0 	.word	0x20004fa0
 80016b8:	20004b18 	.word	0x20004b18

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0a6      	sub	sp, #152	; 0x98
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016c6:	2228      	movs	r2, #40	; 0x28
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 fdf4 	bl	80072b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2258      	movs	r2, #88	; 0x58
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f005 fde6 	bl	80072b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ec:	2302      	movs	r3, #2
 80016ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f0:	2301      	movs	r3, #1
 80016f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f4:	2310      	movs	r3, #16
 80016f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	2302      	movs	r3, #2
 80016fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001708:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800170c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001716:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800171a:	4618      	mov	r0, r3
 800171c:	f001 fcd8 	bl	80030d0 <HAL_RCC_OscConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001726:	f000 f9bd 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172a:	230f      	movs	r3, #15
 800172c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172e:	2302      	movs	r3, #2
 8001730:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001740:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001744:	2102      	movs	r1, #2
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fd16 	bl	8004178 <HAL_RCC_ClockConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001752:	f000 f9a7 	bl	8001aa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <SystemClock_Config+0xc4>)
 8001758:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001762:	2300      	movs	r3, #0
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4618      	mov	r0, r3
 800176a:	f002 ff3b 	bl	80045e4 <HAL_RCCEx_PeriphCLKConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001774:	f000 f996 	bl	8001aa4 <Error_Handler>
  }
}
 8001778:	bf00      	nop
 800177a:	3798      	adds	r7, #152	; 0x98
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	00041002 	.word	0x00041002

08001784 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_I2C3_Init+0x74>)
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <MX_I2C3_Init+0x78>)
 800178c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_I2C3_Init+0x74>)
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <MX_I2C3_Init+0x7c>)
 8001792:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_I2C3_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_I2C3_Init+0x74>)
 800179c:	2201      	movs	r2, #1
 800179e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_I2C3_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_I2C3_Init+0x74>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_I2C3_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_I2C3_Init+0x74>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_I2C3_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017be:	480e      	ldr	r0, [pc, #56]	; (80017f8 <MX_I2C3_Init+0x74>)
 80017c0:	f000 ff84 	bl	80026cc <HAL_I2C_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017ca:	f000 f96b 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ce:	2100      	movs	r1, #0
 80017d0:	4809      	ldr	r0, [pc, #36]	; (80017f8 <MX_I2C3_Init+0x74>)
 80017d2:	f001 fbe5 	bl	8002fa0 <HAL_I2CEx_ConfigAnalogFilter>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80017dc:	f000 f962 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017e0:	2100      	movs	r1, #0
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_I2C3_Init+0x74>)
 80017e4:	f001 fc27 	bl	8003036 <HAL_I2CEx_ConfigDigitalFilter>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80017ee:	f000 f959 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20004a80 	.word	0x20004a80
 80017fc:	40007800 	.word	0x40007800
 8001800:	2000090e 	.word	0x2000090e

08001804 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b09a      	sub	sp, #104	; 0x68
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	615a      	str	r2, [r3, #20]
 8001836:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	222c      	movs	r2, #44	; 0x2c
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f005 fd3a 	bl	80072b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001844:	4b42      	ldr	r3, [pc, #264]	; (8001950 <MX_TIM1_Init+0x14c>)
 8001846:	4a43      	ldr	r2, [pc, #268]	; (8001954 <MX_TIM1_Init+0x150>)
 8001848:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800184a:	4b41      	ldr	r3, [pc, #260]	; (8001950 <MX_TIM1_Init+0x14c>)
 800184c:	2203      	movs	r2, #3
 800184e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <MX_TIM1_Init+0x14c>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 18-1;
 8001856:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <MX_TIM1_Init+0x14c>)
 8001858:	2211      	movs	r2, #17
 800185a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <MX_TIM1_Init+0x14c>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <MX_TIM1_Init+0x14c>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <MX_TIM1_Init+0x14c>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800186e:	4838      	ldr	r0, [pc, #224]	; (8001950 <MX_TIM1_Init+0x14c>)
 8001870:	f003 f8d6 	bl	8004a20 <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800187a:	f000 f913 	bl	8001aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001888:	4619      	mov	r1, r3
 800188a:	4831      	ldr	r0, [pc, #196]	; (8001950 <MX_TIM1_Init+0x14c>)
 800188c:	f003 fc3c 	bl	8005108 <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001896:	f000 f905 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800189a:	482d      	ldr	r0, [pc, #180]	; (8001950 <MX_TIM1_Init+0x14c>)
 800189c:	f003 f917 	bl	8004ace <HAL_TIM_PWM_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018a6:	f000 f8fd 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ba:	4619      	mov	r1, r3
 80018bc:	4824      	ldr	r0, [pc, #144]	; (8001950 <MX_TIM1_Init+0x14c>)
 80018be:	f004 f951 	bl	8005b64 <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80018c8:	f000 f8ec 	bl	8001aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018cc:	2360      	movs	r3, #96	; 0x60
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 9;
 80018d0:	2309      	movs	r3, #9
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e8:	220c      	movs	r2, #12
 80018ea:	4619      	mov	r1, r3
 80018ec:	4818      	ldr	r0, [pc, #96]	; (8001950 <MX_TIM1_Init+0x14c>)
 80018ee:	f003 faf7 	bl	8004ee0 <HAL_TIM_PWM_ConfigChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018f8:	f000 f8d4 	bl	8001aa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001914:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800191e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_TIM1_Init+0x14c>)
 8001932:	f004 f9a3 	bl	8005c7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800193c:	f000 f8b2 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <MX_TIM1_Init+0x14c>)
 8001942:	f000 f95b 	bl	8001bfc <HAL_TIM_MspPostInit>

}
 8001946:	bf00      	nop
 8001948:	3768      	adds	r7, #104	; 0x68
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20004acc 	.word	0x20004acc
 8001954:	40012c00 	.word	0x40012c00

08001958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <MX_USART2_UART_Init+0x5c>)
 8001960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800199c:	f004 f9f4 	bl	8005d88 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019a6:	f000 f87d 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20004b18 	.word	0x20004b18
 80019b4:	40004400 	.word	0x40004400

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019d8:	6153      	str	r3, [r2, #20]
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4a2c      	ldr	r2, [pc, #176]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	6153      	str	r3, [r2, #20]
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sensor_ST_GPIO_Port, Sensor_ST_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2104      	movs	r1, #4
 8001a02:	4827      	ldr	r0, [pc, #156]	; (8001aa0 <MX_GPIO_Init+0xe8>)
 8001a04:	f000 fe32 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f000 fe2c 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Sensor_ST_Pin */
  GPIO_InitStruct.Pin = Sensor_ST_Pin;
 8001a14:	2304      	movs	r3, #4
 8001a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Sensor_ST_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4619      	mov	r1, r3
 8001a2a:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <MX_GPIO_Init+0xe8>)
 8001a2c:	f000 fc94 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a30:	2320      	movs	r3, #32
 8001a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f000 fc85 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_TRG_Pin */
  GPIO_InitStruct.Pin = Sensor_TRG_Pin;
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Sensor_TRG_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a66:	f000 fc77 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_EOS_Pin */
  GPIO_InitStruct.Pin = Sensor_EOS_Pin;
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a74:	2302      	movs	r3, #2
 8001a76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Sensor_EOS_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4808      	ldr	r0, [pc, #32]	; (8001aa0 <MX_GPIO_Init+0xe8>)
 8001a80:	f000 fc6a 	bl	8002358 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2017      	movs	r0, #23
 8001a8a:	f000 fbb8 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a8e:	2017      	movs	r0, #23
 8001a90:	f000 fbd1 	bl	8002236 <HAL_NVIC_EnableIRQ>

}
 8001a94:	bf00      	nop
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	48000800 	.word	0x48000800

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	e7fe      	b.n	8001aac <Error_Handler+0x8>
	...

08001ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_MspInit+0x44>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_MspInit+0x44>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_MspInit+0x44>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_MspInit+0x44>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_MspInit+0x44>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_MspInit+0x44>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <HAL_I2C_MspInit+0xb8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d146      	bne.n	8001ba8 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_I2C_MspInit+0xbc>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <HAL_I2C_MspInit+0xbc>)
 8001b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b24:	6153      	str	r3, [r2, #20]
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_I2C_MspInit+0xbc>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_I2C_MspInit+0xbc>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_I2C_MspInit+0xbc>)
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	6153      	str	r3, [r2, #20]
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_I2C_MspInit+0xbc>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b50:	2312      	movs	r3, #18
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <HAL_I2C_MspInit+0xc0>)
 8001b68:	f000 fbf6 	bl	8002358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b72:	2312      	movs	r3, #18
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8c:	f000 fbe4 	bl	8002358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_I2C_MspInit+0xbc>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_I2C_MspInit+0xbc>)
 8001b96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b9a:	61d3      	str	r3, [r2, #28]
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_I2C_MspInit+0xbc>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40007800 	.word	0x40007800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48000800 	.word	0x48000800

08001bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_TIM_Base_MspInit+0x38>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10b      	bne.n	8001be6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bd8:	6193      	str	r3, [r2, #24]
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40012c00 	.word	0x40012c00
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_TIM_MspPostInit+0x64>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d11b      	bne.n	8001c56 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_TIM_MspPostInit+0x68>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_TIM_MspPostInit+0x68>)
 8001c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c28:	6153      	str	r3, [r2, #20]
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_TIM_MspPostInit+0x68>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Sensor_CLK_Pin;
 8001c36:	2308      	movs	r3, #8
 8001c38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Sensor_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_TIM_MspPostInit+0x6c>)
 8001c52:	f000 fb81 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	40021000 	.word	0x40021000
 8001c68:	48000800 	.word	0x48000800

08001c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <HAL_UART_MspInit+0x8c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d130      	bne.n	8001cf0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_UART_MspInit+0x90>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4a1a      	ldr	r2, [pc, #104]	; (8001cfc <HAL_UART_MspInit+0x90>)
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_UART_MspInit+0x90>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_UART_MspInit+0x90>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_UART_MspInit+0x90>)
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	6153      	str	r3, [r2, #20]
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_UART_MspInit+0x90>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cdc:	f000 fb3c 	bl	8002358 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2026      	movs	r0, #38	; 0x26
 8001ce6:	f000 fa8a 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cea:	2026      	movs	r0, #38	; 0x26
 8001cec:	f000 faa3 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40004400 	.word	0x40004400
 8001cfc:	40021000 	.word	0x40021000

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <NMI_Handler+0x4>

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4c:	f000 f95c 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sensor_TRG_Pin);
 8001d58:	2080      	movs	r0, #128	; 0x80
 8001d5a:	f000 fc9f 	bl	800269c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <USART2_IRQHandler+0x10>)
 8001d6a:	f004 f93d 	bl	8005fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20004b18 	.word	0x20004b18

08001d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return 1;
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_kill>:

int _kill(int pid, int sig)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d92:	f005 fa67 	bl	8007264 <__errno>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2216      	movs	r2, #22
 8001d9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_exit>:

void _exit (int status)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffe7 	bl	8001d88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dba:	e7fe      	b.n	8001dba <_exit+0x12>

08001dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e00a      	b.n	8001de4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dce:	f3af 8000 	nop.w
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	b2ca      	uxtb	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbf0      	blt.n	8001dce <_read+0x12>
  }

  return len;
 8001dec:	687b      	ldr	r3, [r7, #4]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e009      	b.n	8001e1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	60ba      	str	r2, [r7, #8]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f9db 	bl	80011cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dbf1      	blt.n	8001e08 <_write+0x12>
  }
  return len;
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_close>:

int _close(int file)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e56:	605a      	str	r2, [r3, #4]
  return 0;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_isatty>:

int _isatty(int file)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <_sbrk+0x5c>)
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <_sbrk+0x60>)
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <_sbrk+0x64>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <_sbrk+0x68>)
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d207      	bcs.n	8001ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec8:	f005 f9cc 	bl	8007264 <__errno>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	220c      	movs	r2, #12
 8001ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed6:	e009      	b.n	8001eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <_sbrk+0x64>)
 8001ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20010000 	.word	0x20010000
 8001ef8:	00000400 	.word	0x00000400
 8001efc:	20004fd4 	.word	0x20004fd4
 8001f00:	20004ff0 	.word	0x20004ff0

08001f04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <SystemInit+0x20>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <SystemInit+0x20>)
 8001f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f60 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2e:	490e      	ldr	r1, [pc, #56]	; (8001f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <LoopForever+0xe>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f44:	4c0b      	ldr	r4, [pc, #44]	; (8001f74 <LoopForever+0x16>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f52:	f7ff ffd7 	bl	8001f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f56:	f005 f98b 	bl	8007270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5a:	f7ff fb95 	bl	8001688 <main>

08001f5e <LoopForever>:

LoopForever:
    b LoopForever
 8001f5e:	e7fe      	b.n	8001f5e <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f68:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001f6c:	0800a8e8 	.word	0x0800a8e8
  ldr r2, =_sbss
 8001f70:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001f74:	20004fec 	.word	0x20004fec

08001f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC1_2_IRQHandler>
	...

08001f7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_Init+0x28>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_Init+0x28>)
 8001f86:	f043 0310 	orr.w	r3, r3, #16
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 f92b 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f92:	200f      	movs	r0, #15
 8001f94:	f000 f808 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f98:	f7ff fd8a 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40022000 	.word	0x40022000

08001fa8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_InitTick+0x54>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_InitTick+0x58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f943 	bl	8002252 <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe4:	f000 f90b 	bl	80021fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <HAL_InitTick+0x5c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000064 	.word	0x20000064
 8002000:	2000006c 	.word	0x2000006c
 8002004:	20000068 	.word	0x20000068

08002008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	2000006c 	.word	0x2000006c
 800202c:	20004fd8 	.word	0x20004fd8

08002030 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;  
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20004fd8 	.word	0x20004fd8

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <__NVIC_EnableIRQ+0x38>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b4:	d301      	bcc.n	80021ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <SysTick_Config+0x40>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c2:	210f      	movs	r1, #15
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c8:	f7ff ff8e 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <SysTick_Config+0x40>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SysTick_Config+0x40>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff29 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff3e 	bl	8002090 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff8e 	bl	800213c <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5d 	bl	80020e8 <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff31 	bl	80020ac <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa2 	bl	80021a4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002278:	2b02      	cmp	r3, #2
 800227a:	d008      	beq.n	800228e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2204      	movs	r2, #4
 8002280:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e020      	b.n	80022d0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 020e 	bic.w	r2, r2, #14
 800229c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d005      	beq.n	80022fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2204      	movs	r2, #4
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e027      	b.n	800234e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 020e 	bic.w	r2, r2, #14
 800230c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
    } 
  }
  return status;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002366:	e160      	b.n	800262a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2101      	movs	r1, #1
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	4013      	ands	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8152 	beq.w	8002624 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d005      	beq.n	8002398 <HAL_GPIO_Init+0x40>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d130      	bne.n	80023fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ce:	2201      	movs	r2, #1
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f003 0201 	and.w	r2, r3, #1
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b03      	cmp	r3, #3
 8002404:	d017      	beq.n	8002436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	2203      	movs	r2, #3
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d123      	bne.n	800248a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	08da      	lsrs	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3208      	adds	r2, #8
 800244a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	08da      	lsrs	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3208      	adds	r2, #8
 8002484:	6939      	ldr	r1, [r7, #16]
 8002486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0203 	and.w	r2, r3, #3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80ac 	beq.w	8002624 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024cc:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <HAL_GPIO_Init+0x2f0>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a5d      	ldr	r2, [pc, #372]	; (8002648 <HAL_GPIO_Init+0x2f0>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_GPIO_Init+0x2f0>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024e4:	4a59      	ldr	r2, [pc, #356]	; (800264c <HAL_GPIO_Init+0x2f4>)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800250e:	d025      	beq.n	800255c <HAL_GPIO_Init+0x204>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a4f      	ldr	r2, [pc, #316]	; (8002650 <HAL_GPIO_Init+0x2f8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d01f      	beq.n	8002558 <HAL_GPIO_Init+0x200>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_GPIO_Init+0x2fc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d019      	beq.n	8002554 <HAL_GPIO_Init+0x1fc>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_GPIO_Init+0x300>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_GPIO_Init+0x1f8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x304>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00d      	beq.n	800254c <HAL_GPIO_Init+0x1f4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_GPIO_Init+0x308>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <HAL_GPIO_Init+0x1f0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <HAL_GPIO_Init+0x30c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_GPIO_Init+0x1ec>
 8002540:	2306      	movs	r3, #6
 8002542:	e00c      	b.n	800255e <HAL_GPIO_Init+0x206>
 8002544:	2307      	movs	r3, #7
 8002546:	e00a      	b.n	800255e <HAL_GPIO_Init+0x206>
 8002548:	2305      	movs	r3, #5
 800254a:	e008      	b.n	800255e <HAL_GPIO_Init+0x206>
 800254c:	2304      	movs	r3, #4
 800254e:	e006      	b.n	800255e <HAL_GPIO_Init+0x206>
 8002550:	2303      	movs	r3, #3
 8002552:	e004      	b.n	800255e <HAL_GPIO_Init+0x206>
 8002554:	2302      	movs	r3, #2
 8002556:	e002      	b.n	800255e <HAL_GPIO_Init+0x206>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_GPIO_Init+0x206>
 800255c:	2300      	movs	r3, #0
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	f002 0203 	and.w	r2, r2, #3
 8002564:	0092      	lsls	r2, r2, #2
 8002566:	4093      	lsls	r3, r2
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800256e:	4937      	ldr	r1, [pc, #220]	; (800264c <HAL_GPIO_Init+0x2f4>)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257c:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <HAL_GPIO_Init+0x310>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025a0:	4a31      	ldr	r2, [pc, #196]	; (8002668 <HAL_GPIO_Init+0x310>)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <HAL_GPIO_Init+0x310>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025ca:	4a27      	ldr	r2, [pc, #156]	; (8002668 <HAL_GPIO_Init+0x310>)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_GPIO_Init+0x310>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025f4:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_GPIO_Init+0x310>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_GPIO_Init+0x310>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <HAL_GPIO_Init+0x310>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	f47f ae97 	bne.w	8002368 <HAL_GPIO_Init+0x10>
  }
}
 800263a:	bf00      	nop
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40021000 	.word	0x40021000
 800264c:	40010000 	.word	0x40010000
 8002650:	48000400 	.word	0x48000400
 8002654:	48000800 	.word	0x48000800
 8002658:	48000c00 	.word	0x48000c00
 800265c:	48001000 	.word	0x48001000
 8002660:	48001400 	.word	0x48001400
 8002664:	48001800 	.word	0x48001800
 8002668:	40010400 	.word	0x40010400

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002688:	e002      	b.n	8002690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fd78 	bl	80011b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40010400 	.word	0x40010400

080026cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e081      	b.n	80027e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fa00 	bl	8001af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800271c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800272c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	e006      	b.n	8002754 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002752:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d104      	bne.n	8002766 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	461a      	mov	r2, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	817b      	strh	r3, [r7, #10]
 80027fc:	4613      	mov	r3, r2
 80027fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	f040 80da 	bne.w	80029c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_I2C_Master_Transmit+0x30>
 8002818:	2302      	movs	r3, #2
 800281a:	e0d3      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x1d8>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002824:	f7ff fc04 	bl	8002030 <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2319      	movs	r3, #25
 8002830:	2201      	movs	r2, #1
 8002832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f9e6 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0be      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2221      	movs	r2, #33	; 0x21
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2210      	movs	r2, #16
 8002852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	893a      	ldrh	r2, [r7, #8]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2bff      	cmp	r3, #255	; 0xff
 8002876:	d90e      	bls.n	8002896 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	22ff      	movs	r2, #255	; 0xff
 800287c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	b2da      	uxtb	r2, r3
 8002884:	8979      	ldrh	r1, [r7, #10]
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <HAL_I2C_Master_Transmit+0x1e0>)
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fb58 	bl	8002f44 <I2C_TransferConfig>
 8002894:	e06c      	b.n	8002970 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	8979      	ldrh	r1, [r7, #10]
 80028a8:	4b48      	ldr	r3, [pc, #288]	; (80029cc <HAL_I2C_Master_Transmit+0x1e0>)
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fb47 	bl	8002f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028b6:	e05b      	b.n	8002970 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	6a39      	ldr	r1, [r7, #32]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f9e3 	bl	8002c88 <I2C_WaitOnTXISFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e07b      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d034      	beq.n	8002970 <HAL_I2C_Master_Transmit+0x184>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	d130      	bne.n	8002970 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	2200      	movs	r2, #0
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f975 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e04d      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2bff      	cmp	r3, #255	; 0xff
 8002930:	d90e      	bls.n	8002950 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	22ff      	movs	r2, #255	; 0xff
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	b2da      	uxtb	r2, r3
 800293e:	8979      	ldrh	r1, [r7, #10]
 8002940:	2300      	movs	r3, #0
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fafb 	bl	8002f44 <I2C_TransferConfig>
 800294e:	e00f      	b.n	8002970 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	b2da      	uxtb	r2, r3
 8002960:	8979      	ldrh	r1, [r7, #10]
 8002962:	2300      	movs	r3, #0
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 faea 	bl	8002f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d19e      	bne.n	80028b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	6a39      	ldr	r1, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f9c2 	bl	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e01a      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2220      	movs	r2, #32
 8002994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80029a2:	400b      	ands	r3, r1
 80029a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	80002000 	.word	0x80002000
 80029d0:	fe00e800 	.word	0xfe00e800

080029d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	461a      	mov	r2, r3
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
 80029e4:	4613      	mov	r3, r2
 80029e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 80db 	bne.w	8002bac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_I2C_Master_Receive+0x30>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e0d4      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a0c:	f7ff fb10 	bl	8002030 <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2319      	movs	r3, #25
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8f2 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0bf      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2222      	movs	r2, #34	; 0x22
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2bff      	cmp	r3, #255	; 0xff
 8002a5e:	d90e      	bls.n	8002a7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	8979      	ldrh	r1, [r7, #10]
 8002a6e:	4b52      	ldr	r3, [pc, #328]	; (8002bb8 <HAL_I2C_Master_Receive+0x1e4>)
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fa64 	bl	8002f44 <I2C_TransferConfig>
 8002a7c:	e06d      	b.n	8002b5a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	8979      	ldrh	r1, [r7, #10]
 8002a90:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <HAL_I2C_Master_Receive+0x1e4>)
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fa53 	bl	8002f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002a9e:	e05c      	b.n	8002b5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	6a39      	ldr	r1, [r7, #32]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f96b 	bl	8002d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e07c      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d034      	beq.n	8002b5a <HAL_I2C_Master_Receive+0x186>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d130      	bne.n	8002b5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2200      	movs	r2, #0
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f880 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e04d      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2bff      	cmp	r3, #255	; 0xff
 8002b1a:	d90e      	bls.n	8002b3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	22ff      	movs	r2, #255	; 0xff
 8002b20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	8979      	ldrh	r1, [r7, #10]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fa06 	bl	8002f44 <I2C_TransferConfig>
 8002b38:	e00f      	b.n	8002b5a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	8979      	ldrh	r1, [r7, #10]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f9f5 	bl	8002f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d19d      	bne.n	8002aa0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	6a39      	ldr	r1, [r7, #32]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f8cd 	bl	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e01a      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_I2C_Master_Receive+0x1e8>)
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	80002400 	.word	0x80002400
 8002bbc:	fe00e800 	.word	0xfe00e800

08002bc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d103      	bne.n	8002bde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d007      	beq.n	8002bfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	619a      	str	r2, [r3, #24]
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c18:	e022      	b.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c20:	d01e      	beq.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c22:	f7ff fa05 	bl	8002030 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d302      	bcc.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d113      	bne.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e00f      	b.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d0cd      	beq.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c94:	e02c      	b.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f8dc 	bl	8002e58 <I2C_IsAcknowledgeFailed>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e02a      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb0:	d01e      	beq.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7ff f9bd 	bl	8002030 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d113      	bne.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e007      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d1cb      	bne.n	8002c96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d14:	e028      	b.n	8002d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f89c 	bl	8002e58 <I2C_IsAcknowledgeFailed>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e026      	b.n	8002d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7ff f981 	bl	8002030 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d113      	bne.n	8002d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e007      	b.n	8002d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d1cf      	bne.n	8002d16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d8c:	e055      	b.n	8002e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f860 	bl	8002e58 <I2C_IsAcknowledgeFailed>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e053      	b.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d129      	bne.n	8002e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d105      	bne.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e03f      	b.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002dde:	400b      	ands	r3, r1
 8002de0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e022      	b.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7ff f914 	bl	8002030 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e007      	b.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d1a2      	bne.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	fe00e800 	.word	0xfe00e800

08002e58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b10      	cmp	r3, #16
 8002e70:	d161      	bne.n	8002f36 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e80:	d02b      	beq.n	8002eda <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e90:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e92:	e022      	b.n	8002eda <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e9a:	d01e      	beq.n	8002eda <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	f7ff f8c8 	bl	8002030 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <I2C_IsAcknowledgeFailed+0x5a>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d113      	bne.n	8002eda <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f043 0220 	orr.w	r2, r3, #32
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e02e      	b.n	8002f38 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d1d5      	bne.n	8002e94 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2210      	movs	r2, #16
 8002eee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff fe61 	bl	8002bc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <I2C_IsAcknowledgeFailed+0xe8>)
 8002f0a:	400b      	ands	r3, r1
 8002f0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f043 0204 	orr.w	r2, r3, #4
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	fe00e800 	.word	0xfe00e800

08002f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	4613      	mov	r3, r2
 8002f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	0d5b      	lsrs	r3, r3, #21
 8002f60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <I2C_TransferConfig+0x58>)
 8002f66:	430b      	orrs	r3, r1
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	ea02 0103 	and.w	r1, r2, r3
 8002f6e:	897b      	ldrh	r3, [r7, #10]
 8002f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f74:	7a7b      	ldrb	r3, [r7, #9]
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	03ff63ff 	.word	0x03ff63ff

08002fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d138      	bne.n	8003028 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e032      	b.n	800302a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	; 0x24
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ff2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	d139      	bne.n	80030c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003056:	2302      	movs	r3, #2
 8003058:	e033      	b.n	80030c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2224      	movs	r2, #36	; 0x24
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003088:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f001 b83a 	b.w	800416a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 816f 	beq.w	80033ea <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800310c:	4bb5      	ldr	r3, [pc, #724]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b04      	cmp	r3, #4
 8003116:	d00c      	beq.n	8003132 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003118:	4bb2      	ldr	r3, [pc, #712]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b08      	cmp	r3, #8
 8003122:	d15c      	bne.n	80031de <HAL_RCC_OscConfig+0x10e>
 8003124:	4baf      	ldr	r3, [pc, #700]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003130:	d155      	bne.n	80031de <HAL_RCC_OscConfig+0x10e>
 8003132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003136:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003146:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_RCC_OscConfig+0x94>
 800315e:	4ba1      	ldr	r3, [pc, #644]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	e015      	b.n	8003190 <HAL_RCC_OscConfig+0xc0>
 8003164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003168:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003180:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800318c:	4b95      	ldr	r3, [pc, #596]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003194:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003198:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80031a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f002 021f 	and.w	r2, r2, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8111 	beq.w	80033e8 <HAL_RCC_OscConfig+0x318>
 80031c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8108 	bne.w	80033e8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f000 bfc6 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x12e>
 80031f0:	4b7c      	ldr	r3, [pc, #496]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a7b      	ldr	r2, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e036      	b.n	800326c <HAL_RCC_OscConfig+0x19c>
 80031fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003202:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x158>
 800320e:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a74      	ldr	r2, [pc, #464]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e021      	b.n	800326c <HAL_RCC_OscConfig+0x19c>
 8003228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x184>
 800323a:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0x19c>
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a62      	ldr	r2, [pc, #392]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b60      	ldr	r3, [pc, #384]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5f      	ldr	r2, [pc, #380]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003270:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d059      	beq.n	8003330 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fed8 	bl	8002030 <HAL_GetTick>
 8003280:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003286:	f7fe fed3 	bl	8002030 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d902      	bls.n	800329c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	f000 bf67 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 800329c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80032b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_OscConfig+0x1fe>
 80032c8:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x22a>
 80032ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80032e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032f6:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032fe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003302:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003306:	fa92 f2a2 	rbit	r2, r2
 800330a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800330e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003312:	fab2 f282 	clz	r2, r2
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	f042 0220 	orr.w	r2, r2, #32
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	f002 021f 	and.w	r2, r2, #31
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f202 	lsl.w	r2, r1, r2
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0ab      	beq.n	8003286 <HAL_RCC_OscConfig+0x1b6>
 800332e:	e05c      	b.n	80033ea <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fe fe7e 	bl	8002030 <HAL_GetTick>
 8003334:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800333a:	f7fe fe79 	bl	8002030 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d902      	bls.n	8003350 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	f000 bf0d 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 8003350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003354:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003364:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d102      	bne.n	8003382 <HAL_RCC_OscConfig+0x2b2>
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x2de>
 8003382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003386:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800339a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800339e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033b2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80033b6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80033ba:	fa92 f2a2 	rbit	r2, r2
 80033be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80033c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033c6:	fab2 f282 	clz	r2, r2
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	f042 0220 	orr.w	r2, r2, #32
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f002 021f 	and.w	r2, r2, #31
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f202 	lsl.w	r2, r1, r2
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ab      	bne.n	800333a <HAL_RCC_OscConfig+0x26a>
 80033e2:	e002      	b.n	80033ea <HAL_RCC_OscConfig+0x31a>
 80033e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 817f 	beq.w	80036fe <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003400:	4ba7      	ldr	r3, [pc, #668]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00c      	beq.n	8003426 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800340c:	4ba4      	ldr	r3, [pc, #656]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d173      	bne.n	8003500 <HAL_RCC_OscConfig+0x430>
 8003418:	4ba1      	ldr	r3, [pc, #644]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d16c      	bne.n	8003500 <HAL_RCC_OscConfig+0x430>
 8003426:	2302      	movs	r3, #2
 8003428:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003438:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d102      	bne.n	8003456 <HAL_RCC_OscConfig+0x386>
 8003450:	4b93      	ldr	r3, [pc, #588]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	e013      	b.n	800347e <HAL_RCC_OscConfig+0x3ae>
 8003456:	2302      	movs	r3, #2
 8003458:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003468:	2302      	movs	r3, #2
 800346a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800346e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800347a:	4b89      	ldr	r3, [pc, #548]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2202      	movs	r2, #2
 8003480:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003484:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003488:	fa92 f2a2 	rbit	r2, r2
 800348c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003490:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003494:	fab2 f282 	clz	r2, r2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f002 021f 	and.w	r2, r2, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f202 	lsl.w	r2, r1, r2
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3f6>
 80034b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d002      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f000 be52 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	21f8      	movs	r1, #248	; 0xf8
 80034dc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80034e4:	fa91 f1a1 	rbit	r1, r1
 80034e8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80034ec:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034f0:	fab1 f181 	clz	r1, r1
 80034f4:	b2c9      	uxtb	r1, r1
 80034f6:	408b      	lsls	r3, r1
 80034f8:	4969      	ldr	r1, [pc, #420]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	e0fe      	b.n	80036fe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003504:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8088 	beq.w	8003622 <HAL_RCC_OscConfig+0x552>
 8003512:	2301      	movs	r3, #1
 8003514:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003524:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003532:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	461a      	mov	r2, r3
 800353a:	2301      	movs	r3, #1
 800353c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe fd77 	bl	8002030 <HAL_GetTick>
 8003542:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003548:	f7fe fd72 	bl	8002030 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d902      	bls.n	800355e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	f000 be06 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 800355e:	2302      	movs	r3, #2
 8003560:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003570:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <HAL_RCC_OscConfig+0x4be>
 8003588:	4b45      	ldr	r3, [pc, #276]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	e013      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e6>
 800358e:	2302      	movs	r3, #2
 8003590:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035a0:	2302      	movs	r3, #2
 80035a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2202      	movs	r2, #2
 80035b8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80035bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80035c0:	fa92 f2a2 	rbit	r2, r2
 80035c4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80035c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	f042 0220 	orr.w	r2, r2, #32
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f002 021f 	and.w	r2, r2, #31
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f202 	lsl.w	r2, r1, r2
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0af      	beq.n	8003548 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	21f8      	movs	r1, #248	; 0xf8
 80035fe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003606:	fa91 f1a1 	rbit	r1, r1
 800360a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800360e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003612:	fab1 f181 	clz	r1, r1
 8003616:	b2c9      	uxtb	r1, r1
 8003618:	408b      	lsls	r3, r1
 800361a:	4921      	ldr	r1, [pc, #132]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	e06d      	b.n	80036fe <HAL_RCC_OscConfig+0x62e>
 8003622:	2301      	movs	r3, #1
 8003624:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003634:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003642:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	461a      	mov	r2, r3
 800364a:	2300      	movs	r3, #0
 800364c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe fcef 	bl	8002030 <HAL_GetTick>
 8003652:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003658:	f7fe fcea 	bl	8002030 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d902      	bls.n	800366e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	f000 bd7e 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 800366e:	2302      	movs	r3, #2
 8003670:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003680:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5d4>
 8003698:	4b01      	ldr	r3, [pc, #4]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	e016      	b.n	80036cc <HAL_RCC_OscConfig+0x5fc>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	2302      	movs	r3, #2
 80036a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80036b6:	2302      	movs	r3, #2
 80036b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036c8:	4bbf      	ldr	r3, [pc, #764]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2202      	movs	r2, #2
 80036ce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80036d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80036d6:	fa92 f2a2 	rbit	r2, r2
 80036da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80036de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f042 0220 	orr.w	r2, r2, #32
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	f002 021f 	and.w	r2, r2, #31
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ac      	bne.n	8003658 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003702:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8113 	beq.w	800393a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003718:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d07c      	beq.n	800381e <HAL_RCC_OscConfig+0x74e>
 8003724:	2301      	movs	r3, #1
 8003726:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003736:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	4ba2      	ldr	r3, [pc, #648]	; (80039cc <HAL_RCC_OscConfig+0x8fc>)
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	461a      	mov	r2, r3
 800374a:	2301      	movs	r3, #1
 800374c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fe fc6f 	bl	8002030 <HAL_GetTick>
 8003752:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003758:	f7fe fc6a 	bl	8002030 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d902      	bls.n	800376e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	f000 bcfe 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 800376e:	2302      	movs	r3, #2
 8003770:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003778:	fa93 f2a3 	rbit	r2, r3
 800377c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003780:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800378e:	2202      	movs	r2, #2
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	fa93 f2a3 	rbit	r2, r3
 80037a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037b2:	2202      	movs	r2, #2
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	fa93 f2a3 	rbit	r2, r3
 80037c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	4b7e      	ldr	r3, [pc, #504]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 80037d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037da:	2102      	movs	r1, #2
 80037dc:	6019      	str	r1, [r3, #0]
 80037de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f1a3 	rbit	r1, r3
 80037ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037f4:	6019      	str	r1, [r3, #0]
  return result;
 80037f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d09d      	beq.n	8003758 <HAL_RCC_OscConfig+0x688>
 800381c:	e08d      	b.n	800393a <HAL_RCC_OscConfig+0x86a>
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003840:	601a      	str	r2, [r3, #0]
  return result;
 8003842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003846:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800384a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <HAL_RCC_OscConfig+0x8fc>)
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	461a      	mov	r2, r3
 800385c:	2300      	movs	r3, #0
 800385e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003860:	f7fe fbe6 	bl	8002030 <HAL_GetTick>
 8003864:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003868:	e00a      	b.n	8003880 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386a:	f7fe fbe1 	bl	8002030 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	f000 bc75 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 8003880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003884:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003888:	2202      	movs	r2, #2
 800388a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003890:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	fa93 f2a3 	rbit	r2, r3
 800389a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800389e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038ac:	2202      	movs	r2, #2
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	fa93 f2a3 	rbit	r2, r3
 80038be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038d0:	2202      	movs	r2, #2
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	fa93 f2a3 	rbit	r2, r3
 80038e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 80038ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038f8:	2102      	movs	r1, #2
 80038fa:	6019      	str	r1, [r3, #0]
 80038fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003900:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f1a3 	rbit	r1, r3
 800390a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003912:	6019      	str	r1, [r3, #0]
  return result;
 8003914:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003918:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d197      	bne.n	800386a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 81a5 	beq.w	8003c9a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003950:	2300      	movs	r3, #0
 8003952:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003956:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	61d3      	str	r3, [r2, #28]
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003988:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCC_OscConfig+0x900>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d121      	bne.n	80039e0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCC_OscConfig+0x900>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0b      	ldr	r2, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x900>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a8:	f7fe fb42 	bl	8002030 <HAL_GetTick>
 80039ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	e010      	b.n	80039d4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fe fb3d 	bl	8002030 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d908      	bls.n	80039d4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e3d1      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	10908120 	.word	0x10908120
 80039d0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b8d      	ldr	r3, [pc, #564]	; (8003c0c <HAL_RCC_OscConfig+0xb3c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0e8      	beq.n	80039b2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x92e>
 80039f0:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a86      	ldr	r2, [pc, #536]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	e035      	b.n	8003a6a <HAL_RCC_OscConfig+0x99a>
 80039fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x958>
 8003a0e:	4b80      	ldr	r3, [pc, #512]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a7f      	ldr	r2, [pc, #508]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	4b7d      	ldr	r3, [pc, #500]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a7c      	ldr	r2, [pc, #496]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6213      	str	r3, [r2, #32]
 8003a26:	e020      	b.n	8003a6a <HAL_RCC_OscConfig+0x99a>
 8003a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCC_OscConfig+0x982>
 8003a38:	4b75      	ldr	r3, [pc, #468]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4a74      	ldr	r2, [pc, #464]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	6213      	str	r3, [r2, #32]
 8003a44:	4b72      	ldr	r3, [pc, #456]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a71      	ldr	r2, [pc, #452]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6213      	str	r3, [r2, #32]
 8003a50:	e00b      	b.n	8003a6a <HAL_RCC_OscConfig+0x99a>
 8003a52:	4b6f      	ldr	r3, [pc, #444]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4a6e      	ldr	r2, [pc, #440]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	6213      	str	r3, [r2, #32]
 8003a5e:	4b6c      	ldr	r3, [pc, #432]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4a6b      	ldr	r2, [pc, #428]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8081 	beq.w	8003b7e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7c:	f7fe fad8 	bl	8002030 <HAL_GetTick>
 8003a80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00b      	b.n	8003a9e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe fad3 	bl	8002030 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e365      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8003a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	fa93 f2a3 	rbit	r2, r3
 8003ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003abc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003aca:	2202      	movs	r2, #2
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	fa93 f2a3 	rbit	r2, r3
 8003adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ae4:	601a      	str	r2, [r3, #0]
  return result;
 8003ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003aee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	fab3 f383 	clz	r3, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d102      	bne.n	8003b0a <HAL_RCC_OscConfig+0xa3a>
 8003b04:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	e013      	b.n	8003b32 <HAL_RCC_OscConfig+0xa62>
 8003b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b12:	2202      	movs	r2, #2
 8003b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b28:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b36:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	6011      	str	r1, [r2, #0]
 8003b3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b42:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	fa92 f1a2 	rbit	r1, r2
 8003b4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b50:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b54:	6011      	str	r1, [r2, #0]
  return result;
 8003b56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b5a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	fab2 f282 	clz	r2, r2
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f002 021f 	and.w	r2, r2, #31
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f202 	lsl.w	r2, r1, r2
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d084      	beq.n	8003a86 <HAL_RCC_OscConfig+0x9b6>
 8003b7c:	e083      	b.n	8003c86 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7e:	f7fe fa57 	bl	8002030 <HAL_GetTick>
 8003b82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe fa52 	bl	8002030 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e2e4      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8003ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ba8:	2202      	movs	r2, #2
 8003baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	fa93 f2a3 	rbit	r2, r3
 8003bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bbe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bcc:	2202      	movs	r2, #2
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	fa93 f2a3 	rbit	r2, r3
 8003bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003be6:	601a      	str	r2, [r3, #0]
  return result;
 8003be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bec:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003bf0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d106      	bne.n	8003c14 <HAL_RCC_OscConfig+0xb44>
 8003c06:	4b02      	ldr	r3, [pc, #8]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	e017      	b.n	8003c3c <HAL_RCC_OscConfig+0xb6c>
 8003c0c:	40007000 	.word	0x40007000
 8003c10:	40021000 	.word	0x40021000
 8003c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c18:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	fa93 f2a3 	rbit	r2, r3
 8003c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c32:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	4bb3      	ldr	r3, [pc, #716]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c40:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c44:	2102      	movs	r1, #2
 8003c46:	6011      	str	r1, [r2, #0]
 8003c48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c4c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	fa92 f1a2 	rbit	r1, r2
 8003c56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c5a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c5e:	6011      	str	r1, [r2, #0]
  return result;
 8003c60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c64:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	fab2 f282 	clz	r2, r2
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f002 021f 	and.w	r2, r2, #31
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d180      	bne.n	8003b88 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c86:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b9e      	ldr	r3, [pc, #632]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4a9d      	ldr	r2, [pc, #628]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c98:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 825e 	beq.w	8004168 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cac:	4b96      	ldr	r3, [pc, #600]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	f000 821f 	beq.w	80040f8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	f040 8170 	bne.w	8003fac <HAL_RCC_OscConfig+0xedc>
 8003ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cde:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	fa93 f2a3 	rbit	r2, r3
 8003ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cf0:	601a      	str	r2, [r3, #0]
  return result;
 8003cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cfa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	fab3 f383 	clz	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fe f98d 	bl	8002030 <HAL_GetTick>
 8003d16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1a:	e009      	b.n	8003d30 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fe f988 	bl	8002030 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e21c      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8003d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d34:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d42:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fa93 f2a3 	rbit	r2, r3
 8003d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d50:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d54:	601a      	str	r2, [r3, #0]
  return result;
 8003d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d102      	bne.n	8003d7a <HAL_RCC_OscConfig+0xcaa>
 8003d74:	4b64      	ldr	r3, [pc, #400]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	e027      	b.n	8003dca <HAL_RCC_OscConfig+0xcfa>
 8003d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d8c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fa93 f2a3 	rbit	r2, r3
 8003d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	fa93 f2a3 	rbit	r2, r3
 8003dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003dd2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dd6:	6011      	str	r1, [r2, #0]
 8003dd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ddc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	fa92 f1a2 	rbit	r1, r2
 8003de6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dea:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003dee:	6011      	str	r1, [r2, #0]
  return result;
 8003df0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003df4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	fab2 f282 	clz	r2, r2
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	f042 0220 	orr.w	r2, r2, #32
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f002 021f 	and.w	r2, r2, #31
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d182      	bne.n	8003d1c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e16:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	f023 020f 	bic.w	r2, r3, #15
 8003e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	4937      	ldr	r1, [pc, #220]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e30:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a19      	ldr	r1, [r3, #32]
 8003e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	492d      	ldr	r1, [pc, #180]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
 8003e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	fa93 f2a3 	rbit	r2, r3
 8003e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e78:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e7c:	601a      	str	r2, [r3, #0]
  return result;
 8003e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e82:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e86:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9e:	f7fe f8c7 	bl	8002030 <HAL_GetTick>
 8003ea2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea6:	e009      	b.n	8003ebc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe f8c2 	bl	8002030 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e156      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8003ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ece:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	fa93 f2a3 	rbit	r2, r3
 8003ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003edc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ee0:	601a      	str	r2, [r3, #0]
  return result;
 8003ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003eea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCC_OscConfig+0xe3c>
 8003f00:	4b01      	ldr	r3, [pc, #4]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	e02a      	b.n	8003f5c <HAL_RCC_OscConfig+0xe8c>
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f1e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	fa93 f2a3 	rbit	r2, r3
 8003f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f44:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	fa93 f2a3 	rbit	r2, r3
 8003f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f52:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	4b86      	ldr	r3, [pc, #536]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f68:	6011      	str	r1, [r2, #0]
 8003f6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f6e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	fa92 f1a2 	rbit	r1, r2
 8003f78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f7c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f80:	6011      	str	r1, [r2, #0]
  return result;
 8003f82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f86:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	fab2 f282 	clz	r2, r2
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	f002 021f 	and.w	r2, r2, #31
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f43f af7f 	beq.w	8003ea8 <HAL_RCC_OscConfig+0xdd8>
 8003faa:	e0dd      	b.n	8004168 <HAL_RCC_OscConfig+0x1098>
 8003fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fbe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	fa93 f2a3 	rbit	r2, r3
 8003fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fcc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fd0:	601a      	str	r2, [r3, #0]
  return result;
 8003fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fda:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fdc:	fab3 f383 	clz	r3, r3
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fe6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fe f81d 	bl	8002030 <HAL_GetTick>
 8003ff6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffa:	e009      	b.n	8004010 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe f818 	bl	8002030 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e0ac      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8004010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004014:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800401c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004022:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	fa93 f2a3 	rbit	r2, r3
 800402c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004030:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004034:	601a      	str	r2, [r3, #0]
  return result;
 8004036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800403e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d102      	bne.n	800405a <HAL_RCC_OscConfig+0xf8a>
 8004054:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	e027      	b.n	80040aa <HAL_RCC_OscConfig+0xfda>
 800405a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800406c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f2a3 	rbit	r2, r3
 8004076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800407a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004084:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004092:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	fa93 f2a3 	rbit	r2, r3
 800409c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	4b33      	ldr	r3, [pc, #204]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040b6:	6011      	str	r1, [r2, #0]
 80040b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	fa92 f1a2 	rbit	r1, r2
 80040c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040ca:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80040ce:	6011      	str	r1, [r2, #0]
  return result;
 80040d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040d4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	fab2 f282 	clz	r2, r2
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	f042 0220 	orr.w	r2, r2, #32
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	f002 021f 	and.w	r2, r2, #31
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f202 	lsl.w	r2, r1, r2
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d182      	bne.n	8003ffc <HAL_RCC_OscConfig+0xf2c>
 80040f6:	e037      	b.n	8004168 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e02e      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004114:	4b17      	ldr	r3, [pc, #92]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800411c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004120:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004128:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	429a      	cmp	r2, r3
 8004132:	d117      	bne.n	8004164 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004134:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004138:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800413c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004140:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004148:	429a      	cmp	r2, r3
 800414a:	d10b      	bne.n	8004164 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800414c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004150:	f003 020f 	and.w	r2, r3, #15
 8004154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004158:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000

08004178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b09e      	sub	sp, #120	; 0x78
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e162      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004190:	4b90      	ldr	r3, [pc, #576]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d910      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419e:	4b8d      	ldr	r3, [pc, #564]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 0207 	bic.w	r2, r3, #7
 80041a6:	498b      	ldr	r1, [pc, #556]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b89      	ldr	r3, [pc, #548]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e14a      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041cc:	4b82      	ldr	r3, [pc, #520]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	497f      	ldr	r1, [pc, #508]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80dc 	beq.w	80043a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d13c      	bne.n	800426e <HAL_RCC_ClockConfig+0xf6>
 80041f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004204:	fab3 f383 	clz	r3, r3
 8004208:	b2db      	uxtb	r3, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d102      	bne.n	800421e <HAL_RCC_ClockConfig+0xa6>
 8004218:	4b6f      	ldr	r3, [pc, #444]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	e00f      	b.n	800423e <HAL_RCC_ClockConfig+0xc6>
 800421e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004222:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	667b      	str	r3, [r7, #100]	; 0x64
 800422c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004230:	663b      	str	r3, [r7, #96]	; 0x60
 8004232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800423a:	4b67      	ldr	r3, [pc, #412]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004242:	65ba      	str	r2, [r7, #88]	; 0x58
 8004244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004246:	fa92 f2a2 	rbit	r2, r2
 800424a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800424c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800424e:	fab2 f282 	clz	r2, r2
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	f042 0220 	orr.w	r2, r2, #32
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	f002 021f 	and.w	r2, r2, #31
 800425e:	2101      	movs	r1, #1
 8004260:	fa01 f202 	lsl.w	r2, r1, r2
 8004264:	4013      	ands	r3, r2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d17b      	bne.n	8004362 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0f3      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d13c      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x178>
 8004276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800427a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d102      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x128>
 800429a:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	e00f      	b.n	80042c0 <HAL_RCC_ClockConfig+0x148>
 80042a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	647b      	str	r3, [r7, #68]	; 0x44
 80042ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b2:	643b      	str	r3, [r7, #64]	; 0x40
 80042b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042bc:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80042c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c8:	fa92 f2a2 	rbit	r2, r2
 80042cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d0:	fab2 f282 	clz	r2, r2
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	f042 0220 	orr.w	r2, r2, #32
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	f002 021f 	and.w	r2, r2, #31
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f202 	lsl.w	r2, r1, r2
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d13a      	bne.n	8004362 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0b2      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
 80042f0:	2302      	movs	r3, #2
 80042f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d102      	bne.n	8004318 <HAL_RCC_ClockConfig+0x1a0>
 8004312:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	e00d      	b.n	8004334 <HAL_RCC_ClockConfig+0x1bc>
 8004318:	2302      	movs	r3, #2
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	2302      	movs	r3, #2
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2202      	movs	r2, #2
 8004336:	61ba      	str	r2, [r7, #24]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	fa92 f2a2 	rbit	r2, r2
 800433e:	617a      	str	r2, [r7, #20]
  return result;
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	fab2 f282 	clz	r2, r2
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	f042 0220 	orr.w	r2, r2, #32
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	f002 021f 	and.w	r2, r2, #31
 8004352:	2101      	movs	r1, #1
 8004354:	fa01 f202 	lsl.w	r2, r1, r2
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e079      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	491a      	ldr	r1, [pc, #104]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004374:	f7fd fe5c 	bl	8002030 <HAL_GetTick>
 8004378:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e00a      	b.n	8004392 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fd fe58 	bl	8002030 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e061      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 020c 	and.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d214      	bcs.n	80043dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 0207 	bic.w	r2, r3, #7
 80043ba:	4906      	ldr	r1, [pc, #24]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e040      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
 80043d4:	40022000 	.word	0x40022000
 80043d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	491a      	ldr	r1, [pc, #104]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004406:	4b16      	ldr	r3, [pc, #88]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4912      	ldr	r1, [pc, #72]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 8004416:	4313      	orrs	r3, r2
 8004418:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800441a:	f000 f829 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 800441e:	4601      	mov	r1, r0
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004428:	22f0      	movs	r2, #240	; 0xf0
 800442a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	fa92 f2a2 	rbit	r2, r2
 8004432:	60fa      	str	r2, [r7, #12]
  return result;
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	fab2 f282 	clz	r2, r2
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	40d3      	lsrs	r3, r2
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <HAL_RCC_ClockConfig+0x2ec>)
 8004440:	5cd3      	ldrb	r3, [r2, r3]
 8004442:	fa21 f303 	lsr.w	r3, r1, r3
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <HAL_RCC_ClockConfig+0x2f0>)
 8004448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <HAL_RCC_ClockConfig+0x2f4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd fdaa 	bl	8001fa8 <HAL_InitTick>
  
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3778      	adds	r7, #120	; 0x78
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	0800a46c 	.word	0x0800a46c
 8004468:	20000064 	.word	0x20000064
 800446c:	20000068 	.word	0x20000068

08004470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	b08b      	sub	sp, #44	; 0x2c
 8004474:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800448a:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <HAL_RCC_GetSysClockFreq+0xc4>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b04      	cmp	r3, #4
 8004498:	d002      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x30>
 800449a:	2b08      	cmp	r3, #8
 800449c:	d003      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0x36>
 800449e:	e03f      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044a0:	4b25      	ldr	r3, [pc, #148]	; (8004538 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044a2:	623b      	str	r3, [r7, #32]
      break;
 80044a4:	e03f      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	fa92 f2a2 	rbit	r2, r2
 80044b8:	607a      	str	r2, [r7, #4]
  return result;
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	fab2 f282 	clz	r2, r2
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	40d3      	lsrs	r3, r2
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <HAL_RCC_GetSysClockFreq+0xcc>)
 80044c6:	5cd3      	ldrb	r3, [r2, r3]
 80044c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044ca:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	220f      	movs	r2, #15
 80044d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	fa92 f2a2 	rbit	r2, r2
 80044dc:	60fa      	str	r2, [r7, #12]
  return result;
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	fab2 f282 	clz	r2, r2
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	40d3      	lsrs	r3, r2
 80044e8:	4a15      	ldr	r2, [pc, #84]	; (8004540 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044ea:	5cd3      	ldrb	r3, [r2, r3]
 80044ec:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044f8:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	e007      	b.n	800451a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800450a:	4a0b      	ldr	r2, [pc, #44]	; (8004538 <HAL_RCC_GetSysClockFreq+0xc8>)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	623b      	str	r3, [r7, #32]
      break;
 800451e:	e002      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004522:	623b      	str	r3, [r7, #32]
      break;
 8004524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004526:	6a3b      	ldr	r3, [r7, #32]
}
 8004528:	4618      	mov	r0, r3
 800452a:	372c      	adds	r7, #44	; 0x2c
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40021000 	.word	0x40021000
 8004538:	007a1200 	.word	0x007a1200
 800453c:	0800a484 	.word	0x0800a484
 8004540:	0800a494 	.word	0x0800a494

08004544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004548:	4b03      	ldr	r3, [pc, #12]	; (8004558 <HAL_RCC_GetHCLKFreq+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
}
 800454c:	4618      	mov	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000064 	.word	0x20000064

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004562:	f7ff ffef 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004566:	4601      	mov	r1, r0
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004570:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004574:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	603a      	str	r2, [r7, #0]
  return result;
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	40d3      	lsrs	r3, r2
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <HAL_RCC_GetPCLK1Freq+0x40>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	0800a47c 	.word	0x0800a47c

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045a6:	f7ff ffcd 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 80045aa:	4601      	mov	r1, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	fa92 f2a2 	rbit	r2, r2
 80045c0:	603a      	str	r2, [r7, #0]
  return result;
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	fab2 f282 	clz	r2, r2
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	40d3      	lsrs	r3, r2
 80045cc:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000
 80045e0:	0800a47c 	.word	0x0800a47c

080045e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b092      	sub	sp, #72	; 0x48
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80d4 	beq.w	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004608:	4b4e      	ldr	r3, [pc, #312]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10e      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004614:	4b4b      	ldr	r3, [pc, #300]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4a4a      	ldr	r2, [pc, #296]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	61d3      	str	r3, [r2, #28]
 8004620:	4b48      	ldr	r3, [pc, #288]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004632:	4b45      	ldr	r3, [pc, #276]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d118      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463e:	4b42      	ldr	r3, [pc, #264]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a41      	ldr	r2, [pc, #260]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464a:	f7fd fcf1 	bl	8002030 <HAL_GetTick>
 800464e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	e008      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004652:	f7fd fced 	bl	8002030 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b64      	cmp	r3, #100	; 0x64
 800465e:	d901      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1d6      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004664:	4b38      	ldr	r3, [pc, #224]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004670:	4b34      	ldr	r3, [pc, #208]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004678:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8084 	beq.w	800478a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800468c:	429a      	cmp	r2, r3
 800468e:	d07c      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004690:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	461a      	mov	r2, r3
 80046ba:	2301      	movs	r3, #1
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b1d      	ldr	r3, [pc, #116]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	461a      	mov	r2, r3
 80046de:	2300      	movs	r3, #0
 80046e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046e2:	4a18      	ldr	r2, [pc, #96]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d04b      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fd fc9d 	bl	8002030 <HAL_GetTick>
 80046f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fd fc99 	bl	8002030 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e180      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004710:	2302      	movs	r3, #2
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
 800471c:	2302      	movs	r3, #2
 800471e:	623b      	str	r3, [r7, #32]
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	61fb      	str	r3, [r7, #28]
  return result;
 8004728:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	fab3 f383 	clz	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f043 0302 	orr.w	r3, r3, #2
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d108      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800473e:	4b01      	ldr	r3, [pc, #4]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	e00d      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004744:	40021000 	.word	0x40021000
 8004748:	40007000 	.word	0x40007000
 800474c:	10908100 	.word	0x10908100
 8004750:	2302      	movs	r3, #2
 8004752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	4b9a      	ldr	r3, [pc, #616]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	2202      	movs	r2, #2
 8004762:	613a      	str	r2, [r7, #16]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	fa92 f2a2 	rbit	r2, r2
 800476a:	60fa      	str	r2, [r7, #12]
  return result;
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	fab2 f282 	clz	r2, r2
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	f002 021f 	and.w	r2, r2, #31
 800477e:	2101      	movs	r1, #1
 8004780:	fa01 f202 	lsl.w	r2, r1, r2
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0b7      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800478a:	4b8f      	ldr	r3, [pc, #572]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	498c      	ldr	r1, [pc, #560]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004798:	4313      	orrs	r3, r2
 800479a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800479c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a4:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4a87      	ldr	r2, [pc, #540]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047bc:	4b82      	ldr	r3, [pc, #520]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	f023 0203 	bic.w	r2, r3, #3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	497f      	ldr	r1, [pc, #508]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047da:	4b7b      	ldr	r3, [pc, #492]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4978      	ldr	r1, [pc, #480]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047f8:	4b73      	ldr	r3, [pc, #460]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	4970      	ldr	r1, [pc, #448]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004816:	4b6c      	ldr	r3, [pc, #432]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f023 0210 	bic.w	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4969      	ldr	r1, [pc, #420]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004824:	4313      	orrs	r3, r2
 8004826:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004834:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004840:	4961      	ldr	r1, [pc, #388]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004852:	4b5d      	ldr	r3, [pc, #372]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f023 0220 	bic.w	r2, r3, #32
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	495a      	ldr	r1, [pc, #360]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004870:	4b55      	ldr	r3, [pc, #340]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	4952      	ldr	r1, [pc, #328]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487e:	4313      	orrs	r3, r2
 8004880:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800488e:	4b4e      	ldr	r3, [pc, #312]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	494b      	ldr	r1, [pc, #300]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ac:	4b46      	ldr	r3, [pc, #280]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	4943      	ldr	r1, [pc, #268]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048ca:	4b3f      	ldr	r3, [pc, #252]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	493c      	ldr	r1, [pc, #240]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048e8:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	4934      	ldr	r1, [pc, #208]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004906:	4b30      	ldr	r3, [pc, #192]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	492d      	ldr	r1, [pc, #180]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004924:	4b28      	ldr	r3, [pc, #160]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	4925      	ldr	r1, [pc, #148]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004932:	4313      	orrs	r3, r2
 8004934:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	491e      	ldr	r1, [pc, #120]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004950:	4313      	orrs	r3, r2
 8004952:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	4916      	ldr	r1, [pc, #88]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	490f      	ldr	r1, [pc, #60]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800498c:	4313      	orrs	r3, r2
 800498e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a8:	4907      	ldr	r1, [pc, #28]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00c      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80049ba:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	e002      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ce:	4913      	ldr	r1, [pc, #76]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80049e0:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ec:	490b      	ldr	r1, [pc, #44]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	4904      	ldr	r1, [pc, #16]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3748      	adds	r7, #72	; 0x48
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e049      	b.n	8004ac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fd f8b8 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f000 fc1c 	bl	800529c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e049      	b.n	8004b74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f841 	bl	8004b7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fbc5 	bl	800529c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <HAL_TIM_PWM_Start+0x24>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	e03c      	b.n	8004c2e <HAL_TIM_PWM_Start+0x9e>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d109      	bne.n	8004bce <HAL_TIM_PWM_Start+0x3e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	bf14      	ite	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	2300      	moveq	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	e02f      	b.n	8004c2e <HAL_TIM_PWM_Start+0x9e>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d109      	bne.n	8004be8 <HAL_TIM_PWM_Start+0x58>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e022      	b.n	8004c2e <HAL_TIM_PWM_Start+0x9e>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d109      	bne.n	8004c02 <HAL_TIM_PWM_Start+0x72>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	bf14      	ite	ne
 8004bfa:	2301      	movne	r3, #1
 8004bfc:	2300      	moveq	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	e015      	b.n	8004c2e <HAL_TIM_PWM_Start+0x9e>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d109      	bne.n	8004c1c <HAL_TIM_PWM_Start+0x8c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e008      	b.n	8004c2e <HAL_TIM_PWM_Start+0x9e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0a1      	b.n	8004d7a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_PWM_Start+0xb6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c44:	e023      	b.n	8004c8e <HAL_TIM_PWM_Start+0xfe>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d104      	bne.n	8004c56 <HAL_TIM_PWM_Start+0xc6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c54:	e01b      	b.n	8004c8e <HAL_TIM_PWM_Start+0xfe>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_PWM_Start+0xd6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c64:	e013      	b.n	8004c8e <HAL_TIM_PWM_Start+0xfe>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Start+0xe6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c74:	e00b      	b.n	8004c8e <HAL_TIM_PWM_Start+0xfe>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start+0xf6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c84:	e003      	b.n	8004c8e <HAL_TIM_PWM_Start+0xfe>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2201      	movs	r2, #1
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 ff3e 	bl	8005b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a38      	ldr	r2, [pc, #224]	; (8004d84 <HAL_TIM_PWM_Start+0x1f4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d018      	beq.n	8004cd8 <HAL_TIM_PWM_Start+0x148>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a37      	ldr	r2, [pc, #220]	; (8004d88 <HAL_TIM_PWM_Start+0x1f8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d013      	beq.n	8004cd8 <HAL_TIM_PWM_Start+0x148>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a35      	ldr	r2, [pc, #212]	; (8004d8c <HAL_TIM_PWM_Start+0x1fc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00e      	beq.n	8004cd8 <HAL_TIM_PWM_Start+0x148>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a34      	ldr	r2, [pc, #208]	; (8004d90 <HAL_TIM_PWM_Start+0x200>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d009      	beq.n	8004cd8 <HAL_TIM_PWM_Start+0x148>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a32      	ldr	r2, [pc, #200]	; (8004d94 <HAL_TIM_PWM_Start+0x204>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_TIM_PWM_Start+0x148>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a31      	ldr	r2, [pc, #196]	; (8004d98 <HAL_TIM_PWM_Start+0x208>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIM_PWM_Start+0x14c>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <HAL_TIM_PWM_Start+0x14e>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a23      	ldr	r2, [pc, #140]	; (8004d84 <HAL_TIM_PWM_Start+0x1f4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d01d      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1a8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d018      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1a8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a24      	ldr	r2, [pc, #144]	; (8004d9c <HAL_TIM_PWM_Start+0x20c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d013      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1a8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a22      	ldr	r2, [pc, #136]	; (8004da0 <HAL_TIM_PWM_Start+0x210>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00e      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1a8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <HAL_TIM_PWM_Start+0x1f8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1a8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <HAL_TIM_PWM_Start+0x1fc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d004      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1a8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a19      	ldr	r2, [pc, #100]	; (8004d98 <HAL_TIM_PWM_Start+0x208>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d115      	bne.n	8004d64 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	4b19      	ldr	r3, [pc, #100]	; (8004da4 <HAL_TIM_PWM_Start+0x214>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b06      	cmp	r3, #6
 8004d48:	d015      	beq.n	8004d76 <HAL_TIM_PWM_Start+0x1e6>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d50:	d011      	beq.n	8004d76 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d62:	e008      	b.n	8004d76 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e000      	b.n	8004d78 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40013400 	.word	0x40013400
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800
 8004d98:	40015000 	.word	0x40015000
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	00010007 	.word	0x00010007

08004da8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 feac 	bl	8005b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a40      	ldr	r2, [pc, #256]	; (8004ec8 <HAL_TIM_PWM_Stop+0x120>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d018      	beq.n	8004dfc <HAL_TIM_PWM_Stop+0x54>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3f      	ldr	r2, [pc, #252]	; (8004ecc <HAL_TIM_PWM_Stop+0x124>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <HAL_TIM_PWM_Stop+0x54>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a3d      	ldr	r2, [pc, #244]	; (8004ed0 <HAL_TIM_PWM_Stop+0x128>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00e      	beq.n	8004dfc <HAL_TIM_PWM_Stop+0x54>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3c      	ldr	r2, [pc, #240]	; (8004ed4 <HAL_TIM_PWM_Stop+0x12c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <HAL_TIM_PWM_Stop+0x54>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3a      	ldr	r2, [pc, #232]	; (8004ed8 <HAL_TIM_PWM_Stop+0x130>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_TIM_PWM_Stop+0x54>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a39      	ldr	r2, [pc, #228]	; (8004edc <HAL_TIM_PWM_Stop+0x134>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIM_PWM_Stop+0x58>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_TIM_PWM_Stop+0x5a>
 8004e00:	2300      	movs	r3, #0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d017      	beq.n	8004e36 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
 8004e0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <HAL_TIM_PWM_Stop+0x8e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	f240 4344 	movw	r3, #1092	; 0x444
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d107      	bne.n	8004e36 <HAL_TIM_PWM_Stop+0x8e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6a1a      	ldr	r2, [r3, #32]
 8004e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <HAL_TIM_PWM_Stop+0xbe>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d107      	bne.n	8004e66 <HAL_TIM_PWM_Stop+0xbe>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_PWM_Stop+0xce>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e74:	e023      	b.n	8004ebe <HAL_TIM_PWM_Stop+0x116>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_PWM_Stop+0xde>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e84:	e01b      	b.n	8004ebe <HAL_TIM_PWM_Stop+0x116>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_PWM_Stop+0xee>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e94:	e013      	b.n	8004ebe <HAL_TIM_PWM_Stop+0x116>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Stop+0xfe>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ea4:	e00b      	b.n	8004ebe <HAL_TIM_PWM_Stop+0x116>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Stop+0x10e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb4:	e003      	b.n	8004ebe <HAL_TIM_PWM_Stop+0x116>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40013400 	.word	0x40013400
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40014400 	.word	0x40014400
 8004ed8:	40014800 	.word	0x40014800
 8004edc:	40015000 	.word	0x40015000

08004ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e0ff      	b.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b14      	cmp	r3, #20
 8004f0a:	f200 80f0 	bhi.w	80050ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f69 	.word	0x08004f69
 8004f18:	080050ef 	.word	0x080050ef
 8004f1c:	080050ef 	.word	0x080050ef
 8004f20:	080050ef 	.word	0x080050ef
 8004f24:	08004fa9 	.word	0x08004fa9
 8004f28:	080050ef 	.word	0x080050ef
 8004f2c:	080050ef 	.word	0x080050ef
 8004f30:	080050ef 	.word	0x080050ef
 8004f34:	08004feb 	.word	0x08004feb
 8004f38:	080050ef 	.word	0x080050ef
 8004f3c:	080050ef 	.word	0x080050ef
 8004f40:	080050ef 	.word	0x080050ef
 8004f44:	0800502b 	.word	0x0800502b
 8004f48:	080050ef 	.word	0x080050ef
 8004f4c:	080050ef 	.word	0x080050ef
 8004f50:	080050ef 	.word	0x080050ef
 8004f54:	0800506d 	.word	0x0800506d
 8004f58:	080050ef 	.word	0x080050ef
 8004f5c:	080050ef 	.word	0x080050ef
 8004f60:	080050ef 	.word	0x080050ef
 8004f64:	080050ad 	.word	0x080050ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fa32 	bl	80053d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0208 	orr.w	r2, r2, #8
 8004f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0204 	bic.w	r2, r2, #4
 8004f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6999      	ldr	r1, [r3, #24]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	619a      	str	r2, [r3, #24]
      break;
 8004fa6:	e0a5      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 faac 	bl	800550c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6999      	ldr	r1, [r3, #24]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	619a      	str	r2, [r3, #24]
      break;
 8004fe8:	e084      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fb1f 	bl	8005634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0208 	orr.w	r2, r2, #8
 8005004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0204 	bic.w	r2, r2, #4
 8005014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69d9      	ldr	r1, [r3, #28]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	61da      	str	r2, [r3, #28]
      break;
 8005028:	e064      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fb91 	bl	8005758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69d9      	ldr	r1, [r3, #28]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	021a      	lsls	r2, r3, #8
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	61da      	str	r2, [r3, #28]
      break;
 800506a:	e043      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fbe0 	bl	8005838 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0208 	orr.w	r2, r2, #8
 8005086:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0204 	bic.w	r2, r2, #4
 8005096:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050aa:	e023      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fc2a 	bl	800590c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	021a      	lsls	r2, r3, #8
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050ec:	e002      	b.n	80050f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
      break;
 80050f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop

08005108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIM_ConfigClockSource+0x1c>
 8005120:	2302      	movs	r3, #2
 8005122:	e0b6      	b.n	8005292 <HAL_TIM_ConfigClockSource+0x18a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800514e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005160:	d03e      	beq.n	80051e0 <HAL_TIM_ConfigClockSource+0xd8>
 8005162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005166:	f200 8087 	bhi.w	8005278 <HAL_TIM_ConfigClockSource+0x170>
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	f000 8086 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x176>
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005176:	d87f      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005178:	2b70      	cmp	r3, #112	; 0x70
 800517a:	d01a      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0xaa>
 800517c:	2b70      	cmp	r3, #112	; 0x70
 800517e:	d87b      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005180:	2b60      	cmp	r3, #96	; 0x60
 8005182:	d050      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0x11e>
 8005184:	2b60      	cmp	r3, #96	; 0x60
 8005186:	d877      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005188:	2b50      	cmp	r3, #80	; 0x50
 800518a:	d03c      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xfe>
 800518c:	2b50      	cmp	r3, #80	; 0x50
 800518e:	d873      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005190:	2b40      	cmp	r3, #64	; 0x40
 8005192:	d058      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x13e>
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d86f      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 8005198:	2b30      	cmp	r3, #48	; 0x30
 800519a:	d064      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x15e>
 800519c:	2b30      	cmp	r3, #48	; 0x30
 800519e:	d86b      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d060      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x15e>
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d867      	bhi.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d05c      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x15e>
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d05a      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x15e>
 80051b0:	e062      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6899      	ldr	r1, [r3, #8]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f000 fc89 	bl	8005ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	609a      	str	r2, [r3, #8]
      break;
 80051de:	e04f      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	6899      	ldr	r1, [r3, #8]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f000 fc72 	bl	8005ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005202:	609a      	str	r2, [r3, #8]
      break;
 8005204:	e03c      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6859      	ldr	r1, [r3, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	461a      	mov	r2, r3
 8005214:	f000 fbe6 	bl	80059e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2150      	movs	r1, #80	; 0x50
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fc3f 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 8005224:	e02c      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6859      	ldr	r1, [r3, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	461a      	mov	r2, r3
 8005234:	f000 fc05 	bl	8005a42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2160      	movs	r1, #96	; 0x60
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fc2f 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 8005244:	e01c      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6859      	ldr	r1, [r3, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	461a      	mov	r2, r3
 8005254:	f000 fbc6 	bl	80059e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2140      	movs	r1, #64	; 0x40
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fc1f 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 8005264:	e00c      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f000 fc16 	bl	8005aa2 <TIM_ITRx_SetConfig>
      break;
 8005276:	e003      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      break;
 800527c:	e000      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800527e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a42      	ldr	r2, [pc, #264]	; (80053b8 <TIM_Base_SetConfig+0x11c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d013      	beq.n	80052dc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ba:	d00f      	beq.n	80052dc <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3f      	ldr	r2, [pc, #252]	; (80053bc <TIM_Base_SetConfig+0x120>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00b      	beq.n	80052dc <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3e      	ldr	r2, [pc, #248]	; (80053c0 <TIM_Base_SetConfig+0x124>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d007      	beq.n	80052dc <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3d      	ldr	r2, [pc, #244]	; (80053c4 <TIM_Base_SetConfig+0x128>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d003      	beq.n	80052dc <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3c      	ldr	r2, [pc, #240]	; (80053c8 <TIM_Base_SetConfig+0x12c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d108      	bne.n	80052ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a31      	ldr	r2, [pc, #196]	; (80053b8 <TIM_Base_SetConfig+0x11c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01f      	beq.n	8005336 <TIM_Base_SetConfig+0x9a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fc:	d01b      	beq.n	8005336 <TIM_Base_SetConfig+0x9a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2e      	ldr	r2, [pc, #184]	; (80053bc <TIM_Base_SetConfig+0x120>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d017      	beq.n	8005336 <TIM_Base_SetConfig+0x9a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <TIM_Base_SetConfig+0x124>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <TIM_Base_SetConfig+0x9a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2c      	ldr	r2, [pc, #176]	; (80053c4 <TIM_Base_SetConfig+0x128>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00f      	beq.n	8005336 <TIM_Base_SetConfig+0x9a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <TIM_Base_SetConfig+0x130>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00b      	beq.n	8005336 <TIM_Base_SetConfig+0x9a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2b      	ldr	r2, [pc, #172]	; (80053d0 <TIM_Base_SetConfig+0x134>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d007      	beq.n	8005336 <TIM_Base_SetConfig+0x9a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2a      	ldr	r2, [pc, #168]	; (80053d4 <TIM_Base_SetConfig+0x138>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d003      	beq.n	8005336 <TIM_Base_SetConfig+0x9a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a25      	ldr	r2, [pc, #148]	; (80053c8 <TIM_Base_SetConfig+0x12c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d108      	bne.n	8005348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <TIM_Base_SetConfig+0x11c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d013      	beq.n	800539c <TIM_Base_SetConfig+0x100>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a13      	ldr	r2, [pc, #76]	; (80053c4 <TIM_Base_SetConfig+0x128>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00f      	beq.n	800539c <TIM_Base_SetConfig+0x100>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a13      	ldr	r2, [pc, #76]	; (80053cc <TIM_Base_SetConfig+0x130>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_Base_SetConfig+0x100>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <TIM_Base_SetConfig+0x134>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_Base_SetConfig+0x100>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a11      	ldr	r2, [pc, #68]	; (80053d4 <TIM_Base_SetConfig+0x138>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0x100>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0c      	ldr	r2, [pc, #48]	; (80053c8 <TIM_Base_SetConfig+0x12c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	615a      	str	r2, [r3, #20]
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40013400 	.word	0x40013400
 80053c8:	40015000 	.word	0x40015000
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40014400 	.word	0x40014400
 80053d4:	40014800 	.word	0x40014800

080053d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f023 0201 	bic.w	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0303 	bic.w	r3, r3, #3
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 0302 	bic.w	r3, r3, #2
 8005424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a30      	ldr	r2, [pc, #192]	; (80054f4 <TIM_OC1_SetConfig+0x11c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d013      	beq.n	8005460 <TIM_OC1_SetConfig+0x88>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a2f      	ldr	r2, [pc, #188]	; (80054f8 <TIM_OC1_SetConfig+0x120>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00f      	beq.n	8005460 <TIM_OC1_SetConfig+0x88>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a2e      	ldr	r2, [pc, #184]	; (80054fc <TIM_OC1_SetConfig+0x124>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00b      	beq.n	8005460 <TIM_OC1_SetConfig+0x88>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a2d      	ldr	r2, [pc, #180]	; (8005500 <TIM_OC1_SetConfig+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d007      	beq.n	8005460 <TIM_OC1_SetConfig+0x88>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a2c      	ldr	r2, [pc, #176]	; (8005504 <TIM_OC1_SetConfig+0x12c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_OC1_SetConfig+0x88>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a2b      	ldr	r2, [pc, #172]	; (8005508 <TIM_OC1_SetConfig+0x130>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10c      	bne.n	800547a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0308 	bic.w	r3, r3, #8
 8005466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f023 0304 	bic.w	r3, r3, #4
 8005478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a1d      	ldr	r2, [pc, #116]	; (80054f4 <TIM_OC1_SetConfig+0x11c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <TIM_OC1_SetConfig+0xd2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <TIM_OC1_SetConfig+0x120>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00f      	beq.n	80054aa <TIM_OC1_SetConfig+0xd2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <TIM_OC1_SetConfig+0x124>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_OC1_SetConfig+0xd2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1a      	ldr	r2, [pc, #104]	; (8005500 <TIM_OC1_SetConfig+0x128>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_OC1_SetConfig+0xd2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <TIM_OC1_SetConfig+0x12c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_OC1_SetConfig+0xd2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a18      	ldr	r2, [pc, #96]	; (8005508 <TIM_OC1_SetConfig+0x130>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d111      	bne.n	80054ce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	621a      	str	r2, [r3, #32]
}
 80054e8:	bf00      	nop
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40013400 	.word	0x40013400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800
 8005508:	40015000 	.word	0x40015000

0800550c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0210 	bic.w	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0320 	bic.w	r3, r3, #32
 800555a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a2c      	ldr	r2, [pc, #176]	; (800561c <TIM_OC2_SetConfig+0x110>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d007      	beq.n	8005580 <TIM_OC2_SetConfig+0x74>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a2b      	ldr	r2, [pc, #172]	; (8005620 <TIM_OC2_SetConfig+0x114>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_OC2_SetConfig+0x74>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <TIM_OC2_SetConfig+0x118>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d10d      	bne.n	800559c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a1f      	ldr	r2, [pc, #124]	; (800561c <TIM_OC2_SetConfig+0x110>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <TIM_OC2_SetConfig+0xc0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a1e      	ldr	r2, [pc, #120]	; (8005620 <TIM_OC2_SetConfig+0x114>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00f      	beq.n	80055cc <TIM_OC2_SetConfig+0xc0>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <TIM_OC2_SetConfig+0x11c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00b      	beq.n	80055cc <TIM_OC2_SetConfig+0xc0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a1d      	ldr	r2, [pc, #116]	; (800562c <TIM_OC2_SetConfig+0x120>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d007      	beq.n	80055cc <TIM_OC2_SetConfig+0xc0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a1c      	ldr	r2, [pc, #112]	; (8005630 <TIM_OC2_SetConfig+0x124>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_OC2_SetConfig+0xc0>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a17      	ldr	r2, [pc, #92]	; (8005624 <TIM_OC2_SetConfig+0x118>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d113      	bne.n	80055f4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40013400 	.word	0x40013400
 8005624:	40015000 	.word	0x40015000
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800

08005634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2b      	ldr	r2, [pc, #172]	; (8005740 <TIM_OC3_SetConfig+0x10c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d007      	beq.n	80056a6 <TIM_OC3_SetConfig+0x72>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <TIM_OC3_SetConfig+0x110>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_OC3_SetConfig+0x72>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a29      	ldr	r2, [pc, #164]	; (8005748 <TIM_OC3_SetConfig+0x114>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d10d      	bne.n	80056c2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056c0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <TIM_OC3_SetConfig+0x10c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <TIM_OC3_SetConfig+0xbe>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <TIM_OC3_SetConfig+0x110>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00f      	beq.n	80056f2 <TIM_OC3_SetConfig+0xbe>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1d      	ldr	r2, [pc, #116]	; (800574c <TIM_OC3_SetConfig+0x118>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_OC3_SetConfig+0xbe>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1c      	ldr	r2, [pc, #112]	; (8005750 <TIM_OC3_SetConfig+0x11c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_OC3_SetConfig+0xbe>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <TIM_OC3_SetConfig+0x120>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_OC3_SetConfig+0xbe>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a16      	ldr	r2, [pc, #88]	; (8005748 <TIM_OC3_SetConfig+0x114>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d113      	bne.n	800571a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	621a      	str	r2, [r3, #32]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40013400 	.word	0x40013400
 8005748:	40015000 	.word	0x40015000
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800

08005758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	031b      	lsls	r3, r3, #12
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <TIM_OC4_SetConfig+0xc8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <TIM_OC4_SetConfig+0x8c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a19      	ldr	r2, [pc, #100]	; (8005824 <TIM_OC4_SetConfig+0xcc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00f      	beq.n	80057e4 <TIM_OC4_SetConfig+0x8c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a18      	ldr	r2, [pc, #96]	; (8005828 <TIM_OC4_SetConfig+0xd0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00b      	beq.n	80057e4 <TIM_OC4_SetConfig+0x8c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a17      	ldr	r2, [pc, #92]	; (800582c <TIM_OC4_SetConfig+0xd4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_OC4_SetConfig+0x8c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a16      	ldr	r2, [pc, #88]	; (8005830 <TIM_OC4_SetConfig+0xd8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_OC4_SetConfig+0x8c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <TIM_OC4_SetConfig+0xdc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d109      	bne.n	80057f8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	019b      	lsls	r3, r3, #6
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40013400 	.word	0x40013400
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800
 8005834:	40015000 	.word	0x40015000

08005838 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800587c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <TIM_OC5_SetConfig+0xbc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <TIM_OC5_SetConfig+0x82>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a18      	ldr	r2, [pc, #96]	; (80058f8 <TIM_OC5_SetConfig+0xc0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00f      	beq.n	80058ba <TIM_OC5_SetConfig+0x82>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a17      	ldr	r2, [pc, #92]	; (80058fc <TIM_OC5_SetConfig+0xc4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00b      	beq.n	80058ba <TIM_OC5_SetConfig+0x82>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a16      	ldr	r2, [pc, #88]	; (8005900 <TIM_OC5_SetConfig+0xc8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_OC5_SetConfig+0x82>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a15      	ldr	r2, [pc, #84]	; (8005904 <TIM_OC5_SetConfig+0xcc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_OC5_SetConfig+0x82>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a14      	ldr	r2, [pc, #80]	; (8005908 <TIM_OC5_SetConfig+0xd0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d109      	bne.n	80058ce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40013400 	.word	0x40013400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800
 8005908:	40015000 	.word	0x40015000

0800590c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	051b      	lsls	r3, r3, #20
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <TIM_OC6_SetConfig+0xc0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <TIM_OC6_SetConfig+0x84>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a19      	ldr	r2, [pc, #100]	; (80059d0 <TIM_OC6_SetConfig+0xc4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00f      	beq.n	8005990 <TIM_OC6_SetConfig+0x84>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <TIM_OC6_SetConfig+0xc8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00b      	beq.n	8005990 <TIM_OC6_SetConfig+0x84>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <TIM_OC6_SetConfig+0xcc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_OC6_SetConfig+0x84>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a16      	ldr	r2, [pc, #88]	; (80059dc <TIM_OC6_SetConfig+0xd0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_OC6_SetConfig+0x84>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <TIM_OC6_SetConfig+0xd4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d109      	bne.n	80059a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005996:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	029b      	lsls	r3, r3, #10
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40013400 	.word	0x40013400
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40014400 	.word	0x40014400
 80059dc:	40014800 	.word	0x40014800
 80059e0:	40015000 	.word	0x40015000

080059e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f023 0201 	bic.w	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f023 030a 	bic.w	r3, r3, #10
 8005a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b087      	sub	sp, #28
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f023 0210 	bic.w	r2, r3, #16
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	031b      	lsls	r3, r3, #12
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f043 0307 	orr.w	r3, r3, #7
 8005ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	609a      	str	r2, [r3, #8]
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	021a      	lsls	r2, r3, #8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	609a      	str	r2, [r3, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1a      	ldr	r2, [r3, #32]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	401a      	ands	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e06d      	b.n	8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a30      	ldr	r2, [pc, #192]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2d      	ldr	r2, [pc, #180]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1e      	ldr	r2, [pc, #120]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d01d      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf8:	d018      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d10c      	bne.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40013400 	.word	0x40013400
 8005c6c:	40015000 	.word	0x40015000
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	40014000 	.word	0x40014000

08005c7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e06a      	b.n	8005d6e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a19      	ldr	r2, [pc, #100]	; (8005d7c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d009      	beq.n	8005d30 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d115      	bne.n	8005d5c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	051b      	lsls	r3, r3, #20
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40015000 	.word	0x40015000

08005d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e040      	b.n	8005e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb ff5e 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	; 0x24
 8005db4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fc0c 	bl	80065e4 <UART_SetConfig>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e022      	b.n	8005e1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fdd6 	bl	8006990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fe5d 	bl	8006ad4 <UART_CheckIdleState>
 8005e1a:	4603      	mov	r3, r0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	f040 8082 	bne.w	8005f42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_UART_Transmit+0x26>
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e07a      	b.n	8005f44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Transmit+0x38>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e073      	b.n	8005f44 <HAL_UART_Transmit+0x120>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2221      	movs	r2, #33	; 0x21
 8005e70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e72:	f7fc f8dd 	bl	8002030 <HAL_GetTick>
 8005e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	88fa      	ldrh	r2, [r7, #6]
 8005e84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e90:	d108      	bne.n	8005ea4 <HAL_UART_Transmit+0x80>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	e003      	b.n	8005eac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005eb4:	e02d      	b.n	8005f12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2180      	movs	r1, #128	; 0x80
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fe50 	bl	8006b66 <UART_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e039      	b.n	8005f44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee2:	b292      	uxth	r2, r2
 8005ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	3302      	adds	r3, #2
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	e008      	b.n	8005f00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	b292      	uxth	r2, r2
 8005ef8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3301      	adds	r3, #1
 8005efe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1cb      	bne.n	8005eb6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2140      	movs	r1, #64	; 0x40
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fe1c 	bl	8006b66 <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e005      	b.n	8005f44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d13d      	bne.n	8005fde <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <HAL_UART_Receive_IT+0x22>
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e036      	b.n	8005fe0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_UART_Receive_IT+0x34>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e02f      	b.n	8005fe0 <HAL_UART_Receive_IT+0x94>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d018      	beq.n	8005fce <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	623b      	str	r3, [r7, #32]
 8005fbc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	69f9      	ldr	r1, [r7, #28]
 8005fc0:	6a3a      	ldr	r2, [r7, #32]
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e6      	bne.n	8005f9c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fe8b 	bl	8006cf0 <UART_Start_Receive_IT>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	e000      	b.n	8005fe0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3728      	adds	r7, #40	; 0x28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b0ba      	sub	sp, #232	; 0xe8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800600e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006012:	f640 030f 	movw	r3, #2063	; 0x80f
 8006016:	4013      	ands	r3, r2
 8006018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800601c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d115      	bne.n	8006050 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00f      	beq.n	8006050 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d009      	beq.n	8006050 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 82a3 	beq.w	800658c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
      }
      return;
 800604e:	e29d      	b.n	800658c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8117 	beq.w	8006288 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800605a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006066:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800606a:	4b85      	ldr	r3, [pc, #532]	; (8006280 <HAL_UART_IRQHandler+0x298>)
 800606c:	4013      	ands	r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 810a 	beq.w	8006288 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d011      	beq.n	80060a4 <HAL_UART_IRQHandler+0xbc>
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00b      	beq.n	80060a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2201      	movs	r2, #1
 8006092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800609a:	f043 0201 	orr.w	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d011      	beq.n	80060d4 <HAL_UART_IRQHandler+0xec>
 80060b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2202      	movs	r2, #2
 80060c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ca:	f043 0204 	orr.w	r2, r3, #4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d011      	beq.n	8006104 <HAL_UART_IRQHandler+0x11c>
 80060e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2204      	movs	r2, #4
 80060f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fa:	f043 0202 	orr.w	r2, r3, #2
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b00      	cmp	r3, #0
 800610e:	d017      	beq.n	8006140 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d105      	bne.n	8006128 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800611c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006120:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2208      	movs	r2, #8
 800612e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006136:	f043 0208 	orr.w	r2, r3, #8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006148:	2b00      	cmp	r3, #0
 800614a:	d012      	beq.n	8006172 <HAL_UART_IRQHandler+0x18a>
 800614c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00c      	beq.n	8006172 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006168:	f043 0220 	orr.w	r2, r3, #32
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8209 	beq.w	8006590 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d005      	beq.n	80061ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04f      	beq.n	800626a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fe3c 	bl	8006e48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d141      	bne.n	8006262 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3308      	adds	r3, #8
 80061e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3308      	adds	r3, #8
 8006206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800620a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800620e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1d9      	bne.n	80061de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	2b00      	cmp	r3, #0
 8006230:	d013      	beq.n	800625a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	4a13      	ldr	r2, [pc, #76]	; (8006284 <HAL_UART_IRQHandler+0x29c>)
 8006238:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	4618      	mov	r0, r3
 8006240:	f7fc f84c 	bl	80022dc <HAL_DMA_Abort_IT>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d017      	beq.n	800627a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006258:	e00f      	b.n	800627a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f9ac 	bl	80065b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e00b      	b.n	800627a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f9a8 	bl	80065b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e007      	b.n	800627a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9a4 	bl	80065b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006278:	e18a      	b.n	8006590 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	bf00      	nop
    return;
 800627c:	e188      	b.n	8006590 <HAL_UART_IRQHandler+0x5a8>
 800627e:	bf00      	nop
 8006280:	04000120 	.word	0x04000120
 8006284:	08006f0f 	.word	0x08006f0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628c:	2b01      	cmp	r3, #1
 800628e:	f040 8143 	bne.w	8006518 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 813c 	beq.w	8006518 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8135 	beq.w	8006518 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2210      	movs	r2, #16
 80062b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	f040 80b1 	bne.w	8006428 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 815c 	beq.w	8006594 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062e6:	429a      	cmp	r2, r3
 80062e8:	f080 8154 	bcs.w	8006594 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	f000 8085 	beq.w	800640c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006316:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800631a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800631e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800632c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006330:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006338:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1da      	bne.n	8006302 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800635c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006370:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006374:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006378:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e1      	bne.n	800634c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3308      	adds	r3, #8
 800638e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800639a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800639e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e3      	bne.n	8006388 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063dc:	f023 0310 	bic.w	r3, r3, #16
 80063e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80063f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e4      	bne.n	80063cc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	4618      	mov	r0, r3
 8006408:	f7fb ff2f 	bl	800226a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006418:	b29b      	uxth	r3, r3
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	b29b      	uxth	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f8d3 	bl	80065cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006426:	e0b5      	b.n	8006594 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006434:	b29b      	uxth	r3, r3
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80a7 	beq.w	8006598 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800644a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 80a2 	beq.w	8006598 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006476:	647b      	str	r3, [r7, #68]	; 0x44
 8006478:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800647c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e4      	bne.n	8006454 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3308      	adds	r3, #8
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	623b      	str	r3, [r7, #32]
   return(result);
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3308      	adds	r3, #8
 80064aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064ae:	633a      	str	r2, [r7, #48]	; 0x30
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e3      	bne.n	800648a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f023 0310 	bic.w	r3, r3, #16
 80064e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	69b9      	ldr	r1, [r7, #24]
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	617b      	str	r3, [r7, #20]
   return(result);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e4      	bne.n	80064d4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800650a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f85b 	bl	80065cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006516:	e03f      	b.n	8006598 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00e      	beq.n	8006542 <HAL_UART_IRQHandler+0x55a>
 8006524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fe83 	bl	8007246 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006540:	e02d      	b.n	800659e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00e      	beq.n	800656c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01c      	beq.n	800659c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
    }
    return;
 800656a:	e017      	b.n	800659c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800656c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d012      	beq.n	800659e <HAL_UART_IRQHandler+0x5b6>
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00c      	beq.n	800659e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fcd8 	bl	8006f3a <UART_EndTransmit_IT>
    return;
 800658a:	e008      	b.n	800659e <HAL_UART_IRQHandler+0x5b6>
      return;
 800658c:	bf00      	nop
 800658e:	e006      	b.n	800659e <HAL_UART_IRQHandler+0x5b6>
    return;
 8006590:	bf00      	nop
 8006592:	e004      	b.n	800659e <HAL_UART_IRQHandler+0x5b6>
      return;
 8006594:	bf00      	nop
 8006596:	e002      	b.n	800659e <HAL_UART_IRQHandler+0x5b6>
      return;
 8006598:	bf00      	nop
 800659a:	e000      	b.n	800659e <HAL_UART_IRQHandler+0x5b6>
    return;
 800659c:	bf00      	nop
  }

}
 800659e:	37e8      	adds	r7, #232	; 0xe8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	4b92      	ldr	r3, [pc, #584]	; (8006858 <UART_SetConfig+0x274>)
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	6979      	ldr	r1, [r7, #20]
 8006618:	430b      	orrs	r3, r1
 800661a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	430a      	orrs	r2, r1
 8006654:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a80      	ldr	r2, [pc, #512]	; (800685c <UART_SetConfig+0x278>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d120      	bne.n	80066a2 <UART_SetConfig+0xbe>
 8006660:	4b7f      	ldr	r3, [pc, #508]	; (8006860 <UART_SetConfig+0x27c>)
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	2b03      	cmp	r3, #3
 800666a:	d817      	bhi.n	800669c <UART_SetConfig+0xb8>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <UART_SetConfig+0x90>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	08006685 	.word	0x08006685
 8006678:	08006691 	.word	0x08006691
 800667c:	08006697 	.word	0x08006697
 8006680:	0800668b 	.word	0x0800668b
 8006684:	2301      	movs	r3, #1
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e0b5      	b.n	80067f6 <UART_SetConfig+0x212>
 800668a:	2302      	movs	r3, #2
 800668c:	77fb      	strb	r3, [r7, #31]
 800668e:	e0b2      	b.n	80067f6 <UART_SetConfig+0x212>
 8006690:	2304      	movs	r3, #4
 8006692:	77fb      	strb	r3, [r7, #31]
 8006694:	e0af      	b.n	80067f6 <UART_SetConfig+0x212>
 8006696:	2308      	movs	r3, #8
 8006698:	77fb      	strb	r3, [r7, #31]
 800669a:	e0ac      	b.n	80067f6 <UART_SetConfig+0x212>
 800669c:	2310      	movs	r3, #16
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e0a9      	b.n	80067f6 <UART_SetConfig+0x212>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a6f      	ldr	r2, [pc, #444]	; (8006864 <UART_SetConfig+0x280>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d124      	bne.n	80066f6 <UART_SetConfig+0x112>
 80066ac:	4b6c      	ldr	r3, [pc, #432]	; (8006860 <UART_SetConfig+0x27c>)
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066b8:	d011      	beq.n	80066de <UART_SetConfig+0xfa>
 80066ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066be:	d817      	bhi.n	80066f0 <UART_SetConfig+0x10c>
 80066c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c4:	d011      	beq.n	80066ea <UART_SetConfig+0x106>
 80066c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ca:	d811      	bhi.n	80066f0 <UART_SetConfig+0x10c>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <UART_SetConfig+0xf4>
 80066d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d4:	d006      	beq.n	80066e4 <UART_SetConfig+0x100>
 80066d6:	e00b      	b.n	80066f0 <UART_SetConfig+0x10c>
 80066d8:	2300      	movs	r3, #0
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e08b      	b.n	80067f6 <UART_SetConfig+0x212>
 80066de:	2302      	movs	r3, #2
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e088      	b.n	80067f6 <UART_SetConfig+0x212>
 80066e4:	2304      	movs	r3, #4
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e085      	b.n	80067f6 <UART_SetConfig+0x212>
 80066ea:	2308      	movs	r3, #8
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e082      	b.n	80067f6 <UART_SetConfig+0x212>
 80066f0:	2310      	movs	r3, #16
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e07f      	b.n	80067f6 <UART_SetConfig+0x212>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a5b      	ldr	r2, [pc, #364]	; (8006868 <UART_SetConfig+0x284>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d124      	bne.n	800674a <UART_SetConfig+0x166>
 8006700:	4b57      	ldr	r3, [pc, #348]	; (8006860 <UART_SetConfig+0x27c>)
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006708:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800670c:	d011      	beq.n	8006732 <UART_SetConfig+0x14e>
 800670e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006712:	d817      	bhi.n	8006744 <UART_SetConfig+0x160>
 8006714:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006718:	d011      	beq.n	800673e <UART_SetConfig+0x15a>
 800671a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800671e:	d811      	bhi.n	8006744 <UART_SetConfig+0x160>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <UART_SetConfig+0x148>
 8006724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006728:	d006      	beq.n	8006738 <UART_SetConfig+0x154>
 800672a:	e00b      	b.n	8006744 <UART_SetConfig+0x160>
 800672c:	2300      	movs	r3, #0
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e061      	b.n	80067f6 <UART_SetConfig+0x212>
 8006732:	2302      	movs	r3, #2
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e05e      	b.n	80067f6 <UART_SetConfig+0x212>
 8006738:	2304      	movs	r3, #4
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e05b      	b.n	80067f6 <UART_SetConfig+0x212>
 800673e:	2308      	movs	r3, #8
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e058      	b.n	80067f6 <UART_SetConfig+0x212>
 8006744:	2310      	movs	r3, #16
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e055      	b.n	80067f6 <UART_SetConfig+0x212>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a47      	ldr	r2, [pc, #284]	; (800686c <UART_SetConfig+0x288>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d124      	bne.n	800679e <UART_SetConfig+0x1ba>
 8006754:	4b42      	ldr	r3, [pc, #264]	; (8006860 <UART_SetConfig+0x27c>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800675c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006760:	d011      	beq.n	8006786 <UART_SetConfig+0x1a2>
 8006762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006766:	d817      	bhi.n	8006798 <UART_SetConfig+0x1b4>
 8006768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676c:	d011      	beq.n	8006792 <UART_SetConfig+0x1ae>
 800676e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006772:	d811      	bhi.n	8006798 <UART_SetConfig+0x1b4>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <UART_SetConfig+0x19c>
 8006778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677c:	d006      	beq.n	800678c <UART_SetConfig+0x1a8>
 800677e:	e00b      	b.n	8006798 <UART_SetConfig+0x1b4>
 8006780:	2300      	movs	r3, #0
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e037      	b.n	80067f6 <UART_SetConfig+0x212>
 8006786:	2302      	movs	r3, #2
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e034      	b.n	80067f6 <UART_SetConfig+0x212>
 800678c:	2304      	movs	r3, #4
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e031      	b.n	80067f6 <UART_SetConfig+0x212>
 8006792:	2308      	movs	r3, #8
 8006794:	77fb      	strb	r3, [r7, #31]
 8006796:	e02e      	b.n	80067f6 <UART_SetConfig+0x212>
 8006798:	2310      	movs	r3, #16
 800679a:	77fb      	strb	r3, [r7, #31]
 800679c:	e02b      	b.n	80067f6 <UART_SetConfig+0x212>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a33      	ldr	r2, [pc, #204]	; (8006870 <UART_SetConfig+0x28c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d124      	bne.n	80067f2 <UART_SetConfig+0x20e>
 80067a8:	4b2d      	ldr	r3, [pc, #180]	; (8006860 <UART_SetConfig+0x27c>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80067b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067b4:	d011      	beq.n	80067da <UART_SetConfig+0x1f6>
 80067b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067ba:	d817      	bhi.n	80067ec <UART_SetConfig+0x208>
 80067bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067c0:	d011      	beq.n	80067e6 <UART_SetConfig+0x202>
 80067c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067c6:	d811      	bhi.n	80067ec <UART_SetConfig+0x208>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <UART_SetConfig+0x1f0>
 80067cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067d0:	d006      	beq.n	80067e0 <UART_SetConfig+0x1fc>
 80067d2:	e00b      	b.n	80067ec <UART_SetConfig+0x208>
 80067d4:	2300      	movs	r3, #0
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e00d      	b.n	80067f6 <UART_SetConfig+0x212>
 80067da:	2302      	movs	r3, #2
 80067dc:	77fb      	strb	r3, [r7, #31]
 80067de:	e00a      	b.n	80067f6 <UART_SetConfig+0x212>
 80067e0:	2304      	movs	r3, #4
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e007      	b.n	80067f6 <UART_SetConfig+0x212>
 80067e6:	2308      	movs	r3, #8
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e004      	b.n	80067f6 <UART_SetConfig+0x212>
 80067ec:	2310      	movs	r3, #16
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e001      	b.n	80067f6 <UART_SetConfig+0x212>
 80067f2:	2310      	movs	r3, #16
 80067f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fe:	d16c      	bne.n	80068da <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8006800:	7ffb      	ldrb	r3, [r7, #31]
 8006802:	2b08      	cmp	r3, #8
 8006804:	d838      	bhi.n	8006878 <UART_SetConfig+0x294>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x228>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	08006879 	.word	0x08006879
 800681c:	08006847 	.word	0x08006847
 8006820:	08006879 	.word	0x08006879
 8006824:	08006879 	.word	0x08006879
 8006828:	08006879 	.word	0x08006879
 800682c:	0800684f 	.word	0x0800684f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fd fe94 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8006834:	61b8      	str	r0, [r7, #24]
        break;
 8006836:	e024      	b.n	8006882 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fd feb2 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 800683c:	61b8      	str	r0, [r7, #24]
        break;
 800683e:	e020      	b.n	8006882 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006840:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <UART_SetConfig+0x290>)
 8006842:	61bb      	str	r3, [r7, #24]
        break;
 8006844:	e01d      	b.n	8006882 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fd fe13 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 800684a:	61b8      	str	r0, [r7, #24]
        break;
 800684c:	e019      	b.n	8006882 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006852:	61bb      	str	r3, [r7, #24]
        break;
 8006854:	e015      	b.n	8006882 <UART_SetConfig+0x29e>
 8006856:	bf00      	nop
 8006858:	efff69f3 	.word	0xefff69f3
 800685c:	40013800 	.word	0x40013800
 8006860:	40021000 	.word	0x40021000
 8006864:	40004400 	.word	0x40004400
 8006868:	40004800 	.word	0x40004800
 800686c:	40004c00 	.word	0x40004c00
 8006870:	40005000 	.word	0x40005000
 8006874:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	77bb      	strb	r3, [r7, #30]
        break;
 8006880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d075      	beq.n	8006974 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	005a      	lsls	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	441a      	add	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	b29b      	uxth	r3, r3
 800689e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b0f      	cmp	r3, #15
 80068a4:	d916      	bls.n	80068d4 <UART_SetConfig+0x2f0>
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ac:	d212      	bcs.n	80068d4 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f023 030f 	bic.w	r3, r3, #15
 80068b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	89fb      	ldrh	r3, [r7, #14]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	89fa      	ldrh	r2, [r7, #14]
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	e04f      	b.n	8006974 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	77bb      	strb	r3, [r7, #30]
 80068d8:	e04c      	b.n	8006974 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068da:	7ffb      	ldrb	r3, [r7, #31]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d828      	bhi.n	8006932 <UART_SetConfig+0x34e>
 80068e0:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <UART_SetConfig+0x304>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	0800690d 	.word	0x0800690d
 80068ec:	08006915 	.word	0x08006915
 80068f0:	0800691d 	.word	0x0800691d
 80068f4:	08006933 	.word	0x08006933
 80068f8:	08006923 	.word	0x08006923
 80068fc:	08006933 	.word	0x08006933
 8006900:	08006933 	.word	0x08006933
 8006904:	08006933 	.word	0x08006933
 8006908:	0800692b 	.word	0x0800692b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800690c:	f7fd fe26 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8006910:	61b8      	str	r0, [r7, #24]
        break;
 8006912:	e013      	b.n	800693c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006914:	f7fd fe44 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 8006918:	61b8      	str	r0, [r7, #24]
        break;
 800691a:	e00f      	b.n	800693c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800691c:	4b1b      	ldr	r3, [pc, #108]	; (800698c <UART_SetConfig+0x3a8>)
 800691e:	61bb      	str	r3, [r7, #24]
        break;
 8006920:	e00c      	b.n	800693c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006922:	f7fd fda5 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 8006926:	61b8      	str	r0, [r7, #24]
        break;
 8006928:	e008      	b.n	800693c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692e:	61bb      	str	r3, [r7, #24]
        break;
 8006930:	e004      	b.n	800693c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	77bb      	strb	r3, [r7, #30]
        break;
 800693a:	bf00      	nop
    }

    if (pclk != 0U)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d018      	beq.n	8006974 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	085a      	lsrs	r2, r3, #1
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	441a      	add	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	b29b      	uxth	r3, r3
 8006956:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2b0f      	cmp	r3, #15
 800695c:	d908      	bls.n	8006970 <UART_SetConfig+0x38c>
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006964:	d204      	bcs.n	8006970 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	60da      	str	r2, [r3, #12]
 800696e:	e001      	b.n	8006974 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006980:	7fbb      	ldrb	r3, [r7, #30]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3720      	adds	r7, #32
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	007a1200 	.word	0x007a1200

08006990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	f003 0308 	and.w	r3, r3, #8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01a      	beq.n	8006aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a8e:	d10a      	bne.n	8006aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	605a      	str	r2, [r3, #4]
  }
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ae4:	f7fb faa4 	bl	8002030 <HAL_GetTick>
 8006ae8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d10e      	bne.n	8006b16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f82d 	bl	8006b66 <UART_WaitOnFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e023      	b.n	8006b5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d10e      	bne.n	8006b42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f817 	bl	8006b66 <UART_WaitOnFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e00d      	b.n	8006b5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b09c      	sub	sp, #112	; 0x70
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	603b      	str	r3, [r7, #0]
 8006b72:	4613      	mov	r3, r2
 8006b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b76:	e0a5      	b.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b7e:	f000 80a1 	beq.w	8006cc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b82:	f7fb fa55 	bl	8002030 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d13e      	bne.n	8006c16 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bac:	667b      	str	r3, [r7, #100]	; 0x64
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e6      	bne.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	f023 0301 	bic.w	r3, r3, #1
 8006be0:	663b      	str	r3, [r7, #96]	; 0x60
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3308      	adds	r3, #8
 8006be8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bea:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e5      	bne.n	8006bca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2220      	movs	r2, #32
 8006c02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e067      	b.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d04f      	beq.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c32:	d147      	bne.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e6      	bne.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3308      	adds	r3, #8
 8006c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c90:	623a      	str	r2, [r7, #32]
 8006c92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	69f9      	ldr	r1, [r7, #28]
 8006c96:	6a3a      	ldr	r2, [r7, #32]
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e5      	bne.n	8006c70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e010      	b.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69da      	ldr	r2, [r3, #28]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	bf0c      	ite	eq
 8006cd4:	2301      	moveq	r3, #1
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	f43f af4a 	beq.w	8006b78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3770      	adds	r7, #112	; 0x70
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b091      	sub	sp, #68	; 0x44
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	88fa      	ldrh	r2, [r7, #6]
 8006d08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	88fa      	ldrh	r2, [r7, #6]
 8006d10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	d10e      	bne.n	8006d42 <UART_Start_Receive_IT+0x52>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <UART_Start_Receive_IT+0x48>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d36:	e02d      	b.n	8006d94 <UART_Start_Receive_IT+0xa4>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	22ff      	movs	r2, #255	; 0xff
 8006d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d40:	e028      	b.n	8006d94 <UART_Start_Receive_IT+0xa4>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10d      	bne.n	8006d66 <UART_Start_Receive_IT+0x76>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d104      	bne.n	8006d5c <UART_Start_Receive_IT+0x6c>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	22ff      	movs	r2, #255	; 0xff
 8006d56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d5a:	e01b      	b.n	8006d94 <UART_Start_Receive_IT+0xa4>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	227f      	movs	r2, #127	; 0x7f
 8006d60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d64:	e016      	b.n	8006d94 <UART_Start_Receive_IT+0xa4>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d6e:	d10d      	bne.n	8006d8c <UART_Start_Receive_IT+0x9c>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <UART_Start_Receive_IT+0x92>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	227f      	movs	r2, #127	; 0x7f
 8006d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d80:	e008      	b.n	8006d94 <UART_Start_Receive_IT+0xa4>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	223f      	movs	r2, #63	; 0x3f
 8006d86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d8a:	e003      	b.n	8006d94 <UART_Start_Receive_IT+0xa4>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2222      	movs	r2, #34	; 0x22
 8006da0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	f043 0301 	orr.w	r3, r3, #1
 8006db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dc2:	637a      	str	r2, [r7, #52]	; 0x34
 8006dc4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e5      	bne.n	8006da2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dde:	d107      	bne.n	8006df0 <UART_Start_Receive_IT+0x100>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d103      	bne.n	8006df0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <UART_Start_Receive_IT+0x150>)
 8006dec:	665a      	str	r2, [r3, #100]	; 0x64
 8006dee:	e002      	b.n	8006df6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a14      	ldr	r2, [pc, #80]	; (8006e44 <UART_Start_Receive_IT+0x154>)
 8006df4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	623b      	str	r3, [r7, #32]
 8006e1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	6a3a      	ldr	r2, [r7, #32]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e6      	bne.n	8006dfe <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3744      	adds	r7, #68	; 0x44
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	080070eb 	.word	0x080070eb
 8006e44:	08006f8f 	.word	0x08006f8f

08006e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b095      	sub	sp, #84	; 0x54
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e6      	bne.n	8006e50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3308      	adds	r3, #8
 8006e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f023 0301 	bic.w	r3, r3, #1
 8006e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ea2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e5      	bne.n	8006e82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d118      	bne.n	8006ef0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f023 0310 	bic.w	r3, r3, #16
 8006ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6979      	ldr	r1, [r7, #20]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e6      	bne.n	8006ebe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006f02:	bf00      	nop
 8006f04:	3754      	adds	r7, #84	; 0x54
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff fb43 	bl	80065b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b088      	sub	sp, #32
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6979      	ldr	r1, [r7, #20]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff fb0f 	bl	80065a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f86:	bf00      	nop
 8006f88:	3720      	adds	r7, #32
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b096      	sub	sp, #88	; 0x58
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa4:	2b22      	cmp	r3, #34	; 0x22
 8006fa6:	f040 8094 	bne.w	80070d2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fb0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fb4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006fb8:	b2d9      	uxtb	r1, r3
 8006fba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc4:	400a      	ands	r2, r1
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d177      	bne.n	80070e2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007006:	653b      	str	r3, [r7, #80]	; 0x50
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007010:	647b      	str	r3, [r7, #68]	; 0x44
 8007012:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800701e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e6      	bne.n	8006ff2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	623b      	str	r3, [r7, #32]
   return(result);
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007044:	633a      	str	r2, [r7, #48]	; 0x30
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800704a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e5      	bne.n	8007024 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007068:	2b01      	cmp	r3, #1
 800706a:	d12e      	bne.n	80070ca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0310 	bic.w	r3, r3, #16
 8007086:	64bb      	str	r3, [r7, #72]	; 0x48
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	69b9      	ldr	r1, [r7, #24]
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	617b      	str	r3, [r7, #20]
   return(result);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e6      	bne.n	8007072 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b10      	cmp	r3, #16
 80070b0:	d103      	bne.n	80070ba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2210      	movs	r2, #16
 80070b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fa82 	bl	80065cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070c8:	e00b      	b.n	80070e2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fa fa52 	bl	8001574 <HAL_UART_RxCpltCallback>
}
 80070d0:	e007      	b.n	80070e2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699a      	ldr	r2, [r3, #24]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f042 0208 	orr.w	r2, r2, #8
 80070e0:	619a      	str	r2, [r3, #24]
}
 80070e2:	bf00      	nop
 80070e4:	3758      	adds	r7, #88	; 0x58
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b096      	sub	sp, #88	; 0x58
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007100:	2b22      	cmp	r3, #34	; 0x22
 8007102:	f040 8094 	bne.w	800722e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800710c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007116:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800711a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800711e:	4013      	ands	r3, r2
 8007120:	b29a      	uxth	r2, r3
 8007122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007124:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	1c9a      	adds	r2, r3, #2
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d177      	bne.n	800723e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716c:	643b      	str	r3, [r7, #64]	; 0x40
 800716e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e6      	bne.n	800714e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f023 0301 	bic.w	r3, r3, #1
 8007196:	64bb      	str	r3, [r7, #72]	; 0x48
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3308      	adds	r3, #8
 800719e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e5      	bne.n	8007180 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d12e      	bne.n	8007226 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	60bb      	str	r3, [r7, #8]
   return(result);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f023 0310 	bic.w	r3, r3, #16
 80071e2:	647b      	str	r3, [r7, #68]	; 0x44
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6979      	ldr	r1, [r7, #20]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	613b      	str	r3, [r7, #16]
   return(result);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e6      	bne.n	80071ce <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b10      	cmp	r3, #16
 800720c:	d103      	bne.n	8007216 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2210      	movs	r2, #16
 8007214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff f9d4 	bl	80065cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007224:	e00b      	b.n	800723e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fa f9a4 	bl	8001574 <HAL_UART_RxCpltCallback>
}
 800722c:	e007      	b.n	800723e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0208 	orr.w	r2, r2, #8
 800723c:	619a      	str	r2, [r3, #24]
}
 800723e:	bf00      	nop
 8007240:	3758      	adds	r7, #88	; 0x58
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <atoi>:
 800725a:	220a      	movs	r2, #10
 800725c:	2100      	movs	r1, #0
 800725e:	f000 be09 	b.w	8007e74 <strtol>
	...

08007264 <__errno>:
 8007264:	4b01      	ldr	r3, [pc, #4]	; (800726c <__errno+0x8>)
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20000070 	.word	0x20000070

08007270 <__libc_init_array>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	4d0d      	ldr	r5, [pc, #52]	; (80072a8 <__libc_init_array+0x38>)
 8007274:	4c0d      	ldr	r4, [pc, #52]	; (80072ac <__libc_init_array+0x3c>)
 8007276:	1b64      	subs	r4, r4, r5
 8007278:	10a4      	asrs	r4, r4, #2
 800727a:	2600      	movs	r6, #0
 800727c:	42a6      	cmp	r6, r4
 800727e:	d109      	bne.n	8007294 <__libc_init_array+0x24>
 8007280:	4d0b      	ldr	r5, [pc, #44]	; (80072b0 <__libc_init_array+0x40>)
 8007282:	4c0c      	ldr	r4, [pc, #48]	; (80072b4 <__libc_init_array+0x44>)
 8007284:	f002 feae 	bl	8009fe4 <_init>
 8007288:	1b64      	subs	r4, r4, r5
 800728a:	10a4      	asrs	r4, r4, #2
 800728c:	2600      	movs	r6, #0
 800728e:	42a6      	cmp	r6, r4
 8007290:	d105      	bne.n	800729e <__libc_init_array+0x2e>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	f855 3b04 	ldr.w	r3, [r5], #4
 8007298:	4798      	blx	r3
 800729a:	3601      	adds	r6, #1
 800729c:	e7ee      	b.n	800727c <__libc_init_array+0xc>
 800729e:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a2:	4798      	blx	r3
 80072a4:	3601      	adds	r6, #1
 80072a6:	e7f2      	b.n	800728e <__libc_init_array+0x1e>
 80072a8:	0800a8e0 	.word	0x0800a8e0
 80072ac:	0800a8e0 	.word	0x0800a8e0
 80072b0:	0800a8e0 	.word	0x0800a8e0
 80072b4:	0800a8e4 	.word	0x0800a8e4

080072b8 <memset>:
 80072b8:	4402      	add	r2, r0
 80072ba:	4603      	mov	r3, r0
 80072bc:	4293      	cmp	r3, r2
 80072be:	d100      	bne.n	80072c2 <memset+0xa>
 80072c0:	4770      	bx	lr
 80072c2:	f803 1b01 	strb.w	r1, [r3], #1
 80072c6:	e7f9      	b.n	80072bc <memset+0x4>

080072c8 <__cvt>:
 80072c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072cc:	ec55 4b10 	vmov	r4, r5, d0
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	460e      	mov	r6, r1
 80072d4:	4619      	mov	r1, r3
 80072d6:	462b      	mov	r3, r5
 80072d8:	bfbb      	ittet	lt
 80072da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072de:	461d      	movlt	r5, r3
 80072e0:	2300      	movge	r3, #0
 80072e2:	232d      	movlt	r3, #45	; 0x2d
 80072e4:	700b      	strb	r3, [r1, #0]
 80072e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072ec:	4691      	mov	r9, r2
 80072ee:	f023 0820 	bic.w	r8, r3, #32
 80072f2:	bfbc      	itt	lt
 80072f4:	4622      	movlt	r2, r4
 80072f6:	4614      	movlt	r4, r2
 80072f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072fc:	d005      	beq.n	800730a <__cvt+0x42>
 80072fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007302:	d100      	bne.n	8007306 <__cvt+0x3e>
 8007304:	3601      	adds	r6, #1
 8007306:	2102      	movs	r1, #2
 8007308:	e000      	b.n	800730c <__cvt+0x44>
 800730a:	2103      	movs	r1, #3
 800730c:	ab03      	add	r3, sp, #12
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	ab02      	add	r3, sp, #8
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	ec45 4b10 	vmov	d0, r4, r5
 8007318:	4653      	mov	r3, sl
 800731a:	4632      	mov	r2, r6
 800731c:	f000 ff20 	bl	8008160 <_dtoa_r>
 8007320:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007324:	4607      	mov	r7, r0
 8007326:	d102      	bne.n	800732e <__cvt+0x66>
 8007328:	f019 0f01 	tst.w	r9, #1
 800732c:	d022      	beq.n	8007374 <__cvt+0xac>
 800732e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007332:	eb07 0906 	add.w	r9, r7, r6
 8007336:	d110      	bne.n	800735a <__cvt+0x92>
 8007338:	783b      	ldrb	r3, [r7, #0]
 800733a:	2b30      	cmp	r3, #48	; 0x30
 800733c:	d10a      	bne.n	8007354 <__cvt+0x8c>
 800733e:	2200      	movs	r2, #0
 8007340:	2300      	movs	r3, #0
 8007342:	4620      	mov	r0, r4
 8007344:	4629      	mov	r1, r5
 8007346:	f7f9 fbd7 	bl	8000af8 <__aeabi_dcmpeq>
 800734a:	b918      	cbnz	r0, 8007354 <__cvt+0x8c>
 800734c:	f1c6 0601 	rsb	r6, r6, #1
 8007350:	f8ca 6000 	str.w	r6, [sl]
 8007354:	f8da 3000 	ldr.w	r3, [sl]
 8007358:	4499      	add	r9, r3
 800735a:	2200      	movs	r2, #0
 800735c:	2300      	movs	r3, #0
 800735e:	4620      	mov	r0, r4
 8007360:	4629      	mov	r1, r5
 8007362:	f7f9 fbc9 	bl	8000af8 <__aeabi_dcmpeq>
 8007366:	b108      	cbz	r0, 800736c <__cvt+0xa4>
 8007368:	f8cd 900c 	str.w	r9, [sp, #12]
 800736c:	2230      	movs	r2, #48	; 0x30
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	454b      	cmp	r3, r9
 8007372:	d307      	bcc.n	8007384 <__cvt+0xbc>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007378:	1bdb      	subs	r3, r3, r7
 800737a:	4638      	mov	r0, r7
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	b004      	add	sp, #16
 8007380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007384:	1c59      	adds	r1, r3, #1
 8007386:	9103      	str	r1, [sp, #12]
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	e7f0      	b.n	800736e <__cvt+0xa6>

0800738c <__exponent>:
 800738c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800738e:	4603      	mov	r3, r0
 8007390:	2900      	cmp	r1, #0
 8007392:	bfb8      	it	lt
 8007394:	4249      	neglt	r1, r1
 8007396:	f803 2b02 	strb.w	r2, [r3], #2
 800739a:	bfb4      	ite	lt
 800739c:	222d      	movlt	r2, #45	; 0x2d
 800739e:	222b      	movge	r2, #43	; 0x2b
 80073a0:	2909      	cmp	r1, #9
 80073a2:	7042      	strb	r2, [r0, #1]
 80073a4:	dd2a      	ble.n	80073fc <__exponent+0x70>
 80073a6:	f10d 0407 	add.w	r4, sp, #7
 80073aa:	46a4      	mov	ip, r4
 80073ac:	270a      	movs	r7, #10
 80073ae:	46a6      	mov	lr, r4
 80073b0:	460a      	mov	r2, r1
 80073b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80073b6:	fb07 1516 	mls	r5, r7, r6, r1
 80073ba:	3530      	adds	r5, #48	; 0x30
 80073bc:	2a63      	cmp	r2, #99	; 0x63
 80073be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80073c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073c6:	4631      	mov	r1, r6
 80073c8:	dcf1      	bgt.n	80073ae <__exponent+0x22>
 80073ca:	3130      	adds	r1, #48	; 0x30
 80073cc:	f1ae 0502 	sub.w	r5, lr, #2
 80073d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073d4:	1c44      	adds	r4, r0, #1
 80073d6:	4629      	mov	r1, r5
 80073d8:	4561      	cmp	r1, ip
 80073da:	d30a      	bcc.n	80073f2 <__exponent+0x66>
 80073dc:	f10d 0209 	add.w	r2, sp, #9
 80073e0:	eba2 020e 	sub.w	r2, r2, lr
 80073e4:	4565      	cmp	r5, ip
 80073e6:	bf88      	it	hi
 80073e8:	2200      	movhi	r2, #0
 80073ea:	4413      	add	r3, r2
 80073ec:	1a18      	subs	r0, r3, r0
 80073ee:	b003      	add	sp, #12
 80073f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073fa:	e7ed      	b.n	80073d8 <__exponent+0x4c>
 80073fc:	2330      	movs	r3, #48	; 0x30
 80073fe:	3130      	adds	r1, #48	; 0x30
 8007400:	7083      	strb	r3, [r0, #2]
 8007402:	70c1      	strb	r1, [r0, #3]
 8007404:	1d03      	adds	r3, r0, #4
 8007406:	e7f1      	b.n	80073ec <__exponent+0x60>

08007408 <_printf_float>:
 8007408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	ed2d 8b02 	vpush	{d8}
 8007410:	b08d      	sub	sp, #52	; 0x34
 8007412:	460c      	mov	r4, r1
 8007414:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007418:	4616      	mov	r6, r2
 800741a:	461f      	mov	r7, r3
 800741c:	4605      	mov	r5, r0
 800741e:	f001 fe57 	bl	80090d0 <_localeconv_r>
 8007422:	f8d0 a000 	ldr.w	sl, [r0]
 8007426:	4650      	mov	r0, sl
 8007428:	f7f8 fee4 	bl	80001f4 <strlen>
 800742c:	2300      	movs	r3, #0
 800742e:	930a      	str	r3, [sp, #40]	; 0x28
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	f8d8 3000 	ldr.w	r3, [r8]
 8007438:	f894 b018 	ldrb.w	fp, [r4, #24]
 800743c:	3307      	adds	r3, #7
 800743e:	f023 0307 	bic.w	r3, r3, #7
 8007442:	f103 0208 	add.w	r2, r3, #8
 8007446:	f8c8 2000 	str.w	r2, [r8]
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007452:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007456:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800745a:	9307      	str	r3, [sp, #28]
 800745c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007460:	ee08 0a10 	vmov	s16, r0
 8007464:	4b9f      	ldr	r3, [pc, #636]	; (80076e4 <_printf_float+0x2dc>)
 8007466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800746a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800746e:	f7f9 fb75 	bl	8000b5c <__aeabi_dcmpun>
 8007472:	bb88      	cbnz	r0, 80074d8 <_printf_float+0xd0>
 8007474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007478:	4b9a      	ldr	r3, [pc, #616]	; (80076e4 <_printf_float+0x2dc>)
 800747a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800747e:	f7f9 fb4f 	bl	8000b20 <__aeabi_dcmple>
 8007482:	bb48      	cbnz	r0, 80074d8 <_printf_float+0xd0>
 8007484:	2200      	movs	r2, #0
 8007486:	2300      	movs	r3, #0
 8007488:	4640      	mov	r0, r8
 800748a:	4649      	mov	r1, r9
 800748c:	f7f9 fb3e 	bl	8000b0c <__aeabi_dcmplt>
 8007490:	b110      	cbz	r0, 8007498 <_printf_float+0x90>
 8007492:	232d      	movs	r3, #45	; 0x2d
 8007494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007498:	4b93      	ldr	r3, [pc, #588]	; (80076e8 <_printf_float+0x2e0>)
 800749a:	4894      	ldr	r0, [pc, #592]	; (80076ec <_printf_float+0x2e4>)
 800749c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074a0:	bf94      	ite	ls
 80074a2:	4698      	movls	r8, r3
 80074a4:	4680      	movhi	r8, r0
 80074a6:	2303      	movs	r3, #3
 80074a8:	6123      	str	r3, [r4, #16]
 80074aa:	9b05      	ldr	r3, [sp, #20]
 80074ac:	f023 0204 	bic.w	r2, r3, #4
 80074b0:	6022      	str	r2, [r4, #0]
 80074b2:	f04f 0900 	mov.w	r9, #0
 80074b6:	9700      	str	r7, [sp, #0]
 80074b8:	4633      	mov	r3, r6
 80074ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80074bc:	4621      	mov	r1, r4
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 f9d8 	bl	8007874 <_printf_common>
 80074c4:	3001      	adds	r0, #1
 80074c6:	f040 8090 	bne.w	80075ea <_printf_float+0x1e2>
 80074ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074ce:	b00d      	add	sp, #52	; 0x34
 80074d0:	ecbd 8b02 	vpop	{d8}
 80074d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d8:	4642      	mov	r2, r8
 80074da:	464b      	mov	r3, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	4649      	mov	r1, r9
 80074e0:	f7f9 fb3c 	bl	8000b5c <__aeabi_dcmpun>
 80074e4:	b140      	cbz	r0, 80074f8 <_printf_float+0xf0>
 80074e6:	464b      	mov	r3, r9
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bfbc      	itt	lt
 80074ec:	232d      	movlt	r3, #45	; 0x2d
 80074ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074f2:	487f      	ldr	r0, [pc, #508]	; (80076f0 <_printf_float+0x2e8>)
 80074f4:	4b7f      	ldr	r3, [pc, #508]	; (80076f4 <_printf_float+0x2ec>)
 80074f6:	e7d1      	b.n	800749c <_printf_float+0x94>
 80074f8:	6863      	ldr	r3, [r4, #4]
 80074fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074fe:	9206      	str	r2, [sp, #24]
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	d13f      	bne.n	8007584 <_printf_float+0x17c>
 8007504:	2306      	movs	r3, #6
 8007506:	6063      	str	r3, [r4, #4]
 8007508:	9b05      	ldr	r3, [sp, #20]
 800750a:	6861      	ldr	r1, [r4, #4]
 800750c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007510:	2300      	movs	r3, #0
 8007512:	9303      	str	r3, [sp, #12]
 8007514:	ab0a      	add	r3, sp, #40	; 0x28
 8007516:	e9cd b301 	strd	fp, r3, [sp, #4]
 800751a:	ab09      	add	r3, sp, #36	; 0x24
 800751c:	ec49 8b10 	vmov	d0, r8, r9
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	6022      	str	r2, [r4, #0]
 8007524:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007528:	4628      	mov	r0, r5
 800752a:	f7ff fecd 	bl	80072c8 <__cvt>
 800752e:	9b06      	ldr	r3, [sp, #24]
 8007530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007532:	2b47      	cmp	r3, #71	; 0x47
 8007534:	4680      	mov	r8, r0
 8007536:	d108      	bne.n	800754a <_printf_float+0x142>
 8007538:	1cc8      	adds	r0, r1, #3
 800753a:	db02      	blt.n	8007542 <_printf_float+0x13a>
 800753c:	6863      	ldr	r3, [r4, #4]
 800753e:	4299      	cmp	r1, r3
 8007540:	dd41      	ble.n	80075c6 <_printf_float+0x1be>
 8007542:	f1ab 0b02 	sub.w	fp, fp, #2
 8007546:	fa5f fb8b 	uxtb.w	fp, fp
 800754a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800754e:	d820      	bhi.n	8007592 <_printf_float+0x18a>
 8007550:	3901      	subs	r1, #1
 8007552:	465a      	mov	r2, fp
 8007554:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007558:	9109      	str	r1, [sp, #36]	; 0x24
 800755a:	f7ff ff17 	bl	800738c <__exponent>
 800755e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007560:	1813      	adds	r3, r2, r0
 8007562:	2a01      	cmp	r2, #1
 8007564:	4681      	mov	r9, r0
 8007566:	6123      	str	r3, [r4, #16]
 8007568:	dc02      	bgt.n	8007570 <_printf_float+0x168>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	07d2      	lsls	r2, r2, #31
 800756e:	d501      	bpl.n	8007574 <_printf_float+0x16c>
 8007570:	3301      	adds	r3, #1
 8007572:	6123      	str	r3, [r4, #16]
 8007574:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007578:	2b00      	cmp	r3, #0
 800757a:	d09c      	beq.n	80074b6 <_printf_float+0xae>
 800757c:	232d      	movs	r3, #45	; 0x2d
 800757e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007582:	e798      	b.n	80074b6 <_printf_float+0xae>
 8007584:	9a06      	ldr	r2, [sp, #24]
 8007586:	2a47      	cmp	r2, #71	; 0x47
 8007588:	d1be      	bne.n	8007508 <_printf_float+0x100>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1bc      	bne.n	8007508 <_printf_float+0x100>
 800758e:	2301      	movs	r3, #1
 8007590:	e7b9      	b.n	8007506 <_printf_float+0xfe>
 8007592:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007596:	d118      	bne.n	80075ca <_printf_float+0x1c2>
 8007598:	2900      	cmp	r1, #0
 800759a:	6863      	ldr	r3, [r4, #4]
 800759c:	dd0b      	ble.n	80075b6 <_printf_float+0x1ae>
 800759e:	6121      	str	r1, [r4, #16]
 80075a0:	b913      	cbnz	r3, 80075a8 <_printf_float+0x1a0>
 80075a2:	6822      	ldr	r2, [r4, #0]
 80075a4:	07d0      	lsls	r0, r2, #31
 80075a6:	d502      	bpl.n	80075ae <_printf_float+0x1a6>
 80075a8:	3301      	adds	r3, #1
 80075aa:	440b      	add	r3, r1
 80075ac:	6123      	str	r3, [r4, #16]
 80075ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80075b0:	f04f 0900 	mov.w	r9, #0
 80075b4:	e7de      	b.n	8007574 <_printf_float+0x16c>
 80075b6:	b913      	cbnz	r3, 80075be <_printf_float+0x1b6>
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	07d2      	lsls	r2, r2, #31
 80075bc:	d501      	bpl.n	80075c2 <_printf_float+0x1ba>
 80075be:	3302      	adds	r3, #2
 80075c0:	e7f4      	b.n	80075ac <_printf_float+0x1a4>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e7f2      	b.n	80075ac <_printf_float+0x1a4>
 80075c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075cc:	4299      	cmp	r1, r3
 80075ce:	db05      	blt.n	80075dc <_printf_float+0x1d4>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	6121      	str	r1, [r4, #16]
 80075d4:	07d8      	lsls	r0, r3, #31
 80075d6:	d5ea      	bpl.n	80075ae <_printf_float+0x1a6>
 80075d8:	1c4b      	adds	r3, r1, #1
 80075da:	e7e7      	b.n	80075ac <_printf_float+0x1a4>
 80075dc:	2900      	cmp	r1, #0
 80075de:	bfd4      	ite	le
 80075e0:	f1c1 0202 	rsble	r2, r1, #2
 80075e4:	2201      	movgt	r2, #1
 80075e6:	4413      	add	r3, r2
 80075e8:	e7e0      	b.n	80075ac <_printf_float+0x1a4>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	055a      	lsls	r2, r3, #21
 80075ee:	d407      	bmi.n	8007600 <_printf_float+0x1f8>
 80075f0:	6923      	ldr	r3, [r4, #16]
 80075f2:	4642      	mov	r2, r8
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	d12c      	bne.n	8007658 <_printf_float+0x250>
 80075fe:	e764      	b.n	80074ca <_printf_float+0xc2>
 8007600:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007604:	f240 80e0 	bls.w	80077c8 <_printf_float+0x3c0>
 8007608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800760c:	2200      	movs	r2, #0
 800760e:	2300      	movs	r3, #0
 8007610:	f7f9 fa72 	bl	8000af8 <__aeabi_dcmpeq>
 8007614:	2800      	cmp	r0, #0
 8007616:	d034      	beq.n	8007682 <_printf_float+0x27a>
 8007618:	4a37      	ldr	r2, [pc, #220]	; (80076f8 <_printf_float+0x2f0>)
 800761a:	2301      	movs	r3, #1
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f43f af51 	beq.w	80074ca <_printf_float+0xc2>
 8007628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800762c:	429a      	cmp	r2, r3
 800762e:	db02      	blt.n	8007636 <_printf_float+0x22e>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	07d8      	lsls	r0, r3, #31
 8007634:	d510      	bpl.n	8007658 <_printf_float+0x250>
 8007636:	ee18 3a10 	vmov	r3, s16
 800763a:	4652      	mov	r2, sl
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f af41 	beq.w	80074ca <_printf_float+0xc2>
 8007648:	f04f 0800 	mov.w	r8, #0
 800764c:	f104 091a 	add.w	r9, r4, #26
 8007650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007652:	3b01      	subs	r3, #1
 8007654:	4543      	cmp	r3, r8
 8007656:	dc09      	bgt.n	800766c <_printf_float+0x264>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	079b      	lsls	r3, r3, #30
 800765c:	f100 8105 	bmi.w	800786a <_printf_float+0x462>
 8007660:	68e0      	ldr	r0, [r4, #12]
 8007662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007664:	4298      	cmp	r0, r3
 8007666:	bfb8      	it	lt
 8007668:	4618      	movlt	r0, r3
 800766a:	e730      	b.n	80074ce <_printf_float+0xc6>
 800766c:	2301      	movs	r3, #1
 800766e:	464a      	mov	r2, r9
 8007670:	4631      	mov	r1, r6
 8007672:	4628      	mov	r0, r5
 8007674:	47b8      	blx	r7
 8007676:	3001      	adds	r0, #1
 8007678:	f43f af27 	beq.w	80074ca <_printf_float+0xc2>
 800767c:	f108 0801 	add.w	r8, r8, #1
 8007680:	e7e6      	b.n	8007650 <_printf_float+0x248>
 8007682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc39      	bgt.n	80076fc <_printf_float+0x2f4>
 8007688:	4a1b      	ldr	r2, [pc, #108]	; (80076f8 <_printf_float+0x2f0>)
 800768a:	2301      	movs	r3, #1
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	f43f af19 	beq.w	80074ca <_printf_float+0xc2>
 8007698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800769c:	4313      	orrs	r3, r2
 800769e:	d102      	bne.n	80076a6 <_printf_float+0x29e>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	07d9      	lsls	r1, r3, #31
 80076a4:	d5d8      	bpl.n	8007658 <_printf_float+0x250>
 80076a6:	ee18 3a10 	vmov	r3, s16
 80076aa:	4652      	mov	r2, sl
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	f43f af09 	beq.w	80074ca <_printf_float+0xc2>
 80076b8:	f04f 0900 	mov.w	r9, #0
 80076bc:	f104 0a1a 	add.w	sl, r4, #26
 80076c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c2:	425b      	negs	r3, r3
 80076c4:	454b      	cmp	r3, r9
 80076c6:	dc01      	bgt.n	80076cc <_printf_float+0x2c4>
 80076c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ca:	e792      	b.n	80075f2 <_printf_float+0x1ea>
 80076cc:	2301      	movs	r3, #1
 80076ce:	4652      	mov	r2, sl
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f aef7 	beq.w	80074ca <_printf_float+0xc2>
 80076dc:	f109 0901 	add.w	r9, r9, #1
 80076e0:	e7ee      	b.n	80076c0 <_printf_float+0x2b8>
 80076e2:	bf00      	nop
 80076e4:	7fefffff 	.word	0x7fefffff
 80076e8:	0800a4a8 	.word	0x0800a4a8
 80076ec:	0800a4ac 	.word	0x0800a4ac
 80076f0:	0800a4b4 	.word	0x0800a4b4
 80076f4:	0800a4b0 	.word	0x0800a4b0
 80076f8:	0800a4b8 	.word	0x0800a4b8
 80076fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007700:	429a      	cmp	r2, r3
 8007702:	bfa8      	it	ge
 8007704:	461a      	movge	r2, r3
 8007706:	2a00      	cmp	r2, #0
 8007708:	4691      	mov	r9, r2
 800770a:	dc37      	bgt.n	800777c <_printf_float+0x374>
 800770c:	f04f 0b00 	mov.w	fp, #0
 8007710:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007714:	f104 021a 	add.w	r2, r4, #26
 8007718:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	eba3 0309 	sub.w	r3, r3, r9
 8007720:	455b      	cmp	r3, fp
 8007722:	dc33      	bgt.n	800778c <_printf_float+0x384>
 8007724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007728:	429a      	cmp	r2, r3
 800772a:	db3b      	blt.n	80077a4 <_printf_float+0x39c>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	07da      	lsls	r2, r3, #31
 8007730:	d438      	bmi.n	80077a4 <_printf_float+0x39c>
 8007732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007734:	9a05      	ldr	r2, [sp, #20]
 8007736:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007738:	1a9a      	subs	r2, r3, r2
 800773a:	eba3 0901 	sub.w	r9, r3, r1
 800773e:	4591      	cmp	r9, r2
 8007740:	bfa8      	it	ge
 8007742:	4691      	movge	r9, r2
 8007744:	f1b9 0f00 	cmp.w	r9, #0
 8007748:	dc35      	bgt.n	80077b6 <_printf_float+0x3ae>
 800774a:	f04f 0800 	mov.w	r8, #0
 800774e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007752:	f104 0a1a 	add.w	sl, r4, #26
 8007756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	eba3 0309 	sub.w	r3, r3, r9
 8007760:	4543      	cmp	r3, r8
 8007762:	f77f af79 	ble.w	8007658 <_printf_float+0x250>
 8007766:	2301      	movs	r3, #1
 8007768:	4652      	mov	r2, sl
 800776a:	4631      	mov	r1, r6
 800776c:	4628      	mov	r0, r5
 800776e:	47b8      	blx	r7
 8007770:	3001      	adds	r0, #1
 8007772:	f43f aeaa 	beq.w	80074ca <_printf_float+0xc2>
 8007776:	f108 0801 	add.w	r8, r8, #1
 800777a:	e7ec      	b.n	8007756 <_printf_float+0x34e>
 800777c:	4613      	mov	r3, r2
 800777e:	4631      	mov	r1, r6
 8007780:	4642      	mov	r2, r8
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	d1c0      	bne.n	800770c <_printf_float+0x304>
 800778a:	e69e      	b.n	80074ca <_printf_float+0xc2>
 800778c:	2301      	movs	r3, #1
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	9205      	str	r2, [sp, #20]
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	f43f ae97 	beq.w	80074ca <_printf_float+0xc2>
 800779c:	9a05      	ldr	r2, [sp, #20]
 800779e:	f10b 0b01 	add.w	fp, fp, #1
 80077a2:	e7b9      	b.n	8007718 <_printf_float+0x310>
 80077a4:	ee18 3a10 	vmov	r3, s16
 80077a8:	4652      	mov	r2, sl
 80077aa:	4631      	mov	r1, r6
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	d1be      	bne.n	8007732 <_printf_float+0x32a>
 80077b4:	e689      	b.n	80074ca <_printf_float+0xc2>
 80077b6:	9a05      	ldr	r2, [sp, #20]
 80077b8:	464b      	mov	r3, r9
 80077ba:	4442      	add	r2, r8
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	d1c1      	bne.n	800774a <_printf_float+0x342>
 80077c6:	e680      	b.n	80074ca <_printf_float+0xc2>
 80077c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ca:	2a01      	cmp	r2, #1
 80077cc:	dc01      	bgt.n	80077d2 <_printf_float+0x3ca>
 80077ce:	07db      	lsls	r3, r3, #31
 80077d0:	d538      	bpl.n	8007844 <_printf_float+0x43c>
 80077d2:	2301      	movs	r3, #1
 80077d4:	4642      	mov	r2, r8
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f ae74 	beq.w	80074ca <_printf_float+0xc2>
 80077e2:	ee18 3a10 	vmov	r3, s16
 80077e6:	4652      	mov	r2, sl
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f ae6b 	beq.w	80074ca <_printf_float+0xc2>
 80077f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077f8:	2200      	movs	r2, #0
 80077fa:	2300      	movs	r3, #0
 80077fc:	f7f9 f97c 	bl	8000af8 <__aeabi_dcmpeq>
 8007800:	b9d8      	cbnz	r0, 800783a <_printf_float+0x432>
 8007802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007804:	f108 0201 	add.w	r2, r8, #1
 8007808:	3b01      	subs	r3, #1
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	d10e      	bne.n	8007832 <_printf_float+0x42a>
 8007814:	e659      	b.n	80074ca <_printf_float+0xc2>
 8007816:	2301      	movs	r3, #1
 8007818:	4652      	mov	r2, sl
 800781a:	4631      	mov	r1, r6
 800781c:	4628      	mov	r0, r5
 800781e:	47b8      	blx	r7
 8007820:	3001      	adds	r0, #1
 8007822:	f43f ae52 	beq.w	80074ca <_printf_float+0xc2>
 8007826:	f108 0801 	add.w	r8, r8, #1
 800782a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782c:	3b01      	subs	r3, #1
 800782e:	4543      	cmp	r3, r8
 8007830:	dcf1      	bgt.n	8007816 <_printf_float+0x40e>
 8007832:	464b      	mov	r3, r9
 8007834:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007838:	e6dc      	b.n	80075f4 <_printf_float+0x1ec>
 800783a:	f04f 0800 	mov.w	r8, #0
 800783e:	f104 0a1a 	add.w	sl, r4, #26
 8007842:	e7f2      	b.n	800782a <_printf_float+0x422>
 8007844:	2301      	movs	r3, #1
 8007846:	4642      	mov	r2, r8
 8007848:	e7df      	b.n	800780a <_printf_float+0x402>
 800784a:	2301      	movs	r3, #1
 800784c:	464a      	mov	r2, r9
 800784e:	4631      	mov	r1, r6
 8007850:	4628      	mov	r0, r5
 8007852:	47b8      	blx	r7
 8007854:	3001      	adds	r0, #1
 8007856:	f43f ae38 	beq.w	80074ca <_printf_float+0xc2>
 800785a:	f108 0801 	add.w	r8, r8, #1
 800785e:	68e3      	ldr	r3, [r4, #12]
 8007860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007862:	1a5b      	subs	r3, r3, r1
 8007864:	4543      	cmp	r3, r8
 8007866:	dcf0      	bgt.n	800784a <_printf_float+0x442>
 8007868:	e6fa      	b.n	8007660 <_printf_float+0x258>
 800786a:	f04f 0800 	mov.w	r8, #0
 800786e:	f104 0919 	add.w	r9, r4, #25
 8007872:	e7f4      	b.n	800785e <_printf_float+0x456>

08007874 <_printf_common>:
 8007874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007878:	4616      	mov	r6, r2
 800787a:	4699      	mov	r9, r3
 800787c:	688a      	ldr	r2, [r1, #8]
 800787e:	690b      	ldr	r3, [r1, #16]
 8007880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007884:	4293      	cmp	r3, r2
 8007886:	bfb8      	it	lt
 8007888:	4613      	movlt	r3, r2
 800788a:	6033      	str	r3, [r6, #0]
 800788c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007890:	4607      	mov	r7, r0
 8007892:	460c      	mov	r4, r1
 8007894:	b10a      	cbz	r2, 800789a <_printf_common+0x26>
 8007896:	3301      	adds	r3, #1
 8007898:	6033      	str	r3, [r6, #0]
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	0699      	lsls	r1, r3, #26
 800789e:	bf42      	ittt	mi
 80078a0:	6833      	ldrmi	r3, [r6, #0]
 80078a2:	3302      	addmi	r3, #2
 80078a4:	6033      	strmi	r3, [r6, #0]
 80078a6:	6825      	ldr	r5, [r4, #0]
 80078a8:	f015 0506 	ands.w	r5, r5, #6
 80078ac:	d106      	bne.n	80078bc <_printf_common+0x48>
 80078ae:	f104 0a19 	add.w	sl, r4, #25
 80078b2:	68e3      	ldr	r3, [r4, #12]
 80078b4:	6832      	ldr	r2, [r6, #0]
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	dc26      	bgt.n	800790a <_printf_common+0x96>
 80078bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078c0:	1e13      	subs	r3, r2, #0
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	bf18      	it	ne
 80078c6:	2301      	movne	r3, #1
 80078c8:	0692      	lsls	r2, r2, #26
 80078ca:	d42b      	bmi.n	8007924 <_printf_common+0xb0>
 80078cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078d0:	4649      	mov	r1, r9
 80078d2:	4638      	mov	r0, r7
 80078d4:	47c0      	blx	r8
 80078d6:	3001      	adds	r0, #1
 80078d8:	d01e      	beq.n	8007918 <_printf_common+0xa4>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	68e5      	ldr	r5, [r4, #12]
 80078de:	6832      	ldr	r2, [r6, #0]
 80078e0:	f003 0306 	and.w	r3, r3, #6
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	bf08      	it	eq
 80078e8:	1aad      	subeq	r5, r5, r2
 80078ea:	68a3      	ldr	r3, [r4, #8]
 80078ec:	6922      	ldr	r2, [r4, #16]
 80078ee:	bf0c      	ite	eq
 80078f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f4:	2500      	movne	r5, #0
 80078f6:	4293      	cmp	r3, r2
 80078f8:	bfc4      	itt	gt
 80078fa:	1a9b      	subgt	r3, r3, r2
 80078fc:	18ed      	addgt	r5, r5, r3
 80078fe:	2600      	movs	r6, #0
 8007900:	341a      	adds	r4, #26
 8007902:	42b5      	cmp	r5, r6
 8007904:	d11a      	bne.n	800793c <_printf_common+0xc8>
 8007906:	2000      	movs	r0, #0
 8007908:	e008      	b.n	800791c <_printf_common+0xa8>
 800790a:	2301      	movs	r3, #1
 800790c:	4652      	mov	r2, sl
 800790e:	4649      	mov	r1, r9
 8007910:	4638      	mov	r0, r7
 8007912:	47c0      	blx	r8
 8007914:	3001      	adds	r0, #1
 8007916:	d103      	bne.n	8007920 <_printf_common+0xac>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800791c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007920:	3501      	adds	r5, #1
 8007922:	e7c6      	b.n	80078b2 <_printf_common+0x3e>
 8007924:	18e1      	adds	r1, r4, r3
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	2030      	movs	r0, #48	; 0x30
 800792a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800792e:	4422      	add	r2, r4
 8007930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007938:	3302      	adds	r3, #2
 800793a:	e7c7      	b.n	80078cc <_printf_common+0x58>
 800793c:	2301      	movs	r3, #1
 800793e:	4622      	mov	r2, r4
 8007940:	4649      	mov	r1, r9
 8007942:	4638      	mov	r0, r7
 8007944:	47c0      	blx	r8
 8007946:	3001      	adds	r0, #1
 8007948:	d0e6      	beq.n	8007918 <_printf_common+0xa4>
 800794a:	3601      	adds	r6, #1
 800794c:	e7d9      	b.n	8007902 <_printf_common+0x8e>
	...

08007950 <_printf_i>:
 8007950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	7e0f      	ldrb	r7, [r1, #24]
 8007956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007958:	2f78      	cmp	r7, #120	; 0x78
 800795a:	4691      	mov	r9, r2
 800795c:	4680      	mov	r8, r0
 800795e:	460c      	mov	r4, r1
 8007960:	469a      	mov	sl, r3
 8007962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007966:	d807      	bhi.n	8007978 <_printf_i+0x28>
 8007968:	2f62      	cmp	r7, #98	; 0x62
 800796a:	d80a      	bhi.n	8007982 <_printf_i+0x32>
 800796c:	2f00      	cmp	r7, #0
 800796e:	f000 80d8 	beq.w	8007b22 <_printf_i+0x1d2>
 8007972:	2f58      	cmp	r7, #88	; 0x58
 8007974:	f000 80a3 	beq.w	8007abe <_printf_i+0x16e>
 8007978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800797c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007980:	e03a      	b.n	80079f8 <_printf_i+0xa8>
 8007982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007986:	2b15      	cmp	r3, #21
 8007988:	d8f6      	bhi.n	8007978 <_printf_i+0x28>
 800798a:	a101      	add	r1, pc, #4	; (adr r1, 8007990 <_printf_i+0x40>)
 800798c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007990:	080079e9 	.word	0x080079e9
 8007994:	080079fd 	.word	0x080079fd
 8007998:	08007979 	.word	0x08007979
 800799c:	08007979 	.word	0x08007979
 80079a0:	08007979 	.word	0x08007979
 80079a4:	08007979 	.word	0x08007979
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	08007979 	.word	0x08007979
 80079b0:	08007979 	.word	0x08007979
 80079b4:	08007979 	.word	0x08007979
 80079b8:	08007979 	.word	0x08007979
 80079bc:	08007b09 	.word	0x08007b09
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007aeb 	.word	0x08007aeb
 80079c8:	08007979 	.word	0x08007979
 80079cc:	08007979 	.word	0x08007979
 80079d0:	08007b2b 	.word	0x08007b2b
 80079d4:	08007979 	.word	0x08007979
 80079d8:	08007a2d 	.word	0x08007a2d
 80079dc:	08007979 	.word	0x08007979
 80079e0:	08007979 	.word	0x08007979
 80079e4:	08007af3 	.word	0x08007af3
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	1d1a      	adds	r2, r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	602a      	str	r2, [r5, #0]
 80079f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0a3      	b.n	8007b44 <_printf_i+0x1f4>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	6829      	ldr	r1, [r5, #0]
 8007a00:	0606      	lsls	r6, r0, #24
 8007a02:	f101 0304 	add.w	r3, r1, #4
 8007a06:	d50a      	bpl.n	8007a1e <_printf_i+0xce>
 8007a08:	680e      	ldr	r6, [r1, #0]
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	2e00      	cmp	r6, #0
 8007a0e:	da03      	bge.n	8007a18 <_printf_i+0xc8>
 8007a10:	232d      	movs	r3, #45	; 0x2d
 8007a12:	4276      	negs	r6, r6
 8007a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a18:	485e      	ldr	r0, [pc, #376]	; (8007b94 <_printf_i+0x244>)
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	e019      	b.n	8007a52 <_printf_i+0x102>
 8007a1e:	680e      	ldr	r6, [r1, #0]
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a26:	bf18      	it	ne
 8007a28:	b236      	sxthne	r6, r6
 8007a2a:	e7ef      	b.n	8007a0c <_printf_i+0xbc>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	6820      	ldr	r0, [r4, #0]
 8007a30:	1d19      	adds	r1, r3, #4
 8007a32:	6029      	str	r1, [r5, #0]
 8007a34:	0601      	lsls	r1, r0, #24
 8007a36:	d501      	bpl.n	8007a3c <_printf_i+0xec>
 8007a38:	681e      	ldr	r6, [r3, #0]
 8007a3a:	e002      	b.n	8007a42 <_printf_i+0xf2>
 8007a3c:	0646      	lsls	r6, r0, #25
 8007a3e:	d5fb      	bpl.n	8007a38 <_printf_i+0xe8>
 8007a40:	881e      	ldrh	r6, [r3, #0]
 8007a42:	4854      	ldr	r0, [pc, #336]	; (8007b94 <_printf_i+0x244>)
 8007a44:	2f6f      	cmp	r7, #111	; 0x6f
 8007a46:	bf0c      	ite	eq
 8007a48:	2308      	moveq	r3, #8
 8007a4a:	230a      	movne	r3, #10
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a52:	6865      	ldr	r5, [r4, #4]
 8007a54:	60a5      	str	r5, [r4, #8]
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	bfa2      	ittt	ge
 8007a5a:	6821      	ldrge	r1, [r4, #0]
 8007a5c:	f021 0104 	bicge.w	r1, r1, #4
 8007a60:	6021      	strge	r1, [r4, #0]
 8007a62:	b90e      	cbnz	r6, 8007a68 <_printf_i+0x118>
 8007a64:	2d00      	cmp	r5, #0
 8007a66:	d04d      	beq.n	8007b04 <_printf_i+0x1b4>
 8007a68:	4615      	mov	r5, r2
 8007a6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a6e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a72:	5dc7      	ldrb	r7, [r0, r7]
 8007a74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a78:	4637      	mov	r7, r6
 8007a7a:	42bb      	cmp	r3, r7
 8007a7c:	460e      	mov	r6, r1
 8007a7e:	d9f4      	bls.n	8007a6a <_printf_i+0x11a>
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d10b      	bne.n	8007a9c <_printf_i+0x14c>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	07de      	lsls	r6, r3, #31
 8007a88:	d508      	bpl.n	8007a9c <_printf_i+0x14c>
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	6861      	ldr	r1, [r4, #4]
 8007a8e:	4299      	cmp	r1, r3
 8007a90:	bfde      	ittt	le
 8007a92:	2330      	movle	r3, #48	; 0x30
 8007a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a9c:	1b52      	subs	r2, r2, r5
 8007a9e:	6122      	str	r2, [r4, #16]
 8007aa0:	f8cd a000 	str.w	sl, [sp]
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	aa03      	add	r2, sp, #12
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4640      	mov	r0, r8
 8007aac:	f7ff fee2 	bl	8007874 <_printf_common>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d14c      	bne.n	8007b4e <_printf_i+0x1fe>
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab8:	b004      	add	sp, #16
 8007aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abe:	4835      	ldr	r0, [pc, #212]	; (8007b94 <_printf_i+0x244>)
 8007ac0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ac4:	6829      	ldr	r1, [r5, #0]
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007acc:	6029      	str	r1, [r5, #0]
 8007ace:	061d      	lsls	r5, r3, #24
 8007ad0:	d514      	bpl.n	8007afc <_printf_i+0x1ac>
 8007ad2:	07df      	lsls	r7, r3, #31
 8007ad4:	bf44      	itt	mi
 8007ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8007ada:	6023      	strmi	r3, [r4, #0]
 8007adc:	b91e      	cbnz	r6, 8007ae6 <_printf_i+0x196>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	f023 0320 	bic.w	r3, r3, #32
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	2310      	movs	r3, #16
 8007ae8:	e7b0      	b.n	8007a4c <_printf_i+0xfc>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	f043 0320 	orr.w	r3, r3, #32
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	2378      	movs	r3, #120	; 0x78
 8007af4:	4828      	ldr	r0, [pc, #160]	; (8007b98 <_printf_i+0x248>)
 8007af6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007afa:	e7e3      	b.n	8007ac4 <_printf_i+0x174>
 8007afc:	0659      	lsls	r1, r3, #25
 8007afe:	bf48      	it	mi
 8007b00:	b2b6      	uxthmi	r6, r6
 8007b02:	e7e6      	b.n	8007ad2 <_printf_i+0x182>
 8007b04:	4615      	mov	r5, r2
 8007b06:	e7bb      	b.n	8007a80 <_printf_i+0x130>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	6826      	ldr	r6, [r4, #0]
 8007b0c:	6961      	ldr	r1, [r4, #20]
 8007b0e:	1d18      	adds	r0, r3, #4
 8007b10:	6028      	str	r0, [r5, #0]
 8007b12:	0635      	lsls	r5, r6, #24
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	d501      	bpl.n	8007b1c <_printf_i+0x1cc>
 8007b18:	6019      	str	r1, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <_printf_i+0x1d2>
 8007b1c:	0670      	lsls	r0, r6, #25
 8007b1e:	d5fb      	bpl.n	8007b18 <_printf_i+0x1c8>
 8007b20:	8019      	strh	r1, [r3, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	4615      	mov	r5, r2
 8007b28:	e7ba      	b.n	8007aa0 <_printf_i+0x150>
 8007b2a:	682b      	ldr	r3, [r5, #0]
 8007b2c:	1d1a      	adds	r2, r3, #4
 8007b2e:	602a      	str	r2, [r5, #0]
 8007b30:	681d      	ldr	r5, [r3, #0]
 8007b32:	6862      	ldr	r2, [r4, #4]
 8007b34:	2100      	movs	r1, #0
 8007b36:	4628      	mov	r0, r5
 8007b38:	f7f8 fb6a 	bl	8000210 <memchr>
 8007b3c:	b108      	cbz	r0, 8007b42 <_printf_i+0x1f2>
 8007b3e:	1b40      	subs	r0, r0, r5
 8007b40:	6060      	str	r0, [r4, #4]
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	2300      	movs	r3, #0
 8007b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b4c:	e7a8      	b.n	8007aa0 <_printf_i+0x150>
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	462a      	mov	r2, r5
 8007b52:	4649      	mov	r1, r9
 8007b54:	4640      	mov	r0, r8
 8007b56:	47d0      	blx	sl
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d0ab      	beq.n	8007ab4 <_printf_i+0x164>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	079b      	lsls	r3, r3, #30
 8007b60:	d413      	bmi.n	8007b8a <_printf_i+0x23a>
 8007b62:	68e0      	ldr	r0, [r4, #12]
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	4298      	cmp	r0, r3
 8007b68:	bfb8      	it	lt
 8007b6a:	4618      	movlt	r0, r3
 8007b6c:	e7a4      	b.n	8007ab8 <_printf_i+0x168>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4632      	mov	r2, r6
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	47d0      	blx	sl
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d09b      	beq.n	8007ab4 <_printf_i+0x164>
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	68e3      	ldr	r3, [r4, #12]
 8007b80:	9903      	ldr	r1, [sp, #12]
 8007b82:	1a5b      	subs	r3, r3, r1
 8007b84:	42ab      	cmp	r3, r5
 8007b86:	dcf2      	bgt.n	8007b6e <_printf_i+0x21e>
 8007b88:	e7eb      	b.n	8007b62 <_printf_i+0x212>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	f104 0619 	add.w	r6, r4, #25
 8007b90:	e7f5      	b.n	8007b7e <_printf_i+0x22e>
 8007b92:	bf00      	nop
 8007b94:	0800a4ba 	.word	0x0800a4ba
 8007b98:	0800a4cb 	.word	0x0800a4cb

08007b9c <iprintf>:
 8007b9c:	b40f      	push	{r0, r1, r2, r3}
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <iprintf+0x2c>)
 8007ba0:	b513      	push	{r0, r1, r4, lr}
 8007ba2:	681c      	ldr	r4, [r3, #0]
 8007ba4:	b124      	cbz	r4, 8007bb0 <iprintf+0x14>
 8007ba6:	69a3      	ldr	r3, [r4, #24]
 8007ba8:	b913      	cbnz	r3, 8007bb0 <iprintf+0x14>
 8007baa:	4620      	mov	r0, r4
 8007bac:	f001 f9e0 	bl	8008f70 <__sinit>
 8007bb0:	ab05      	add	r3, sp, #20
 8007bb2:	9a04      	ldr	r2, [sp, #16]
 8007bb4:	68a1      	ldr	r1, [r4, #8]
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f001 ffaf 	bl	8009b1c <_vfiprintf_r>
 8007bbe:	b002      	add	sp, #8
 8007bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc4:	b004      	add	sp, #16
 8007bc6:	4770      	bx	lr
 8007bc8:	20000070 	.word	0x20000070

08007bcc <_puts_r>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	460e      	mov	r6, r1
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	b118      	cbz	r0, 8007bdc <_puts_r+0x10>
 8007bd4:	6983      	ldr	r3, [r0, #24]
 8007bd6:	b90b      	cbnz	r3, 8007bdc <_puts_r+0x10>
 8007bd8:	f001 f9ca 	bl	8008f70 <__sinit>
 8007bdc:	69ab      	ldr	r3, [r5, #24]
 8007bde:	68ac      	ldr	r4, [r5, #8]
 8007be0:	b913      	cbnz	r3, 8007be8 <_puts_r+0x1c>
 8007be2:	4628      	mov	r0, r5
 8007be4:	f001 f9c4 	bl	8008f70 <__sinit>
 8007be8:	4b2c      	ldr	r3, [pc, #176]	; (8007c9c <_puts_r+0xd0>)
 8007bea:	429c      	cmp	r4, r3
 8007bec:	d120      	bne.n	8007c30 <_puts_r+0x64>
 8007bee:	686c      	ldr	r4, [r5, #4]
 8007bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bf2:	07db      	lsls	r3, r3, #31
 8007bf4:	d405      	bmi.n	8007c02 <_puts_r+0x36>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	0598      	lsls	r0, r3, #22
 8007bfa:	d402      	bmi.n	8007c02 <_puts_r+0x36>
 8007bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bfe:	f001 fa6c 	bl	80090da <__retarget_lock_acquire_recursive>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	0719      	lsls	r1, r3, #28
 8007c06:	d51d      	bpl.n	8007c44 <_puts_r+0x78>
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	b1db      	cbz	r3, 8007c44 <_puts_r+0x78>
 8007c0c:	3e01      	subs	r6, #1
 8007c0e:	68a3      	ldr	r3, [r4, #8]
 8007c10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c14:	3b01      	subs	r3, #1
 8007c16:	60a3      	str	r3, [r4, #8]
 8007c18:	bb39      	cbnz	r1, 8007c6a <_puts_r+0x9e>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da38      	bge.n	8007c90 <_puts_r+0xc4>
 8007c1e:	4622      	mov	r2, r4
 8007c20:	210a      	movs	r1, #10
 8007c22:	4628      	mov	r0, r5
 8007c24:	f000 f930 	bl	8007e88 <__swbuf_r>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d011      	beq.n	8007c50 <_puts_r+0x84>
 8007c2c:	250a      	movs	r5, #10
 8007c2e:	e011      	b.n	8007c54 <_puts_r+0x88>
 8007c30:	4b1b      	ldr	r3, [pc, #108]	; (8007ca0 <_puts_r+0xd4>)
 8007c32:	429c      	cmp	r4, r3
 8007c34:	d101      	bne.n	8007c3a <_puts_r+0x6e>
 8007c36:	68ac      	ldr	r4, [r5, #8]
 8007c38:	e7da      	b.n	8007bf0 <_puts_r+0x24>
 8007c3a:	4b1a      	ldr	r3, [pc, #104]	; (8007ca4 <_puts_r+0xd8>)
 8007c3c:	429c      	cmp	r4, r3
 8007c3e:	bf08      	it	eq
 8007c40:	68ec      	ldreq	r4, [r5, #12]
 8007c42:	e7d5      	b.n	8007bf0 <_puts_r+0x24>
 8007c44:	4621      	mov	r1, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 f970 	bl	8007f2c <__swsetup_r>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d0dd      	beq.n	8007c0c <_puts_r+0x40>
 8007c50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c56:	07da      	lsls	r2, r3, #31
 8007c58:	d405      	bmi.n	8007c66 <_puts_r+0x9a>
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	059b      	lsls	r3, r3, #22
 8007c5e:	d402      	bmi.n	8007c66 <_puts_r+0x9a>
 8007c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c62:	f001 fa3b 	bl	80090dc <__retarget_lock_release_recursive>
 8007c66:	4628      	mov	r0, r5
 8007c68:	bd70      	pop	{r4, r5, r6, pc}
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	da04      	bge.n	8007c78 <_puts_r+0xac>
 8007c6e:	69a2      	ldr	r2, [r4, #24]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	dc06      	bgt.n	8007c82 <_puts_r+0xb6>
 8007c74:	290a      	cmp	r1, #10
 8007c76:	d004      	beq.n	8007c82 <_puts_r+0xb6>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	6022      	str	r2, [r4, #0]
 8007c7e:	7019      	strb	r1, [r3, #0]
 8007c80:	e7c5      	b.n	8007c0e <_puts_r+0x42>
 8007c82:	4622      	mov	r2, r4
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 f8ff 	bl	8007e88 <__swbuf_r>
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d1bf      	bne.n	8007c0e <_puts_r+0x42>
 8007c8e:	e7df      	b.n	8007c50 <_puts_r+0x84>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	250a      	movs	r5, #10
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	6022      	str	r2, [r4, #0]
 8007c98:	701d      	strb	r5, [r3, #0]
 8007c9a:	e7db      	b.n	8007c54 <_puts_r+0x88>
 8007c9c:	0800a728 	.word	0x0800a728
 8007ca0:	0800a748 	.word	0x0800a748
 8007ca4:	0800a708 	.word	0x0800a708

08007ca8 <puts>:
 8007ca8:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <puts+0xc>)
 8007caa:	4601      	mov	r1, r0
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	f7ff bf8d 	b.w	8007bcc <_puts_r>
 8007cb2:	bf00      	nop
 8007cb4:	20000070 	.word	0x20000070

08007cb8 <strtok>:
 8007cb8:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <strtok+0x5c>)
 8007cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cbc:	681e      	ldr	r6, [r3, #0]
 8007cbe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	b9fc      	cbnz	r4, 8007d04 <strtok+0x4c>
 8007cc4:	2050      	movs	r0, #80	; 0x50
 8007cc6:	9101      	str	r1, [sp, #4]
 8007cc8:	f001 fa6e 	bl	80091a8 <malloc>
 8007ccc:	9901      	ldr	r1, [sp, #4]
 8007cce:	65b0      	str	r0, [r6, #88]	; 0x58
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	b920      	cbnz	r0, 8007cde <strtok+0x26>
 8007cd4:	4b10      	ldr	r3, [pc, #64]	; (8007d18 <strtok+0x60>)
 8007cd6:	4811      	ldr	r0, [pc, #68]	; (8007d1c <strtok+0x64>)
 8007cd8:	2157      	movs	r1, #87	; 0x57
 8007cda:	f000 f995 	bl	8008008 <__assert_func>
 8007cde:	e9c0 4400 	strd	r4, r4, [r0]
 8007ce2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007ce6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007cea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007cee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007cf2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007cf6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007cfa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007cfe:	6184      	str	r4, [r0, #24]
 8007d00:	7704      	strb	r4, [r0, #28]
 8007d02:	6244      	str	r4, [r0, #36]	; 0x24
 8007d04:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007d06:	2301      	movs	r3, #1
 8007d08:	4628      	mov	r0, r5
 8007d0a:	b002      	add	sp, #8
 8007d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d10:	f000 b806 	b.w	8007d20 <__strtok_r>
 8007d14:	20000070 	.word	0x20000070
 8007d18:	0800a4dc 	.word	0x0800a4dc
 8007d1c:	0800a4f3 	.word	0x0800a4f3

08007d20 <__strtok_r>:
 8007d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d22:	b908      	cbnz	r0, 8007d28 <__strtok_r+0x8>
 8007d24:	6810      	ldr	r0, [r2, #0]
 8007d26:	b188      	cbz	r0, 8007d4c <__strtok_r+0x2c>
 8007d28:	4604      	mov	r4, r0
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007d30:	460f      	mov	r7, r1
 8007d32:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007d36:	b91e      	cbnz	r6, 8007d40 <__strtok_r+0x20>
 8007d38:	b965      	cbnz	r5, 8007d54 <__strtok_r+0x34>
 8007d3a:	6015      	str	r5, [r2, #0]
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	e005      	b.n	8007d4c <__strtok_r+0x2c>
 8007d40:	42b5      	cmp	r5, r6
 8007d42:	d1f6      	bne.n	8007d32 <__strtok_r+0x12>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1f0      	bne.n	8007d2a <__strtok_r+0xa>
 8007d48:	6014      	str	r4, [r2, #0]
 8007d4a:	7003      	strb	r3, [r0, #0]
 8007d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d4e:	461c      	mov	r4, r3
 8007d50:	e00c      	b.n	8007d6c <__strtok_r+0x4c>
 8007d52:	b915      	cbnz	r5, 8007d5a <__strtok_r+0x3a>
 8007d54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d58:	460e      	mov	r6, r1
 8007d5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007d5e:	42ab      	cmp	r3, r5
 8007d60:	d1f7      	bne.n	8007d52 <__strtok_r+0x32>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0f3      	beq.n	8007d4e <__strtok_r+0x2e>
 8007d66:	2300      	movs	r3, #0
 8007d68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007d6c:	6014      	str	r4, [r2, #0]
 8007d6e:	e7ed      	b.n	8007d4c <__strtok_r+0x2c>

08007d70 <_strtol_l.constprop.0>:
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d76:	d001      	beq.n	8007d7c <_strtol_l.constprop.0+0xc>
 8007d78:	2b24      	cmp	r3, #36	; 0x24
 8007d7a:	d906      	bls.n	8007d8a <_strtol_l.constprop.0+0x1a>
 8007d7c:	f7ff fa72 	bl	8007264 <__errno>
 8007d80:	2316      	movs	r3, #22
 8007d82:	6003      	str	r3, [r0, #0]
 8007d84:	2000      	movs	r0, #0
 8007d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e70 <_strtol_l.constprop.0+0x100>
 8007d8e:	460d      	mov	r5, r1
 8007d90:	462e      	mov	r6, r5
 8007d92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d96:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d9a:	f017 0708 	ands.w	r7, r7, #8
 8007d9e:	d1f7      	bne.n	8007d90 <_strtol_l.constprop.0+0x20>
 8007da0:	2c2d      	cmp	r4, #45	; 0x2d
 8007da2:	d132      	bne.n	8007e0a <_strtol_l.constprop.0+0x9a>
 8007da4:	782c      	ldrb	r4, [r5, #0]
 8007da6:	2701      	movs	r7, #1
 8007da8:	1cb5      	adds	r5, r6, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d05b      	beq.n	8007e66 <_strtol_l.constprop.0+0xf6>
 8007dae:	2b10      	cmp	r3, #16
 8007db0:	d109      	bne.n	8007dc6 <_strtol_l.constprop.0+0x56>
 8007db2:	2c30      	cmp	r4, #48	; 0x30
 8007db4:	d107      	bne.n	8007dc6 <_strtol_l.constprop.0+0x56>
 8007db6:	782c      	ldrb	r4, [r5, #0]
 8007db8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007dbc:	2c58      	cmp	r4, #88	; 0x58
 8007dbe:	d14d      	bne.n	8007e5c <_strtol_l.constprop.0+0xec>
 8007dc0:	786c      	ldrb	r4, [r5, #1]
 8007dc2:	2310      	movs	r3, #16
 8007dc4:	3502      	adds	r5, #2
 8007dc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007dca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007dce:	f04f 0c00 	mov.w	ip, #0
 8007dd2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007dd6:	4666      	mov	r6, ip
 8007dd8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007ddc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007de0:	f1be 0f09 	cmp.w	lr, #9
 8007de4:	d816      	bhi.n	8007e14 <_strtol_l.constprop.0+0xa4>
 8007de6:	4674      	mov	r4, lr
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	dd24      	ble.n	8007e36 <_strtol_l.constprop.0+0xc6>
 8007dec:	f1bc 0f00 	cmp.w	ip, #0
 8007df0:	db1e      	blt.n	8007e30 <_strtol_l.constprop.0+0xc0>
 8007df2:	45b1      	cmp	r9, r6
 8007df4:	d31c      	bcc.n	8007e30 <_strtol_l.constprop.0+0xc0>
 8007df6:	d101      	bne.n	8007dfc <_strtol_l.constprop.0+0x8c>
 8007df8:	45a2      	cmp	sl, r4
 8007dfa:	db19      	blt.n	8007e30 <_strtol_l.constprop.0+0xc0>
 8007dfc:	fb06 4603 	mla	r6, r6, r3, r4
 8007e00:	f04f 0c01 	mov.w	ip, #1
 8007e04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e08:	e7e8      	b.n	8007ddc <_strtol_l.constprop.0+0x6c>
 8007e0a:	2c2b      	cmp	r4, #43	; 0x2b
 8007e0c:	bf04      	itt	eq
 8007e0e:	782c      	ldrbeq	r4, [r5, #0]
 8007e10:	1cb5      	addeq	r5, r6, #2
 8007e12:	e7ca      	b.n	8007daa <_strtol_l.constprop.0+0x3a>
 8007e14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007e18:	f1be 0f19 	cmp.w	lr, #25
 8007e1c:	d801      	bhi.n	8007e22 <_strtol_l.constprop.0+0xb2>
 8007e1e:	3c37      	subs	r4, #55	; 0x37
 8007e20:	e7e2      	b.n	8007de8 <_strtol_l.constprop.0+0x78>
 8007e22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007e26:	f1be 0f19 	cmp.w	lr, #25
 8007e2a:	d804      	bhi.n	8007e36 <_strtol_l.constprop.0+0xc6>
 8007e2c:	3c57      	subs	r4, #87	; 0x57
 8007e2e:	e7db      	b.n	8007de8 <_strtol_l.constprop.0+0x78>
 8007e30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007e34:	e7e6      	b.n	8007e04 <_strtol_l.constprop.0+0x94>
 8007e36:	f1bc 0f00 	cmp.w	ip, #0
 8007e3a:	da05      	bge.n	8007e48 <_strtol_l.constprop.0+0xd8>
 8007e3c:	2322      	movs	r3, #34	; 0x22
 8007e3e:	6003      	str	r3, [r0, #0]
 8007e40:	4646      	mov	r6, r8
 8007e42:	b942      	cbnz	r2, 8007e56 <_strtol_l.constprop.0+0xe6>
 8007e44:	4630      	mov	r0, r6
 8007e46:	e79e      	b.n	8007d86 <_strtol_l.constprop.0+0x16>
 8007e48:	b107      	cbz	r7, 8007e4c <_strtol_l.constprop.0+0xdc>
 8007e4a:	4276      	negs	r6, r6
 8007e4c:	2a00      	cmp	r2, #0
 8007e4e:	d0f9      	beq.n	8007e44 <_strtol_l.constprop.0+0xd4>
 8007e50:	f1bc 0f00 	cmp.w	ip, #0
 8007e54:	d000      	beq.n	8007e58 <_strtol_l.constprop.0+0xe8>
 8007e56:	1e69      	subs	r1, r5, #1
 8007e58:	6011      	str	r1, [r2, #0]
 8007e5a:	e7f3      	b.n	8007e44 <_strtol_l.constprop.0+0xd4>
 8007e5c:	2430      	movs	r4, #48	; 0x30
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1b1      	bne.n	8007dc6 <_strtol_l.constprop.0+0x56>
 8007e62:	2308      	movs	r3, #8
 8007e64:	e7af      	b.n	8007dc6 <_strtol_l.constprop.0+0x56>
 8007e66:	2c30      	cmp	r4, #48	; 0x30
 8007e68:	d0a5      	beq.n	8007db6 <_strtol_l.constprop.0+0x46>
 8007e6a:	230a      	movs	r3, #10
 8007e6c:	e7ab      	b.n	8007dc6 <_strtol_l.constprop.0+0x56>
 8007e6e:	bf00      	nop
 8007e70:	0800a58d 	.word	0x0800a58d

08007e74 <strtol>:
 8007e74:	4613      	mov	r3, r2
 8007e76:	460a      	mov	r2, r1
 8007e78:	4601      	mov	r1, r0
 8007e7a:	4802      	ldr	r0, [pc, #8]	; (8007e84 <strtol+0x10>)
 8007e7c:	6800      	ldr	r0, [r0, #0]
 8007e7e:	f7ff bf77 	b.w	8007d70 <_strtol_l.constprop.0>
 8007e82:	bf00      	nop
 8007e84:	20000070 	.word	0x20000070

08007e88 <__swbuf_r>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	460e      	mov	r6, r1
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	4605      	mov	r5, r0
 8007e90:	b118      	cbz	r0, 8007e9a <__swbuf_r+0x12>
 8007e92:	6983      	ldr	r3, [r0, #24]
 8007e94:	b90b      	cbnz	r3, 8007e9a <__swbuf_r+0x12>
 8007e96:	f001 f86b 	bl	8008f70 <__sinit>
 8007e9a:	4b21      	ldr	r3, [pc, #132]	; (8007f20 <__swbuf_r+0x98>)
 8007e9c:	429c      	cmp	r4, r3
 8007e9e:	d12b      	bne.n	8007ef8 <__swbuf_r+0x70>
 8007ea0:	686c      	ldr	r4, [r5, #4]
 8007ea2:	69a3      	ldr	r3, [r4, #24]
 8007ea4:	60a3      	str	r3, [r4, #8]
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	071a      	lsls	r2, r3, #28
 8007eaa:	d52f      	bpl.n	8007f0c <__swbuf_r+0x84>
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	b36b      	cbz	r3, 8007f0c <__swbuf_r+0x84>
 8007eb0:	6923      	ldr	r3, [r4, #16]
 8007eb2:	6820      	ldr	r0, [r4, #0]
 8007eb4:	1ac0      	subs	r0, r0, r3
 8007eb6:	6963      	ldr	r3, [r4, #20]
 8007eb8:	b2f6      	uxtb	r6, r6
 8007eba:	4283      	cmp	r3, r0
 8007ebc:	4637      	mov	r7, r6
 8007ebe:	dc04      	bgt.n	8007eca <__swbuf_r+0x42>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 ffc0 	bl	8008e48 <_fflush_r>
 8007ec8:	bb30      	cbnz	r0, 8007f18 <__swbuf_r+0x90>
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	60a3      	str	r3, [r4, #8]
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	701e      	strb	r6, [r3, #0]
 8007ed8:	6963      	ldr	r3, [r4, #20]
 8007eda:	3001      	adds	r0, #1
 8007edc:	4283      	cmp	r3, r0
 8007ede:	d004      	beq.n	8007eea <__swbuf_r+0x62>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	07db      	lsls	r3, r3, #31
 8007ee4:	d506      	bpl.n	8007ef4 <__swbuf_r+0x6c>
 8007ee6:	2e0a      	cmp	r6, #10
 8007ee8:	d104      	bne.n	8007ef4 <__swbuf_r+0x6c>
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 ffab 	bl	8008e48 <_fflush_r>
 8007ef2:	b988      	cbnz	r0, 8007f18 <__swbuf_r+0x90>
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <__swbuf_r+0x9c>)
 8007efa:	429c      	cmp	r4, r3
 8007efc:	d101      	bne.n	8007f02 <__swbuf_r+0x7a>
 8007efe:	68ac      	ldr	r4, [r5, #8]
 8007f00:	e7cf      	b.n	8007ea2 <__swbuf_r+0x1a>
 8007f02:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <__swbuf_r+0xa0>)
 8007f04:	429c      	cmp	r4, r3
 8007f06:	bf08      	it	eq
 8007f08:	68ec      	ldreq	r4, [r5, #12]
 8007f0a:	e7ca      	b.n	8007ea2 <__swbuf_r+0x1a>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f000 f80c 	bl	8007f2c <__swsetup_r>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d0cb      	beq.n	8007eb0 <__swbuf_r+0x28>
 8007f18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f1c:	e7ea      	b.n	8007ef4 <__swbuf_r+0x6c>
 8007f1e:	bf00      	nop
 8007f20:	0800a728 	.word	0x0800a728
 8007f24:	0800a748 	.word	0x0800a748
 8007f28:	0800a708 	.word	0x0800a708

08007f2c <__swsetup_r>:
 8007f2c:	4b32      	ldr	r3, [pc, #200]	; (8007ff8 <__swsetup_r+0xcc>)
 8007f2e:	b570      	push	{r4, r5, r6, lr}
 8007f30:	681d      	ldr	r5, [r3, #0]
 8007f32:	4606      	mov	r6, r0
 8007f34:	460c      	mov	r4, r1
 8007f36:	b125      	cbz	r5, 8007f42 <__swsetup_r+0x16>
 8007f38:	69ab      	ldr	r3, [r5, #24]
 8007f3a:	b913      	cbnz	r3, 8007f42 <__swsetup_r+0x16>
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f001 f817 	bl	8008f70 <__sinit>
 8007f42:	4b2e      	ldr	r3, [pc, #184]	; (8007ffc <__swsetup_r+0xd0>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	d10f      	bne.n	8007f68 <__swsetup_r+0x3c>
 8007f48:	686c      	ldr	r4, [r5, #4]
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f50:	0719      	lsls	r1, r3, #28
 8007f52:	d42c      	bmi.n	8007fae <__swsetup_r+0x82>
 8007f54:	06dd      	lsls	r5, r3, #27
 8007f56:	d411      	bmi.n	8007f7c <__swsetup_r+0x50>
 8007f58:	2309      	movs	r3, #9
 8007f5a:	6033      	str	r3, [r6, #0]
 8007f5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f66:	e03e      	b.n	8007fe6 <__swsetup_r+0xba>
 8007f68:	4b25      	ldr	r3, [pc, #148]	; (8008000 <__swsetup_r+0xd4>)
 8007f6a:	429c      	cmp	r4, r3
 8007f6c:	d101      	bne.n	8007f72 <__swsetup_r+0x46>
 8007f6e:	68ac      	ldr	r4, [r5, #8]
 8007f70:	e7eb      	b.n	8007f4a <__swsetup_r+0x1e>
 8007f72:	4b24      	ldr	r3, [pc, #144]	; (8008004 <__swsetup_r+0xd8>)
 8007f74:	429c      	cmp	r4, r3
 8007f76:	bf08      	it	eq
 8007f78:	68ec      	ldreq	r4, [r5, #12]
 8007f7a:	e7e6      	b.n	8007f4a <__swsetup_r+0x1e>
 8007f7c:	0758      	lsls	r0, r3, #29
 8007f7e:	d512      	bpl.n	8007fa6 <__swsetup_r+0x7a>
 8007f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f82:	b141      	cbz	r1, 8007f96 <__swsetup_r+0x6a>
 8007f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	d002      	beq.n	8007f92 <__swsetup_r+0x66>
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f001 fcbb 	bl	8009908 <_free_r>
 8007f92:	2300      	movs	r3, #0
 8007f94:	6363      	str	r3, [r4, #52]	; 0x34
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6063      	str	r3, [r4, #4]
 8007fa2:	6923      	ldr	r3, [r4, #16]
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	f043 0308 	orr.w	r3, r3, #8
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	b94b      	cbnz	r3, 8007fc6 <__swsetup_r+0x9a>
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fbc:	d003      	beq.n	8007fc6 <__swsetup_r+0x9a>
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f001 f8b1 	bl	8009128 <__smakebuf_r>
 8007fc6:	89a0      	ldrh	r0, [r4, #12]
 8007fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fcc:	f010 0301 	ands.w	r3, r0, #1
 8007fd0:	d00a      	beq.n	8007fe8 <__swsetup_r+0xbc>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60a3      	str	r3, [r4, #8]
 8007fd6:	6963      	ldr	r3, [r4, #20]
 8007fd8:	425b      	negs	r3, r3
 8007fda:	61a3      	str	r3, [r4, #24]
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	b943      	cbnz	r3, 8007ff2 <__swsetup_r+0xc6>
 8007fe0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fe4:	d1ba      	bne.n	8007f5c <__swsetup_r+0x30>
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
 8007fe8:	0781      	lsls	r1, r0, #30
 8007fea:	bf58      	it	pl
 8007fec:	6963      	ldrpl	r3, [r4, #20]
 8007fee:	60a3      	str	r3, [r4, #8]
 8007ff0:	e7f4      	b.n	8007fdc <__swsetup_r+0xb0>
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	e7f7      	b.n	8007fe6 <__swsetup_r+0xba>
 8007ff6:	bf00      	nop
 8007ff8:	20000070 	.word	0x20000070
 8007ffc:	0800a728 	.word	0x0800a728
 8008000:	0800a748 	.word	0x0800a748
 8008004:	0800a708 	.word	0x0800a708

08008008 <__assert_func>:
 8008008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800800a:	4614      	mov	r4, r2
 800800c:	461a      	mov	r2, r3
 800800e:	4b09      	ldr	r3, [pc, #36]	; (8008034 <__assert_func+0x2c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4605      	mov	r5, r0
 8008014:	68d8      	ldr	r0, [r3, #12]
 8008016:	b14c      	cbz	r4, 800802c <__assert_func+0x24>
 8008018:	4b07      	ldr	r3, [pc, #28]	; (8008038 <__assert_func+0x30>)
 800801a:	9100      	str	r1, [sp, #0]
 800801c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008020:	4906      	ldr	r1, [pc, #24]	; (800803c <__assert_func+0x34>)
 8008022:	462b      	mov	r3, r5
 8008024:	f001 f822 	bl	800906c <fiprintf>
 8008028:	f001 ff0e 	bl	8009e48 <abort>
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <__assert_func+0x38>)
 800802e:	461c      	mov	r4, r3
 8008030:	e7f3      	b.n	800801a <__assert_func+0x12>
 8008032:	bf00      	nop
 8008034:	20000070 	.word	0x20000070
 8008038:	0800a550 	.word	0x0800a550
 800803c:	0800a55d 	.word	0x0800a55d
 8008040:	0800a58b 	.word	0x0800a58b

08008044 <quorem>:
 8008044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	6903      	ldr	r3, [r0, #16]
 800804a:	690c      	ldr	r4, [r1, #16]
 800804c:	42a3      	cmp	r3, r4
 800804e:	4607      	mov	r7, r0
 8008050:	f2c0 8081 	blt.w	8008156 <quorem+0x112>
 8008054:	3c01      	subs	r4, #1
 8008056:	f101 0814 	add.w	r8, r1, #20
 800805a:	f100 0514 	add.w	r5, r0, #20
 800805e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800806c:	3301      	adds	r3, #1
 800806e:	429a      	cmp	r2, r3
 8008070:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008074:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008078:	fbb2 f6f3 	udiv	r6, r2, r3
 800807c:	d331      	bcc.n	80080e2 <quorem+0x9e>
 800807e:	f04f 0e00 	mov.w	lr, #0
 8008082:	4640      	mov	r0, r8
 8008084:	46ac      	mov	ip, r5
 8008086:	46f2      	mov	sl, lr
 8008088:	f850 2b04 	ldr.w	r2, [r0], #4
 800808c:	b293      	uxth	r3, r2
 800808e:	fb06 e303 	mla	r3, r6, r3, lr
 8008092:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008096:	b29b      	uxth	r3, r3
 8008098:	ebaa 0303 	sub.w	r3, sl, r3
 800809c:	f8dc a000 	ldr.w	sl, [ip]
 80080a0:	0c12      	lsrs	r2, r2, #16
 80080a2:	fa13 f38a 	uxtah	r3, r3, sl
 80080a6:	fb06 e202 	mla	r2, r6, r2, lr
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	9b00      	ldr	r3, [sp, #0]
 80080ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080b2:	b292      	uxth	r2, r2
 80080b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80080c0:	4581      	cmp	r9, r0
 80080c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080c6:	f84c 3b04 	str.w	r3, [ip], #4
 80080ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080ce:	d2db      	bcs.n	8008088 <quorem+0x44>
 80080d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80080d4:	b92b      	cbnz	r3, 80080e2 <quorem+0x9e>
 80080d6:	9b01      	ldr	r3, [sp, #4]
 80080d8:	3b04      	subs	r3, #4
 80080da:	429d      	cmp	r5, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	d32e      	bcc.n	800813e <quorem+0xfa>
 80080e0:	613c      	str	r4, [r7, #16]
 80080e2:	4638      	mov	r0, r7
 80080e4:	f001 faf8 	bl	80096d8 <__mcmp>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	db24      	blt.n	8008136 <quorem+0xf2>
 80080ec:	3601      	adds	r6, #1
 80080ee:	4628      	mov	r0, r5
 80080f0:	f04f 0c00 	mov.w	ip, #0
 80080f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80080f8:	f8d0 e000 	ldr.w	lr, [r0]
 80080fc:	b293      	uxth	r3, r2
 80080fe:	ebac 0303 	sub.w	r3, ip, r3
 8008102:	0c12      	lsrs	r2, r2, #16
 8008104:	fa13 f38e 	uxtah	r3, r3, lr
 8008108:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800810c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008110:	b29b      	uxth	r3, r3
 8008112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008116:	45c1      	cmp	r9, r8
 8008118:	f840 3b04 	str.w	r3, [r0], #4
 800811c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008120:	d2e8      	bcs.n	80080f4 <quorem+0xb0>
 8008122:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800812a:	b922      	cbnz	r2, 8008136 <quorem+0xf2>
 800812c:	3b04      	subs	r3, #4
 800812e:	429d      	cmp	r5, r3
 8008130:	461a      	mov	r2, r3
 8008132:	d30a      	bcc.n	800814a <quorem+0x106>
 8008134:	613c      	str	r4, [r7, #16]
 8008136:	4630      	mov	r0, r6
 8008138:	b003      	add	sp, #12
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813e:	6812      	ldr	r2, [r2, #0]
 8008140:	3b04      	subs	r3, #4
 8008142:	2a00      	cmp	r2, #0
 8008144:	d1cc      	bne.n	80080e0 <quorem+0x9c>
 8008146:	3c01      	subs	r4, #1
 8008148:	e7c7      	b.n	80080da <quorem+0x96>
 800814a:	6812      	ldr	r2, [r2, #0]
 800814c:	3b04      	subs	r3, #4
 800814e:	2a00      	cmp	r2, #0
 8008150:	d1f0      	bne.n	8008134 <quorem+0xf0>
 8008152:	3c01      	subs	r4, #1
 8008154:	e7eb      	b.n	800812e <quorem+0xea>
 8008156:	2000      	movs	r0, #0
 8008158:	e7ee      	b.n	8008138 <quorem+0xf4>
 800815a:	0000      	movs	r0, r0
 800815c:	0000      	movs	r0, r0
	...

08008160 <_dtoa_r>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	ed2d 8b04 	vpush	{d8-d9}
 8008168:	ec57 6b10 	vmov	r6, r7, d0
 800816c:	b093      	sub	sp, #76	; 0x4c
 800816e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008170:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008174:	9106      	str	r1, [sp, #24]
 8008176:	ee10 aa10 	vmov	sl, s0
 800817a:	4604      	mov	r4, r0
 800817c:	9209      	str	r2, [sp, #36]	; 0x24
 800817e:	930c      	str	r3, [sp, #48]	; 0x30
 8008180:	46bb      	mov	fp, r7
 8008182:	b975      	cbnz	r5, 80081a2 <_dtoa_r+0x42>
 8008184:	2010      	movs	r0, #16
 8008186:	f001 f80f 	bl	80091a8 <malloc>
 800818a:	4602      	mov	r2, r0
 800818c:	6260      	str	r0, [r4, #36]	; 0x24
 800818e:	b920      	cbnz	r0, 800819a <_dtoa_r+0x3a>
 8008190:	4ba7      	ldr	r3, [pc, #668]	; (8008430 <_dtoa_r+0x2d0>)
 8008192:	21ea      	movs	r1, #234	; 0xea
 8008194:	48a7      	ldr	r0, [pc, #668]	; (8008434 <_dtoa_r+0x2d4>)
 8008196:	f7ff ff37 	bl	8008008 <__assert_func>
 800819a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800819e:	6005      	str	r5, [r0, #0]
 80081a0:	60c5      	str	r5, [r0, #12]
 80081a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a4:	6819      	ldr	r1, [r3, #0]
 80081a6:	b151      	cbz	r1, 80081be <_dtoa_r+0x5e>
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	604a      	str	r2, [r1, #4]
 80081ac:	2301      	movs	r3, #1
 80081ae:	4093      	lsls	r3, r2
 80081b0:	608b      	str	r3, [r1, #8]
 80081b2:	4620      	mov	r0, r4
 80081b4:	f001 f84e 	bl	8009254 <_Bfree>
 80081b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	1e3b      	subs	r3, r7, #0
 80081c0:	bfaa      	itet	ge
 80081c2:	2300      	movge	r3, #0
 80081c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80081c8:	f8c8 3000 	strge.w	r3, [r8]
 80081cc:	4b9a      	ldr	r3, [pc, #616]	; (8008438 <_dtoa_r+0x2d8>)
 80081ce:	bfbc      	itt	lt
 80081d0:	2201      	movlt	r2, #1
 80081d2:	f8c8 2000 	strlt.w	r2, [r8]
 80081d6:	ea33 030b 	bics.w	r3, r3, fp
 80081da:	d11b      	bne.n	8008214 <_dtoa_r+0xb4>
 80081dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081de:	f242 730f 	movw	r3, #9999	; 0x270f
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081e8:	4333      	orrs	r3, r6
 80081ea:	f000 8592 	beq.w	8008d12 <_dtoa_r+0xbb2>
 80081ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081f0:	b963      	cbnz	r3, 800820c <_dtoa_r+0xac>
 80081f2:	4b92      	ldr	r3, [pc, #584]	; (800843c <_dtoa_r+0x2dc>)
 80081f4:	e022      	b.n	800823c <_dtoa_r+0xdc>
 80081f6:	4b92      	ldr	r3, [pc, #584]	; (8008440 <_dtoa_r+0x2e0>)
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	3308      	adds	r3, #8
 80081fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	9801      	ldr	r0, [sp, #4]
 8008202:	b013      	add	sp, #76	; 0x4c
 8008204:	ecbd 8b04 	vpop	{d8-d9}
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	4b8b      	ldr	r3, [pc, #556]	; (800843c <_dtoa_r+0x2dc>)
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	3303      	adds	r3, #3
 8008212:	e7f3      	b.n	80081fc <_dtoa_r+0x9c>
 8008214:	2200      	movs	r2, #0
 8008216:	2300      	movs	r3, #0
 8008218:	4650      	mov	r0, sl
 800821a:	4659      	mov	r1, fp
 800821c:	f7f8 fc6c 	bl	8000af8 <__aeabi_dcmpeq>
 8008220:	ec4b ab19 	vmov	d9, sl, fp
 8008224:	4680      	mov	r8, r0
 8008226:	b158      	cbz	r0, 8008240 <_dtoa_r+0xe0>
 8008228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800822a:	2301      	movs	r3, #1
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 856b 	beq.w	8008d0c <_dtoa_r+0xbac>
 8008236:	4883      	ldr	r0, [pc, #524]	; (8008444 <_dtoa_r+0x2e4>)
 8008238:	6018      	str	r0, [r3, #0]
 800823a:	1e43      	subs	r3, r0, #1
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	e7df      	b.n	8008200 <_dtoa_r+0xa0>
 8008240:	ec4b ab10 	vmov	d0, sl, fp
 8008244:	aa10      	add	r2, sp, #64	; 0x40
 8008246:	a911      	add	r1, sp, #68	; 0x44
 8008248:	4620      	mov	r0, r4
 800824a:	f001 faeb 	bl	8009824 <__d2b>
 800824e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008252:	ee08 0a10 	vmov	s16, r0
 8008256:	2d00      	cmp	r5, #0
 8008258:	f000 8084 	beq.w	8008364 <_dtoa_r+0x204>
 800825c:	ee19 3a90 	vmov	r3, s19
 8008260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008264:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008268:	4656      	mov	r6, sl
 800826a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800826e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008272:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008276:	4b74      	ldr	r3, [pc, #464]	; (8008448 <_dtoa_r+0x2e8>)
 8008278:	2200      	movs	r2, #0
 800827a:	4630      	mov	r0, r6
 800827c:	4639      	mov	r1, r7
 800827e:	f7f8 f81b 	bl	80002b8 <__aeabi_dsub>
 8008282:	a365      	add	r3, pc, #404	; (adr r3, 8008418 <_dtoa_r+0x2b8>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f7f8 f9ce 	bl	8000628 <__aeabi_dmul>
 800828c:	a364      	add	r3, pc, #400	; (adr r3, 8008420 <_dtoa_r+0x2c0>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f7f8 f813 	bl	80002bc <__adddf3>
 8008296:	4606      	mov	r6, r0
 8008298:	4628      	mov	r0, r5
 800829a:	460f      	mov	r7, r1
 800829c:	f7f8 f95a 	bl	8000554 <__aeabi_i2d>
 80082a0:	a361      	add	r3, pc, #388	; (adr r3, 8008428 <_dtoa_r+0x2c8>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	f7f8 f9bf 	bl	8000628 <__aeabi_dmul>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f8 f803 	bl	80002bc <__adddf3>
 80082b6:	4606      	mov	r6, r0
 80082b8:	460f      	mov	r7, r1
 80082ba:	f7f8 fc65 	bl	8000b88 <__aeabi_d2iz>
 80082be:	2200      	movs	r2, #0
 80082c0:	9000      	str	r0, [sp, #0]
 80082c2:	2300      	movs	r3, #0
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f8 fc20 	bl	8000b0c <__aeabi_dcmplt>
 80082cc:	b150      	cbz	r0, 80082e4 <_dtoa_r+0x184>
 80082ce:	9800      	ldr	r0, [sp, #0]
 80082d0:	f7f8 f940 	bl	8000554 <__aeabi_i2d>
 80082d4:	4632      	mov	r2, r6
 80082d6:	463b      	mov	r3, r7
 80082d8:	f7f8 fc0e 	bl	8000af8 <__aeabi_dcmpeq>
 80082dc:	b910      	cbnz	r0, 80082e4 <_dtoa_r+0x184>
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	9b00      	ldr	r3, [sp, #0]
 80082e6:	2b16      	cmp	r3, #22
 80082e8:	d85a      	bhi.n	80083a0 <_dtoa_r+0x240>
 80082ea:	9a00      	ldr	r2, [sp, #0]
 80082ec:	4b57      	ldr	r3, [pc, #348]	; (800844c <_dtoa_r+0x2ec>)
 80082ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	ec51 0b19 	vmov	r0, r1, d9
 80082fa:	f7f8 fc07 	bl	8000b0c <__aeabi_dcmplt>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d050      	beq.n	80083a4 <_dtoa_r+0x244>
 8008302:	9b00      	ldr	r3, [sp, #0]
 8008304:	3b01      	subs	r3, #1
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	2300      	movs	r3, #0
 800830a:	930b      	str	r3, [sp, #44]	; 0x2c
 800830c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800830e:	1b5d      	subs	r5, r3, r5
 8008310:	1e6b      	subs	r3, r5, #1
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	bf45      	ittet	mi
 8008316:	f1c5 0301 	rsbmi	r3, r5, #1
 800831a:	9304      	strmi	r3, [sp, #16]
 800831c:	2300      	movpl	r3, #0
 800831e:	2300      	movmi	r3, #0
 8008320:	bf4c      	ite	mi
 8008322:	9305      	strmi	r3, [sp, #20]
 8008324:	9304      	strpl	r3, [sp, #16]
 8008326:	9b00      	ldr	r3, [sp, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	db3d      	blt.n	80083a8 <_dtoa_r+0x248>
 800832c:	9b05      	ldr	r3, [sp, #20]
 800832e:	9a00      	ldr	r2, [sp, #0]
 8008330:	920a      	str	r2, [sp, #40]	; 0x28
 8008332:	4413      	add	r3, r2
 8008334:	9305      	str	r3, [sp, #20]
 8008336:	2300      	movs	r3, #0
 8008338:	9307      	str	r3, [sp, #28]
 800833a:	9b06      	ldr	r3, [sp, #24]
 800833c:	2b09      	cmp	r3, #9
 800833e:	f200 8089 	bhi.w	8008454 <_dtoa_r+0x2f4>
 8008342:	2b05      	cmp	r3, #5
 8008344:	bfc4      	itt	gt
 8008346:	3b04      	subgt	r3, #4
 8008348:	9306      	strgt	r3, [sp, #24]
 800834a:	9b06      	ldr	r3, [sp, #24]
 800834c:	f1a3 0302 	sub.w	r3, r3, #2
 8008350:	bfcc      	ite	gt
 8008352:	2500      	movgt	r5, #0
 8008354:	2501      	movle	r5, #1
 8008356:	2b03      	cmp	r3, #3
 8008358:	f200 8087 	bhi.w	800846a <_dtoa_r+0x30a>
 800835c:	e8df f003 	tbb	[pc, r3]
 8008360:	59383a2d 	.word	0x59383a2d
 8008364:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008368:	441d      	add	r5, r3
 800836a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800836e:	2b20      	cmp	r3, #32
 8008370:	bfc1      	itttt	gt
 8008372:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008376:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800837a:	fa0b f303 	lslgt.w	r3, fp, r3
 800837e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008382:	bfda      	itte	le
 8008384:	f1c3 0320 	rsble	r3, r3, #32
 8008388:	fa06 f003 	lslle.w	r0, r6, r3
 800838c:	4318      	orrgt	r0, r3
 800838e:	f7f8 f8d1 	bl	8000534 <__aeabi_ui2d>
 8008392:	2301      	movs	r3, #1
 8008394:	4606      	mov	r6, r0
 8008396:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800839a:	3d01      	subs	r5, #1
 800839c:	930e      	str	r3, [sp, #56]	; 0x38
 800839e:	e76a      	b.n	8008276 <_dtoa_r+0x116>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e7b2      	b.n	800830a <_dtoa_r+0x1aa>
 80083a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80083a6:	e7b1      	b.n	800830c <_dtoa_r+0x1ac>
 80083a8:	9b04      	ldr	r3, [sp, #16]
 80083aa:	9a00      	ldr	r2, [sp, #0]
 80083ac:	1a9b      	subs	r3, r3, r2
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	4253      	negs	r3, r2
 80083b2:	9307      	str	r3, [sp, #28]
 80083b4:	2300      	movs	r3, #0
 80083b6:	930a      	str	r3, [sp, #40]	; 0x28
 80083b8:	e7bf      	b.n	800833a <_dtoa_r+0x1da>
 80083ba:	2300      	movs	r3, #0
 80083bc:	9308      	str	r3, [sp, #32]
 80083be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	dc55      	bgt.n	8008470 <_dtoa_r+0x310>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083ca:	461a      	mov	r2, r3
 80083cc:	9209      	str	r2, [sp, #36]	; 0x24
 80083ce:	e00c      	b.n	80083ea <_dtoa_r+0x28a>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7f3      	b.n	80083bc <_dtoa_r+0x25c>
 80083d4:	2300      	movs	r3, #0
 80083d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083d8:	9308      	str	r3, [sp, #32]
 80083da:	9b00      	ldr	r3, [sp, #0]
 80083dc:	4413      	add	r3, r2
 80083de:	9302      	str	r3, [sp, #8]
 80083e0:	3301      	adds	r3, #1
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	9303      	str	r3, [sp, #12]
 80083e6:	bfb8      	it	lt
 80083e8:	2301      	movlt	r3, #1
 80083ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083ec:	2200      	movs	r2, #0
 80083ee:	6042      	str	r2, [r0, #4]
 80083f0:	2204      	movs	r2, #4
 80083f2:	f102 0614 	add.w	r6, r2, #20
 80083f6:	429e      	cmp	r6, r3
 80083f8:	6841      	ldr	r1, [r0, #4]
 80083fa:	d93d      	bls.n	8008478 <_dtoa_r+0x318>
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 fee9 	bl	80091d4 <_Balloc>
 8008402:	9001      	str	r0, [sp, #4]
 8008404:	2800      	cmp	r0, #0
 8008406:	d13b      	bne.n	8008480 <_dtoa_r+0x320>
 8008408:	4b11      	ldr	r3, [pc, #68]	; (8008450 <_dtoa_r+0x2f0>)
 800840a:	4602      	mov	r2, r0
 800840c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008410:	e6c0      	b.n	8008194 <_dtoa_r+0x34>
 8008412:	2301      	movs	r3, #1
 8008414:	e7df      	b.n	80083d6 <_dtoa_r+0x276>
 8008416:	bf00      	nop
 8008418:	636f4361 	.word	0x636f4361
 800841c:	3fd287a7 	.word	0x3fd287a7
 8008420:	8b60c8b3 	.word	0x8b60c8b3
 8008424:	3fc68a28 	.word	0x3fc68a28
 8008428:	509f79fb 	.word	0x509f79fb
 800842c:	3fd34413 	.word	0x3fd34413
 8008430:	0800a4dc 	.word	0x0800a4dc
 8008434:	0800a69a 	.word	0x0800a69a
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	0800a696 	.word	0x0800a696
 8008440:	0800a68d 	.word	0x0800a68d
 8008444:	0800a4b9 	.word	0x0800a4b9
 8008448:	3ff80000 	.word	0x3ff80000
 800844c:	0800a7f0 	.word	0x0800a7f0
 8008450:	0800a6f5 	.word	0x0800a6f5
 8008454:	2501      	movs	r5, #1
 8008456:	2300      	movs	r3, #0
 8008458:	9306      	str	r3, [sp, #24]
 800845a:	9508      	str	r5, [sp, #32]
 800845c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008460:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008464:	2200      	movs	r2, #0
 8008466:	2312      	movs	r3, #18
 8008468:	e7b0      	b.n	80083cc <_dtoa_r+0x26c>
 800846a:	2301      	movs	r3, #1
 800846c:	9308      	str	r3, [sp, #32]
 800846e:	e7f5      	b.n	800845c <_dtoa_r+0x2fc>
 8008470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008472:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008476:	e7b8      	b.n	80083ea <_dtoa_r+0x28a>
 8008478:	3101      	adds	r1, #1
 800847a:	6041      	str	r1, [r0, #4]
 800847c:	0052      	lsls	r2, r2, #1
 800847e:	e7b8      	b.n	80083f2 <_dtoa_r+0x292>
 8008480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008482:	9a01      	ldr	r2, [sp, #4]
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	2b0e      	cmp	r3, #14
 800848a:	f200 809d 	bhi.w	80085c8 <_dtoa_r+0x468>
 800848e:	2d00      	cmp	r5, #0
 8008490:	f000 809a 	beq.w	80085c8 <_dtoa_r+0x468>
 8008494:	9b00      	ldr	r3, [sp, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	dd32      	ble.n	8008500 <_dtoa_r+0x3a0>
 800849a:	4ab7      	ldr	r2, [pc, #732]	; (8008778 <_dtoa_r+0x618>)
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084a8:	9b00      	ldr	r3, [sp, #0]
 80084aa:	05d8      	lsls	r0, r3, #23
 80084ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80084b0:	d516      	bpl.n	80084e0 <_dtoa_r+0x380>
 80084b2:	4bb2      	ldr	r3, [pc, #712]	; (800877c <_dtoa_r+0x61c>)
 80084b4:	ec51 0b19 	vmov	r0, r1, d9
 80084b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084bc:	f7f8 f9de 	bl	800087c <__aeabi_ddiv>
 80084c0:	f007 070f 	and.w	r7, r7, #15
 80084c4:	4682      	mov	sl, r0
 80084c6:	468b      	mov	fp, r1
 80084c8:	2503      	movs	r5, #3
 80084ca:	4eac      	ldr	r6, [pc, #688]	; (800877c <_dtoa_r+0x61c>)
 80084cc:	b957      	cbnz	r7, 80084e4 <_dtoa_r+0x384>
 80084ce:	4642      	mov	r2, r8
 80084d0:	464b      	mov	r3, r9
 80084d2:	4650      	mov	r0, sl
 80084d4:	4659      	mov	r1, fp
 80084d6:	f7f8 f9d1 	bl	800087c <__aeabi_ddiv>
 80084da:	4682      	mov	sl, r0
 80084dc:	468b      	mov	fp, r1
 80084de:	e028      	b.n	8008532 <_dtoa_r+0x3d2>
 80084e0:	2502      	movs	r5, #2
 80084e2:	e7f2      	b.n	80084ca <_dtoa_r+0x36a>
 80084e4:	07f9      	lsls	r1, r7, #31
 80084e6:	d508      	bpl.n	80084fa <_dtoa_r+0x39a>
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084f0:	f7f8 f89a 	bl	8000628 <__aeabi_dmul>
 80084f4:	3501      	adds	r5, #1
 80084f6:	4680      	mov	r8, r0
 80084f8:	4689      	mov	r9, r1
 80084fa:	107f      	asrs	r7, r7, #1
 80084fc:	3608      	adds	r6, #8
 80084fe:	e7e5      	b.n	80084cc <_dtoa_r+0x36c>
 8008500:	f000 809b 	beq.w	800863a <_dtoa_r+0x4da>
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	4f9d      	ldr	r7, [pc, #628]	; (800877c <_dtoa_r+0x61c>)
 8008508:	425e      	negs	r6, r3
 800850a:	4b9b      	ldr	r3, [pc, #620]	; (8008778 <_dtoa_r+0x618>)
 800850c:	f006 020f 	and.w	r2, r6, #15
 8008510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	ec51 0b19 	vmov	r0, r1, d9
 800851c:	f7f8 f884 	bl	8000628 <__aeabi_dmul>
 8008520:	1136      	asrs	r6, r6, #4
 8008522:	4682      	mov	sl, r0
 8008524:	468b      	mov	fp, r1
 8008526:	2300      	movs	r3, #0
 8008528:	2502      	movs	r5, #2
 800852a:	2e00      	cmp	r6, #0
 800852c:	d17a      	bne.n	8008624 <_dtoa_r+0x4c4>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1d3      	bne.n	80084da <_dtoa_r+0x37a>
 8008532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8082 	beq.w	800863e <_dtoa_r+0x4de>
 800853a:	4b91      	ldr	r3, [pc, #580]	; (8008780 <_dtoa_r+0x620>)
 800853c:	2200      	movs	r2, #0
 800853e:	4650      	mov	r0, sl
 8008540:	4659      	mov	r1, fp
 8008542:	f7f8 fae3 	bl	8000b0c <__aeabi_dcmplt>
 8008546:	2800      	cmp	r0, #0
 8008548:	d079      	beq.n	800863e <_dtoa_r+0x4de>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d076      	beq.n	800863e <_dtoa_r+0x4de>
 8008550:	9b02      	ldr	r3, [sp, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	dd36      	ble.n	80085c4 <_dtoa_r+0x464>
 8008556:	9b00      	ldr	r3, [sp, #0]
 8008558:	4650      	mov	r0, sl
 800855a:	4659      	mov	r1, fp
 800855c:	1e5f      	subs	r7, r3, #1
 800855e:	2200      	movs	r2, #0
 8008560:	4b88      	ldr	r3, [pc, #544]	; (8008784 <_dtoa_r+0x624>)
 8008562:	f7f8 f861 	bl	8000628 <__aeabi_dmul>
 8008566:	9e02      	ldr	r6, [sp, #8]
 8008568:	4682      	mov	sl, r0
 800856a:	468b      	mov	fp, r1
 800856c:	3501      	adds	r5, #1
 800856e:	4628      	mov	r0, r5
 8008570:	f7f7 fff0 	bl	8000554 <__aeabi_i2d>
 8008574:	4652      	mov	r2, sl
 8008576:	465b      	mov	r3, fp
 8008578:	f7f8 f856 	bl	8000628 <__aeabi_dmul>
 800857c:	4b82      	ldr	r3, [pc, #520]	; (8008788 <_dtoa_r+0x628>)
 800857e:	2200      	movs	r2, #0
 8008580:	f7f7 fe9c 	bl	80002bc <__adddf3>
 8008584:	46d0      	mov	r8, sl
 8008586:	46d9      	mov	r9, fp
 8008588:	4682      	mov	sl, r0
 800858a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800858e:	2e00      	cmp	r6, #0
 8008590:	d158      	bne.n	8008644 <_dtoa_r+0x4e4>
 8008592:	4b7e      	ldr	r3, [pc, #504]	; (800878c <_dtoa_r+0x62c>)
 8008594:	2200      	movs	r2, #0
 8008596:	4640      	mov	r0, r8
 8008598:	4649      	mov	r1, r9
 800859a:	f7f7 fe8d 	bl	80002b8 <__aeabi_dsub>
 800859e:	4652      	mov	r2, sl
 80085a0:	465b      	mov	r3, fp
 80085a2:	4680      	mov	r8, r0
 80085a4:	4689      	mov	r9, r1
 80085a6:	f7f8 facf 	bl	8000b48 <__aeabi_dcmpgt>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	f040 8295 	bne.w	8008ada <_dtoa_r+0x97a>
 80085b0:	4652      	mov	r2, sl
 80085b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085b6:	4640      	mov	r0, r8
 80085b8:	4649      	mov	r1, r9
 80085ba:	f7f8 faa7 	bl	8000b0c <__aeabi_dcmplt>
 80085be:	2800      	cmp	r0, #0
 80085c0:	f040 8289 	bne.w	8008ad6 <_dtoa_r+0x976>
 80085c4:	ec5b ab19 	vmov	sl, fp, d9
 80085c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f2c0 8148 	blt.w	8008860 <_dtoa_r+0x700>
 80085d0:	9a00      	ldr	r2, [sp, #0]
 80085d2:	2a0e      	cmp	r2, #14
 80085d4:	f300 8144 	bgt.w	8008860 <_dtoa_r+0x700>
 80085d8:	4b67      	ldr	r3, [pc, #412]	; (8008778 <_dtoa_r+0x618>)
 80085da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f280 80d5 	bge.w	8008794 <_dtoa_r+0x634>
 80085ea:	9b03      	ldr	r3, [sp, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f300 80d1 	bgt.w	8008794 <_dtoa_r+0x634>
 80085f2:	f040 826f 	bne.w	8008ad4 <_dtoa_r+0x974>
 80085f6:	4b65      	ldr	r3, [pc, #404]	; (800878c <_dtoa_r+0x62c>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	4640      	mov	r0, r8
 80085fc:	4649      	mov	r1, r9
 80085fe:	f7f8 f813 	bl	8000628 <__aeabi_dmul>
 8008602:	4652      	mov	r2, sl
 8008604:	465b      	mov	r3, fp
 8008606:	f7f8 fa95 	bl	8000b34 <__aeabi_dcmpge>
 800860a:	9e03      	ldr	r6, [sp, #12]
 800860c:	4637      	mov	r7, r6
 800860e:	2800      	cmp	r0, #0
 8008610:	f040 8245 	bne.w	8008a9e <_dtoa_r+0x93e>
 8008614:	9d01      	ldr	r5, [sp, #4]
 8008616:	2331      	movs	r3, #49	; 0x31
 8008618:	f805 3b01 	strb.w	r3, [r5], #1
 800861c:	9b00      	ldr	r3, [sp, #0]
 800861e:	3301      	adds	r3, #1
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	e240      	b.n	8008aa6 <_dtoa_r+0x946>
 8008624:	07f2      	lsls	r2, r6, #31
 8008626:	d505      	bpl.n	8008634 <_dtoa_r+0x4d4>
 8008628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800862c:	f7f7 fffc 	bl	8000628 <__aeabi_dmul>
 8008630:	3501      	adds	r5, #1
 8008632:	2301      	movs	r3, #1
 8008634:	1076      	asrs	r6, r6, #1
 8008636:	3708      	adds	r7, #8
 8008638:	e777      	b.n	800852a <_dtoa_r+0x3ca>
 800863a:	2502      	movs	r5, #2
 800863c:	e779      	b.n	8008532 <_dtoa_r+0x3d2>
 800863e:	9f00      	ldr	r7, [sp, #0]
 8008640:	9e03      	ldr	r6, [sp, #12]
 8008642:	e794      	b.n	800856e <_dtoa_r+0x40e>
 8008644:	9901      	ldr	r1, [sp, #4]
 8008646:	4b4c      	ldr	r3, [pc, #304]	; (8008778 <_dtoa_r+0x618>)
 8008648:	4431      	add	r1, r6
 800864a:	910d      	str	r1, [sp, #52]	; 0x34
 800864c:	9908      	ldr	r1, [sp, #32]
 800864e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008652:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008656:	2900      	cmp	r1, #0
 8008658:	d043      	beq.n	80086e2 <_dtoa_r+0x582>
 800865a:	494d      	ldr	r1, [pc, #308]	; (8008790 <_dtoa_r+0x630>)
 800865c:	2000      	movs	r0, #0
 800865e:	f7f8 f90d 	bl	800087c <__aeabi_ddiv>
 8008662:	4652      	mov	r2, sl
 8008664:	465b      	mov	r3, fp
 8008666:	f7f7 fe27 	bl	80002b8 <__aeabi_dsub>
 800866a:	9d01      	ldr	r5, [sp, #4]
 800866c:	4682      	mov	sl, r0
 800866e:	468b      	mov	fp, r1
 8008670:	4649      	mov	r1, r9
 8008672:	4640      	mov	r0, r8
 8008674:	f7f8 fa88 	bl	8000b88 <__aeabi_d2iz>
 8008678:	4606      	mov	r6, r0
 800867a:	f7f7 ff6b 	bl	8000554 <__aeabi_i2d>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	4640      	mov	r0, r8
 8008684:	4649      	mov	r1, r9
 8008686:	f7f7 fe17 	bl	80002b8 <__aeabi_dsub>
 800868a:	3630      	adds	r6, #48	; 0x30
 800868c:	f805 6b01 	strb.w	r6, [r5], #1
 8008690:	4652      	mov	r2, sl
 8008692:	465b      	mov	r3, fp
 8008694:	4680      	mov	r8, r0
 8008696:	4689      	mov	r9, r1
 8008698:	f7f8 fa38 	bl	8000b0c <__aeabi_dcmplt>
 800869c:	2800      	cmp	r0, #0
 800869e:	d163      	bne.n	8008768 <_dtoa_r+0x608>
 80086a0:	4642      	mov	r2, r8
 80086a2:	464b      	mov	r3, r9
 80086a4:	4936      	ldr	r1, [pc, #216]	; (8008780 <_dtoa_r+0x620>)
 80086a6:	2000      	movs	r0, #0
 80086a8:	f7f7 fe06 	bl	80002b8 <__aeabi_dsub>
 80086ac:	4652      	mov	r2, sl
 80086ae:	465b      	mov	r3, fp
 80086b0:	f7f8 fa2c 	bl	8000b0c <__aeabi_dcmplt>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	f040 80b5 	bne.w	8008824 <_dtoa_r+0x6c4>
 80086ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086bc:	429d      	cmp	r5, r3
 80086be:	d081      	beq.n	80085c4 <_dtoa_r+0x464>
 80086c0:	4b30      	ldr	r3, [pc, #192]	; (8008784 <_dtoa_r+0x624>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	4650      	mov	r0, sl
 80086c6:	4659      	mov	r1, fp
 80086c8:	f7f7 ffae 	bl	8000628 <__aeabi_dmul>
 80086cc:	4b2d      	ldr	r3, [pc, #180]	; (8008784 <_dtoa_r+0x624>)
 80086ce:	4682      	mov	sl, r0
 80086d0:	468b      	mov	fp, r1
 80086d2:	4640      	mov	r0, r8
 80086d4:	4649      	mov	r1, r9
 80086d6:	2200      	movs	r2, #0
 80086d8:	f7f7 ffa6 	bl	8000628 <__aeabi_dmul>
 80086dc:	4680      	mov	r8, r0
 80086de:	4689      	mov	r9, r1
 80086e0:	e7c6      	b.n	8008670 <_dtoa_r+0x510>
 80086e2:	4650      	mov	r0, sl
 80086e4:	4659      	mov	r1, fp
 80086e6:	f7f7 ff9f 	bl	8000628 <__aeabi_dmul>
 80086ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ec:	9d01      	ldr	r5, [sp, #4]
 80086ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80086f0:	4682      	mov	sl, r0
 80086f2:	468b      	mov	fp, r1
 80086f4:	4649      	mov	r1, r9
 80086f6:	4640      	mov	r0, r8
 80086f8:	f7f8 fa46 	bl	8000b88 <__aeabi_d2iz>
 80086fc:	4606      	mov	r6, r0
 80086fe:	f7f7 ff29 	bl	8000554 <__aeabi_i2d>
 8008702:	3630      	adds	r6, #48	; 0x30
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	f7f7 fdd4 	bl	80002b8 <__aeabi_dsub>
 8008710:	f805 6b01 	strb.w	r6, [r5], #1
 8008714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008716:	429d      	cmp	r5, r3
 8008718:	4680      	mov	r8, r0
 800871a:	4689      	mov	r9, r1
 800871c:	f04f 0200 	mov.w	r2, #0
 8008720:	d124      	bne.n	800876c <_dtoa_r+0x60c>
 8008722:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <_dtoa_r+0x630>)
 8008724:	4650      	mov	r0, sl
 8008726:	4659      	mov	r1, fp
 8008728:	f7f7 fdc8 	bl	80002bc <__adddf3>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4640      	mov	r0, r8
 8008732:	4649      	mov	r1, r9
 8008734:	f7f8 fa08 	bl	8000b48 <__aeabi_dcmpgt>
 8008738:	2800      	cmp	r0, #0
 800873a:	d173      	bne.n	8008824 <_dtoa_r+0x6c4>
 800873c:	4652      	mov	r2, sl
 800873e:	465b      	mov	r3, fp
 8008740:	4913      	ldr	r1, [pc, #76]	; (8008790 <_dtoa_r+0x630>)
 8008742:	2000      	movs	r0, #0
 8008744:	f7f7 fdb8 	bl	80002b8 <__aeabi_dsub>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4640      	mov	r0, r8
 800874e:	4649      	mov	r1, r9
 8008750:	f7f8 f9dc 	bl	8000b0c <__aeabi_dcmplt>
 8008754:	2800      	cmp	r0, #0
 8008756:	f43f af35 	beq.w	80085c4 <_dtoa_r+0x464>
 800875a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800875c:	1e6b      	subs	r3, r5, #1
 800875e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008760:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008764:	2b30      	cmp	r3, #48	; 0x30
 8008766:	d0f8      	beq.n	800875a <_dtoa_r+0x5fa>
 8008768:	9700      	str	r7, [sp, #0]
 800876a:	e049      	b.n	8008800 <_dtoa_r+0x6a0>
 800876c:	4b05      	ldr	r3, [pc, #20]	; (8008784 <_dtoa_r+0x624>)
 800876e:	f7f7 ff5b 	bl	8000628 <__aeabi_dmul>
 8008772:	4680      	mov	r8, r0
 8008774:	4689      	mov	r9, r1
 8008776:	e7bd      	b.n	80086f4 <_dtoa_r+0x594>
 8008778:	0800a7f0 	.word	0x0800a7f0
 800877c:	0800a7c8 	.word	0x0800a7c8
 8008780:	3ff00000 	.word	0x3ff00000
 8008784:	40240000 	.word	0x40240000
 8008788:	401c0000 	.word	0x401c0000
 800878c:	40140000 	.word	0x40140000
 8008790:	3fe00000 	.word	0x3fe00000
 8008794:	9d01      	ldr	r5, [sp, #4]
 8008796:	4656      	mov	r6, sl
 8008798:	465f      	mov	r7, fp
 800879a:	4642      	mov	r2, r8
 800879c:	464b      	mov	r3, r9
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	f7f8 f86b 	bl	800087c <__aeabi_ddiv>
 80087a6:	f7f8 f9ef 	bl	8000b88 <__aeabi_d2iz>
 80087aa:	4682      	mov	sl, r0
 80087ac:	f7f7 fed2 	bl	8000554 <__aeabi_i2d>
 80087b0:	4642      	mov	r2, r8
 80087b2:	464b      	mov	r3, r9
 80087b4:	f7f7 ff38 	bl	8000628 <__aeabi_dmul>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80087c4:	f7f7 fd78 	bl	80002b8 <__aeabi_dsub>
 80087c8:	f805 6b01 	strb.w	r6, [r5], #1
 80087cc:	9e01      	ldr	r6, [sp, #4]
 80087ce:	9f03      	ldr	r7, [sp, #12]
 80087d0:	1bae      	subs	r6, r5, r6
 80087d2:	42b7      	cmp	r7, r6
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	d135      	bne.n	8008846 <_dtoa_r+0x6e6>
 80087da:	f7f7 fd6f 	bl	80002bc <__adddf3>
 80087de:	4642      	mov	r2, r8
 80087e0:	464b      	mov	r3, r9
 80087e2:	4606      	mov	r6, r0
 80087e4:	460f      	mov	r7, r1
 80087e6:	f7f8 f9af 	bl	8000b48 <__aeabi_dcmpgt>
 80087ea:	b9d0      	cbnz	r0, 8008822 <_dtoa_r+0x6c2>
 80087ec:	4642      	mov	r2, r8
 80087ee:	464b      	mov	r3, r9
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	f7f8 f980 	bl	8000af8 <__aeabi_dcmpeq>
 80087f8:	b110      	cbz	r0, 8008800 <_dtoa_r+0x6a0>
 80087fa:	f01a 0f01 	tst.w	sl, #1
 80087fe:	d110      	bne.n	8008822 <_dtoa_r+0x6c2>
 8008800:	4620      	mov	r0, r4
 8008802:	ee18 1a10 	vmov	r1, s16
 8008806:	f000 fd25 	bl	8009254 <_Bfree>
 800880a:	2300      	movs	r3, #0
 800880c:	9800      	ldr	r0, [sp, #0]
 800880e:	702b      	strb	r3, [r5, #0]
 8008810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008812:	3001      	adds	r0, #1
 8008814:	6018      	str	r0, [r3, #0]
 8008816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008818:	2b00      	cmp	r3, #0
 800881a:	f43f acf1 	beq.w	8008200 <_dtoa_r+0xa0>
 800881e:	601d      	str	r5, [r3, #0]
 8008820:	e4ee      	b.n	8008200 <_dtoa_r+0xa0>
 8008822:	9f00      	ldr	r7, [sp, #0]
 8008824:	462b      	mov	r3, r5
 8008826:	461d      	mov	r5, r3
 8008828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800882c:	2a39      	cmp	r2, #57	; 0x39
 800882e:	d106      	bne.n	800883e <_dtoa_r+0x6de>
 8008830:	9a01      	ldr	r2, [sp, #4]
 8008832:	429a      	cmp	r2, r3
 8008834:	d1f7      	bne.n	8008826 <_dtoa_r+0x6c6>
 8008836:	9901      	ldr	r1, [sp, #4]
 8008838:	2230      	movs	r2, #48	; 0x30
 800883a:	3701      	adds	r7, #1
 800883c:	700a      	strb	r2, [r1, #0]
 800883e:	781a      	ldrb	r2, [r3, #0]
 8008840:	3201      	adds	r2, #1
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	e790      	b.n	8008768 <_dtoa_r+0x608>
 8008846:	4ba6      	ldr	r3, [pc, #664]	; (8008ae0 <_dtoa_r+0x980>)
 8008848:	2200      	movs	r2, #0
 800884a:	f7f7 feed 	bl	8000628 <__aeabi_dmul>
 800884e:	2200      	movs	r2, #0
 8008850:	2300      	movs	r3, #0
 8008852:	4606      	mov	r6, r0
 8008854:	460f      	mov	r7, r1
 8008856:	f7f8 f94f 	bl	8000af8 <__aeabi_dcmpeq>
 800885a:	2800      	cmp	r0, #0
 800885c:	d09d      	beq.n	800879a <_dtoa_r+0x63a>
 800885e:	e7cf      	b.n	8008800 <_dtoa_r+0x6a0>
 8008860:	9a08      	ldr	r2, [sp, #32]
 8008862:	2a00      	cmp	r2, #0
 8008864:	f000 80d7 	beq.w	8008a16 <_dtoa_r+0x8b6>
 8008868:	9a06      	ldr	r2, [sp, #24]
 800886a:	2a01      	cmp	r2, #1
 800886c:	f300 80ba 	bgt.w	80089e4 <_dtoa_r+0x884>
 8008870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008872:	2a00      	cmp	r2, #0
 8008874:	f000 80b2 	beq.w	80089dc <_dtoa_r+0x87c>
 8008878:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800887c:	9e07      	ldr	r6, [sp, #28]
 800887e:	9d04      	ldr	r5, [sp, #16]
 8008880:	9a04      	ldr	r2, [sp, #16]
 8008882:	441a      	add	r2, r3
 8008884:	9204      	str	r2, [sp, #16]
 8008886:	9a05      	ldr	r2, [sp, #20]
 8008888:	2101      	movs	r1, #1
 800888a:	441a      	add	r2, r3
 800888c:	4620      	mov	r0, r4
 800888e:	9205      	str	r2, [sp, #20]
 8008890:	f000 fd98 	bl	80093c4 <__i2b>
 8008894:	4607      	mov	r7, r0
 8008896:	2d00      	cmp	r5, #0
 8008898:	dd0c      	ble.n	80088b4 <_dtoa_r+0x754>
 800889a:	9b05      	ldr	r3, [sp, #20]
 800889c:	2b00      	cmp	r3, #0
 800889e:	dd09      	ble.n	80088b4 <_dtoa_r+0x754>
 80088a0:	42ab      	cmp	r3, r5
 80088a2:	9a04      	ldr	r2, [sp, #16]
 80088a4:	bfa8      	it	ge
 80088a6:	462b      	movge	r3, r5
 80088a8:	1ad2      	subs	r2, r2, r3
 80088aa:	9204      	str	r2, [sp, #16]
 80088ac:	9a05      	ldr	r2, [sp, #20]
 80088ae:	1aed      	subs	r5, r5, r3
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	b31b      	cbz	r3, 8008900 <_dtoa_r+0x7a0>
 80088b8:	9b08      	ldr	r3, [sp, #32]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80af 	beq.w	8008a1e <_dtoa_r+0x8be>
 80088c0:	2e00      	cmp	r6, #0
 80088c2:	dd13      	ble.n	80088ec <_dtoa_r+0x78c>
 80088c4:	4639      	mov	r1, r7
 80088c6:	4632      	mov	r2, r6
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fe3b 	bl	8009544 <__pow5mult>
 80088ce:	ee18 2a10 	vmov	r2, s16
 80088d2:	4601      	mov	r1, r0
 80088d4:	4607      	mov	r7, r0
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 fd8a 	bl	80093f0 <__multiply>
 80088dc:	ee18 1a10 	vmov	r1, s16
 80088e0:	4680      	mov	r8, r0
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 fcb6 	bl	8009254 <_Bfree>
 80088e8:	ee08 8a10 	vmov	s16, r8
 80088ec:	9b07      	ldr	r3, [sp, #28]
 80088ee:	1b9a      	subs	r2, r3, r6
 80088f0:	d006      	beq.n	8008900 <_dtoa_r+0x7a0>
 80088f2:	ee18 1a10 	vmov	r1, s16
 80088f6:	4620      	mov	r0, r4
 80088f8:	f000 fe24 	bl	8009544 <__pow5mult>
 80088fc:	ee08 0a10 	vmov	s16, r0
 8008900:	2101      	movs	r1, #1
 8008902:	4620      	mov	r0, r4
 8008904:	f000 fd5e 	bl	80093c4 <__i2b>
 8008908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890a:	2b00      	cmp	r3, #0
 800890c:	4606      	mov	r6, r0
 800890e:	f340 8088 	ble.w	8008a22 <_dtoa_r+0x8c2>
 8008912:	461a      	mov	r2, r3
 8008914:	4601      	mov	r1, r0
 8008916:	4620      	mov	r0, r4
 8008918:	f000 fe14 	bl	8009544 <__pow5mult>
 800891c:	9b06      	ldr	r3, [sp, #24]
 800891e:	2b01      	cmp	r3, #1
 8008920:	4606      	mov	r6, r0
 8008922:	f340 8081 	ble.w	8008a28 <_dtoa_r+0x8c8>
 8008926:	f04f 0800 	mov.w	r8, #0
 800892a:	6933      	ldr	r3, [r6, #16]
 800892c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008930:	6918      	ldr	r0, [r3, #16]
 8008932:	f000 fcf7 	bl	8009324 <__hi0bits>
 8008936:	f1c0 0020 	rsb	r0, r0, #32
 800893a:	9b05      	ldr	r3, [sp, #20]
 800893c:	4418      	add	r0, r3
 800893e:	f010 001f 	ands.w	r0, r0, #31
 8008942:	f000 8092 	beq.w	8008a6a <_dtoa_r+0x90a>
 8008946:	f1c0 0320 	rsb	r3, r0, #32
 800894a:	2b04      	cmp	r3, #4
 800894c:	f340 808a 	ble.w	8008a64 <_dtoa_r+0x904>
 8008950:	f1c0 001c 	rsb	r0, r0, #28
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	4403      	add	r3, r0
 8008958:	9304      	str	r3, [sp, #16]
 800895a:	9b05      	ldr	r3, [sp, #20]
 800895c:	4403      	add	r3, r0
 800895e:	4405      	add	r5, r0
 8008960:	9305      	str	r3, [sp, #20]
 8008962:	9b04      	ldr	r3, [sp, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	dd07      	ble.n	8008978 <_dtoa_r+0x818>
 8008968:	ee18 1a10 	vmov	r1, s16
 800896c:	461a      	mov	r2, r3
 800896e:	4620      	mov	r0, r4
 8008970:	f000 fe42 	bl	80095f8 <__lshift>
 8008974:	ee08 0a10 	vmov	s16, r0
 8008978:	9b05      	ldr	r3, [sp, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	dd05      	ble.n	800898a <_dtoa_r+0x82a>
 800897e:	4631      	mov	r1, r6
 8008980:	461a      	mov	r2, r3
 8008982:	4620      	mov	r0, r4
 8008984:	f000 fe38 	bl	80095f8 <__lshift>
 8008988:	4606      	mov	r6, r0
 800898a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d06e      	beq.n	8008a6e <_dtoa_r+0x90e>
 8008990:	ee18 0a10 	vmov	r0, s16
 8008994:	4631      	mov	r1, r6
 8008996:	f000 fe9f 	bl	80096d8 <__mcmp>
 800899a:	2800      	cmp	r0, #0
 800899c:	da67      	bge.n	8008a6e <_dtoa_r+0x90e>
 800899e:	9b00      	ldr	r3, [sp, #0]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	ee18 1a10 	vmov	r1, s16
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	220a      	movs	r2, #10
 80089aa:	2300      	movs	r3, #0
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fc73 	bl	8009298 <__multadd>
 80089b2:	9b08      	ldr	r3, [sp, #32]
 80089b4:	ee08 0a10 	vmov	s16, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 81b1 	beq.w	8008d20 <_dtoa_r+0xbc0>
 80089be:	2300      	movs	r3, #0
 80089c0:	4639      	mov	r1, r7
 80089c2:	220a      	movs	r2, #10
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fc67 	bl	8009298 <__multadd>
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	4607      	mov	r7, r0
 80089d0:	f300 808e 	bgt.w	8008af0 <_dtoa_r+0x990>
 80089d4:	9b06      	ldr	r3, [sp, #24]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	dc51      	bgt.n	8008a7e <_dtoa_r+0x91e>
 80089da:	e089      	b.n	8008af0 <_dtoa_r+0x990>
 80089dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089e2:	e74b      	b.n	800887c <_dtoa_r+0x71c>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	1e5e      	subs	r6, r3, #1
 80089e8:	9b07      	ldr	r3, [sp, #28]
 80089ea:	42b3      	cmp	r3, r6
 80089ec:	bfbf      	itttt	lt
 80089ee:	9b07      	ldrlt	r3, [sp, #28]
 80089f0:	9607      	strlt	r6, [sp, #28]
 80089f2:	1af2      	sublt	r2, r6, r3
 80089f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80089f6:	bfb6      	itet	lt
 80089f8:	189b      	addlt	r3, r3, r2
 80089fa:	1b9e      	subge	r6, r3, r6
 80089fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	bfb8      	it	lt
 8008a02:	2600      	movlt	r6, #0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	bfb7      	itett	lt
 8008a08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a10:	1a9d      	sublt	r5, r3, r2
 8008a12:	2300      	movlt	r3, #0
 8008a14:	e734      	b.n	8008880 <_dtoa_r+0x720>
 8008a16:	9e07      	ldr	r6, [sp, #28]
 8008a18:	9d04      	ldr	r5, [sp, #16]
 8008a1a:	9f08      	ldr	r7, [sp, #32]
 8008a1c:	e73b      	b.n	8008896 <_dtoa_r+0x736>
 8008a1e:	9a07      	ldr	r2, [sp, #28]
 8008a20:	e767      	b.n	80088f2 <_dtoa_r+0x792>
 8008a22:	9b06      	ldr	r3, [sp, #24]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	dc18      	bgt.n	8008a5a <_dtoa_r+0x8fa>
 8008a28:	f1ba 0f00 	cmp.w	sl, #0
 8008a2c:	d115      	bne.n	8008a5a <_dtoa_r+0x8fa>
 8008a2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a32:	b993      	cbnz	r3, 8008a5a <_dtoa_r+0x8fa>
 8008a34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a38:	0d1b      	lsrs	r3, r3, #20
 8008a3a:	051b      	lsls	r3, r3, #20
 8008a3c:	b183      	cbz	r3, 8008a60 <_dtoa_r+0x900>
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	3301      	adds	r3, #1
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	9b05      	ldr	r3, [sp, #20]
 8008a46:	3301      	adds	r3, #1
 8008a48:	9305      	str	r3, [sp, #20]
 8008a4a:	f04f 0801 	mov.w	r8, #1
 8008a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f47f af6a 	bne.w	800892a <_dtoa_r+0x7ca>
 8008a56:	2001      	movs	r0, #1
 8008a58:	e76f      	b.n	800893a <_dtoa_r+0x7da>
 8008a5a:	f04f 0800 	mov.w	r8, #0
 8008a5e:	e7f6      	b.n	8008a4e <_dtoa_r+0x8ee>
 8008a60:	4698      	mov	r8, r3
 8008a62:	e7f4      	b.n	8008a4e <_dtoa_r+0x8ee>
 8008a64:	f43f af7d 	beq.w	8008962 <_dtoa_r+0x802>
 8008a68:	4618      	mov	r0, r3
 8008a6a:	301c      	adds	r0, #28
 8008a6c:	e772      	b.n	8008954 <_dtoa_r+0x7f4>
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dc37      	bgt.n	8008ae4 <_dtoa_r+0x984>
 8008a74:	9b06      	ldr	r3, [sp, #24]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	dd34      	ble.n	8008ae4 <_dtoa_r+0x984>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	9302      	str	r3, [sp, #8]
 8008a7e:	9b02      	ldr	r3, [sp, #8]
 8008a80:	b96b      	cbnz	r3, 8008a9e <_dtoa_r+0x93e>
 8008a82:	4631      	mov	r1, r6
 8008a84:	2205      	movs	r2, #5
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fc06 	bl	8009298 <__multadd>
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	4606      	mov	r6, r0
 8008a90:	ee18 0a10 	vmov	r0, s16
 8008a94:	f000 fe20 	bl	80096d8 <__mcmp>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	f73f adbb 	bgt.w	8008614 <_dtoa_r+0x4b4>
 8008a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa0:	9d01      	ldr	r5, [sp, #4]
 8008aa2:	43db      	mvns	r3, r3
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	f04f 0800 	mov.w	r8, #0
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 fbd1 	bl	8009254 <_Bfree>
 8008ab2:	2f00      	cmp	r7, #0
 8008ab4:	f43f aea4 	beq.w	8008800 <_dtoa_r+0x6a0>
 8008ab8:	f1b8 0f00 	cmp.w	r8, #0
 8008abc:	d005      	beq.n	8008aca <_dtoa_r+0x96a>
 8008abe:	45b8      	cmp	r8, r7
 8008ac0:	d003      	beq.n	8008aca <_dtoa_r+0x96a>
 8008ac2:	4641      	mov	r1, r8
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 fbc5 	bl	8009254 <_Bfree>
 8008aca:	4639      	mov	r1, r7
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 fbc1 	bl	8009254 <_Bfree>
 8008ad2:	e695      	b.n	8008800 <_dtoa_r+0x6a0>
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	4637      	mov	r7, r6
 8008ad8:	e7e1      	b.n	8008a9e <_dtoa_r+0x93e>
 8008ada:	9700      	str	r7, [sp, #0]
 8008adc:	4637      	mov	r7, r6
 8008ade:	e599      	b.n	8008614 <_dtoa_r+0x4b4>
 8008ae0:	40240000 	.word	0x40240000
 8008ae4:	9b08      	ldr	r3, [sp, #32]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 80ca 	beq.w	8008c80 <_dtoa_r+0xb20>
 8008aec:	9b03      	ldr	r3, [sp, #12]
 8008aee:	9302      	str	r3, [sp, #8]
 8008af0:	2d00      	cmp	r5, #0
 8008af2:	dd05      	ble.n	8008b00 <_dtoa_r+0x9a0>
 8008af4:	4639      	mov	r1, r7
 8008af6:	462a      	mov	r2, r5
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 fd7d 	bl	80095f8 <__lshift>
 8008afe:	4607      	mov	r7, r0
 8008b00:	f1b8 0f00 	cmp.w	r8, #0
 8008b04:	d05b      	beq.n	8008bbe <_dtoa_r+0xa5e>
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fb63 	bl	80091d4 <_Balloc>
 8008b0e:	4605      	mov	r5, r0
 8008b10:	b928      	cbnz	r0, 8008b1e <_dtoa_r+0x9be>
 8008b12:	4b87      	ldr	r3, [pc, #540]	; (8008d30 <_dtoa_r+0xbd0>)
 8008b14:	4602      	mov	r2, r0
 8008b16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b1a:	f7ff bb3b 	b.w	8008194 <_dtoa_r+0x34>
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	3202      	adds	r2, #2
 8008b22:	0092      	lsls	r2, r2, #2
 8008b24:	f107 010c 	add.w	r1, r7, #12
 8008b28:	300c      	adds	r0, #12
 8008b2a:	f000 fb45 	bl	80091b8 <memcpy>
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4629      	mov	r1, r5
 8008b32:	4620      	mov	r0, r4
 8008b34:	f000 fd60 	bl	80095f8 <__lshift>
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	f103 0901 	add.w	r9, r3, #1
 8008b3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	9305      	str	r3, [sp, #20]
 8008b46:	f00a 0301 	and.w	r3, sl, #1
 8008b4a:	46b8      	mov	r8, r7
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	4607      	mov	r7, r0
 8008b50:	4631      	mov	r1, r6
 8008b52:	ee18 0a10 	vmov	r0, s16
 8008b56:	f7ff fa75 	bl	8008044 <quorem>
 8008b5a:	4641      	mov	r1, r8
 8008b5c:	9002      	str	r0, [sp, #8]
 8008b5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b62:	ee18 0a10 	vmov	r0, s16
 8008b66:	f000 fdb7 	bl	80096d8 <__mcmp>
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	9003      	str	r0, [sp, #12]
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fdcd 	bl	8009710 <__mdiff>
 8008b76:	68c2      	ldr	r2, [r0, #12]
 8008b78:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	bb02      	cbnz	r2, 8008bc2 <_dtoa_r+0xa62>
 8008b80:	4601      	mov	r1, r0
 8008b82:	ee18 0a10 	vmov	r0, s16
 8008b86:	f000 fda7 	bl	80096d8 <__mcmp>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	4620      	mov	r0, r4
 8008b90:	9207      	str	r2, [sp, #28]
 8008b92:	f000 fb5f 	bl	8009254 <_Bfree>
 8008b96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b9a:	ea43 0102 	orr.w	r1, r3, r2
 8008b9e:	9b04      	ldr	r3, [sp, #16]
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	464d      	mov	r5, r9
 8008ba4:	d10f      	bne.n	8008bc6 <_dtoa_r+0xa66>
 8008ba6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008baa:	d02a      	beq.n	8008c02 <_dtoa_r+0xaa2>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	dd02      	ble.n	8008bb8 <_dtoa_r+0xa58>
 8008bb2:	9b02      	ldr	r3, [sp, #8]
 8008bb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008bb8:	f88b a000 	strb.w	sl, [fp]
 8008bbc:	e775      	b.n	8008aaa <_dtoa_r+0x94a>
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	e7ba      	b.n	8008b38 <_dtoa_r+0x9d8>
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	e7e2      	b.n	8008b8c <_dtoa_r+0xa2c>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	db04      	blt.n	8008bd6 <_dtoa_r+0xa76>
 8008bcc:	9906      	ldr	r1, [sp, #24]
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	9904      	ldr	r1, [sp, #16]
 8008bd2:	430b      	orrs	r3, r1
 8008bd4:	d122      	bne.n	8008c1c <_dtoa_r+0xabc>
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	ddee      	ble.n	8008bb8 <_dtoa_r+0xa58>
 8008bda:	ee18 1a10 	vmov	r1, s16
 8008bde:	2201      	movs	r2, #1
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 fd09 	bl	80095f8 <__lshift>
 8008be6:	4631      	mov	r1, r6
 8008be8:	ee08 0a10 	vmov	s16, r0
 8008bec:	f000 fd74 	bl	80096d8 <__mcmp>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	dc03      	bgt.n	8008bfc <_dtoa_r+0xa9c>
 8008bf4:	d1e0      	bne.n	8008bb8 <_dtoa_r+0xa58>
 8008bf6:	f01a 0f01 	tst.w	sl, #1
 8008bfa:	d0dd      	beq.n	8008bb8 <_dtoa_r+0xa58>
 8008bfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c00:	d1d7      	bne.n	8008bb2 <_dtoa_r+0xa52>
 8008c02:	2339      	movs	r3, #57	; 0x39
 8008c04:	f88b 3000 	strb.w	r3, [fp]
 8008c08:	462b      	mov	r3, r5
 8008c0a:	461d      	mov	r5, r3
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c12:	2a39      	cmp	r2, #57	; 0x39
 8008c14:	d071      	beq.n	8008cfa <_dtoa_r+0xb9a>
 8008c16:	3201      	adds	r2, #1
 8008c18:	701a      	strb	r2, [r3, #0]
 8008c1a:	e746      	b.n	8008aaa <_dtoa_r+0x94a>
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	dd07      	ble.n	8008c30 <_dtoa_r+0xad0>
 8008c20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c24:	d0ed      	beq.n	8008c02 <_dtoa_r+0xaa2>
 8008c26:	f10a 0301 	add.w	r3, sl, #1
 8008c2a:	f88b 3000 	strb.w	r3, [fp]
 8008c2e:	e73c      	b.n	8008aaa <_dtoa_r+0x94a>
 8008c30:	9b05      	ldr	r3, [sp, #20]
 8008c32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c36:	4599      	cmp	r9, r3
 8008c38:	d047      	beq.n	8008cca <_dtoa_r+0xb6a>
 8008c3a:	ee18 1a10 	vmov	r1, s16
 8008c3e:	2300      	movs	r3, #0
 8008c40:	220a      	movs	r2, #10
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fb28 	bl	8009298 <__multadd>
 8008c48:	45b8      	cmp	r8, r7
 8008c4a:	ee08 0a10 	vmov	s16, r0
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	f04f 020a 	mov.w	r2, #10
 8008c56:	4641      	mov	r1, r8
 8008c58:	4620      	mov	r0, r4
 8008c5a:	d106      	bne.n	8008c6a <_dtoa_r+0xb0a>
 8008c5c:	f000 fb1c 	bl	8009298 <__multadd>
 8008c60:	4680      	mov	r8, r0
 8008c62:	4607      	mov	r7, r0
 8008c64:	f109 0901 	add.w	r9, r9, #1
 8008c68:	e772      	b.n	8008b50 <_dtoa_r+0x9f0>
 8008c6a:	f000 fb15 	bl	8009298 <__multadd>
 8008c6e:	4639      	mov	r1, r7
 8008c70:	4680      	mov	r8, r0
 8008c72:	2300      	movs	r3, #0
 8008c74:	220a      	movs	r2, #10
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fb0e 	bl	8009298 <__multadd>
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	e7f1      	b.n	8008c64 <_dtoa_r+0xb04>
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	9302      	str	r3, [sp, #8]
 8008c84:	9d01      	ldr	r5, [sp, #4]
 8008c86:	ee18 0a10 	vmov	r0, s16
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	f7ff f9da 	bl	8008044 <quorem>
 8008c90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c94:	9b01      	ldr	r3, [sp, #4]
 8008c96:	f805 ab01 	strb.w	sl, [r5], #1
 8008c9a:	1aea      	subs	r2, r5, r3
 8008c9c:	9b02      	ldr	r3, [sp, #8]
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	dd09      	ble.n	8008cb6 <_dtoa_r+0xb56>
 8008ca2:	ee18 1a10 	vmov	r1, s16
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	220a      	movs	r2, #10
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 faf4 	bl	8009298 <__multadd>
 8008cb0:	ee08 0a10 	vmov	s16, r0
 8008cb4:	e7e7      	b.n	8008c86 <_dtoa_r+0xb26>
 8008cb6:	9b02      	ldr	r3, [sp, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	bfc8      	it	gt
 8008cbc:	461d      	movgt	r5, r3
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	bfd8      	it	le
 8008cc2:	2501      	movle	r5, #1
 8008cc4:	441d      	add	r5, r3
 8008cc6:	f04f 0800 	mov.w	r8, #0
 8008cca:	ee18 1a10 	vmov	r1, s16
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 fc91 	bl	80095f8 <__lshift>
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	ee08 0a10 	vmov	s16, r0
 8008cdc:	f000 fcfc 	bl	80096d8 <__mcmp>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	dc91      	bgt.n	8008c08 <_dtoa_r+0xaa8>
 8008ce4:	d102      	bne.n	8008cec <_dtoa_r+0xb8c>
 8008ce6:	f01a 0f01 	tst.w	sl, #1
 8008cea:	d18d      	bne.n	8008c08 <_dtoa_r+0xaa8>
 8008cec:	462b      	mov	r3, r5
 8008cee:	461d      	mov	r5, r3
 8008cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cf4:	2a30      	cmp	r2, #48	; 0x30
 8008cf6:	d0fa      	beq.n	8008cee <_dtoa_r+0xb8e>
 8008cf8:	e6d7      	b.n	8008aaa <_dtoa_r+0x94a>
 8008cfa:	9a01      	ldr	r2, [sp, #4]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d184      	bne.n	8008c0a <_dtoa_r+0xaaa>
 8008d00:	9b00      	ldr	r3, [sp, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	2331      	movs	r3, #49	; 0x31
 8008d08:	7013      	strb	r3, [r2, #0]
 8008d0a:	e6ce      	b.n	8008aaa <_dtoa_r+0x94a>
 8008d0c:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <_dtoa_r+0xbd4>)
 8008d0e:	f7ff ba95 	b.w	800823c <_dtoa_r+0xdc>
 8008d12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f47f aa6e 	bne.w	80081f6 <_dtoa_r+0x96>
 8008d1a:	4b07      	ldr	r3, [pc, #28]	; (8008d38 <_dtoa_r+0xbd8>)
 8008d1c:	f7ff ba8e 	b.w	800823c <_dtoa_r+0xdc>
 8008d20:	9b02      	ldr	r3, [sp, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dcae      	bgt.n	8008c84 <_dtoa_r+0xb24>
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	f73f aea8 	bgt.w	8008a7e <_dtoa_r+0x91e>
 8008d2e:	e7a9      	b.n	8008c84 <_dtoa_r+0xb24>
 8008d30:	0800a6f5 	.word	0x0800a6f5
 8008d34:	0800a4b8 	.word	0x0800a4b8
 8008d38:	0800a68d 	.word	0x0800a68d

08008d3c <__sflush_r>:
 8008d3c:	898a      	ldrh	r2, [r1, #12]
 8008d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d42:	4605      	mov	r5, r0
 8008d44:	0710      	lsls	r0, r2, #28
 8008d46:	460c      	mov	r4, r1
 8008d48:	d458      	bmi.n	8008dfc <__sflush_r+0xc0>
 8008d4a:	684b      	ldr	r3, [r1, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dc05      	bgt.n	8008d5c <__sflush_r+0x20>
 8008d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dc02      	bgt.n	8008d5c <__sflush_r+0x20>
 8008d56:	2000      	movs	r0, #0
 8008d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	d0f9      	beq.n	8008d56 <__sflush_r+0x1a>
 8008d62:	2300      	movs	r3, #0
 8008d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d68:	682f      	ldr	r7, [r5, #0]
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	d032      	beq.n	8008dd4 <__sflush_r+0x98>
 8008d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	075a      	lsls	r2, r3, #29
 8008d74:	d505      	bpl.n	8008d82 <__sflush_r+0x46>
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	1ac0      	subs	r0, r0, r3
 8008d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d7c:	b10b      	cbz	r3, 8008d82 <__sflush_r+0x46>
 8008d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d80:	1ac0      	subs	r0, r0, r3
 8008d82:	2300      	movs	r3, #0
 8008d84:	4602      	mov	r2, r0
 8008d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d88:	6a21      	ldr	r1, [r4, #32]
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	47b0      	blx	r6
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	d106      	bne.n	8008da2 <__sflush_r+0x66>
 8008d94:	6829      	ldr	r1, [r5, #0]
 8008d96:	291d      	cmp	r1, #29
 8008d98:	d82c      	bhi.n	8008df4 <__sflush_r+0xb8>
 8008d9a:	4a2a      	ldr	r2, [pc, #168]	; (8008e44 <__sflush_r+0x108>)
 8008d9c:	40ca      	lsrs	r2, r1
 8008d9e:	07d6      	lsls	r6, r2, #31
 8008da0:	d528      	bpl.n	8008df4 <__sflush_r+0xb8>
 8008da2:	2200      	movs	r2, #0
 8008da4:	6062      	str	r2, [r4, #4]
 8008da6:	04d9      	lsls	r1, r3, #19
 8008da8:	6922      	ldr	r2, [r4, #16]
 8008daa:	6022      	str	r2, [r4, #0]
 8008dac:	d504      	bpl.n	8008db8 <__sflush_r+0x7c>
 8008dae:	1c42      	adds	r2, r0, #1
 8008db0:	d101      	bne.n	8008db6 <__sflush_r+0x7a>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	b903      	cbnz	r3, 8008db8 <__sflush_r+0x7c>
 8008db6:	6560      	str	r0, [r4, #84]	; 0x54
 8008db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dba:	602f      	str	r7, [r5, #0]
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	d0ca      	beq.n	8008d56 <__sflush_r+0x1a>
 8008dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	d002      	beq.n	8008dce <__sflush_r+0x92>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f000 fd9d 	bl	8009908 <_free_r>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8008dd2:	e7c1      	b.n	8008d58 <__sflush_r+0x1c>
 8008dd4:	6a21      	ldr	r1, [r4, #32]
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4628      	mov	r0, r5
 8008dda:	47b0      	blx	r6
 8008ddc:	1c41      	adds	r1, r0, #1
 8008dde:	d1c7      	bne.n	8008d70 <__sflush_r+0x34>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0c4      	beq.n	8008d70 <__sflush_r+0x34>
 8008de6:	2b1d      	cmp	r3, #29
 8008de8:	d001      	beq.n	8008dee <__sflush_r+0xb2>
 8008dea:	2b16      	cmp	r3, #22
 8008dec:	d101      	bne.n	8008df2 <__sflush_r+0xb6>
 8008dee:	602f      	str	r7, [r5, #0]
 8008df0:	e7b1      	b.n	8008d56 <__sflush_r+0x1a>
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df8:	81a3      	strh	r3, [r4, #12]
 8008dfa:	e7ad      	b.n	8008d58 <__sflush_r+0x1c>
 8008dfc:	690f      	ldr	r7, [r1, #16]
 8008dfe:	2f00      	cmp	r7, #0
 8008e00:	d0a9      	beq.n	8008d56 <__sflush_r+0x1a>
 8008e02:	0793      	lsls	r3, r2, #30
 8008e04:	680e      	ldr	r6, [r1, #0]
 8008e06:	bf08      	it	eq
 8008e08:	694b      	ldreq	r3, [r1, #20]
 8008e0a:	600f      	str	r7, [r1, #0]
 8008e0c:	bf18      	it	ne
 8008e0e:	2300      	movne	r3, #0
 8008e10:	eba6 0807 	sub.w	r8, r6, r7
 8008e14:	608b      	str	r3, [r1, #8]
 8008e16:	f1b8 0f00 	cmp.w	r8, #0
 8008e1a:	dd9c      	ble.n	8008d56 <__sflush_r+0x1a>
 8008e1c:	6a21      	ldr	r1, [r4, #32]
 8008e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e20:	4643      	mov	r3, r8
 8008e22:	463a      	mov	r2, r7
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b0      	blx	r6
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	dc06      	bgt.n	8008e3a <__sflush_r+0xfe>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e38:	e78e      	b.n	8008d58 <__sflush_r+0x1c>
 8008e3a:	4407      	add	r7, r0
 8008e3c:	eba8 0800 	sub.w	r8, r8, r0
 8008e40:	e7e9      	b.n	8008e16 <__sflush_r+0xda>
 8008e42:	bf00      	nop
 8008e44:	20400001 	.word	0x20400001

08008e48 <_fflush_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	690b      	ldr	r3, [r1, #16]
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	b913      	cbnz	r3, 8008e58 <_fflush_r+0x10>
 8008e52:	2500      	movs	r5, #0
 8008e54:	4628      	mov	r0, r5
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	b118      	cbz	r0, 8008e62 <_fflush_r+0x1a>
 8008e5a:	6983      	ldr	r3, [r0, #24]
 8008e5c:	b90b      	cbnz	r3, 8008e62 <_fflush_r+0x1a>
 8008e5e:	f000 f887 	bl	8008f70 <__sinit>
 8008e62:	4b14      	ldr	r3, [pc, #80]	; (8008eb4 <_fflush_r+0x6c>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	d11b      	bne.n	8008ea0 <_fflush_r+0x58>
 8008e68:	686c      	ldr	r4, [r5, #4]
 8008e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0ef      	beq.n	8008e52 <_fflush_r+0xa>
 8008e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e74:	07d0      	lsls	r0, r2, #31
 8008e76:	d404      	bmi.n	8008e82 <_fflush_r+0x3a>
 8008e78:	0599      	lsls	r1, r3, #22
 8008e7a:	d402      	bmi.n	8008e82 <_fflush_r+0x3a>
 8008e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e7e:	f000 f92c 	bl	80090da <__retarget_lock_acquire_recursive>
 8008e82:	4628      	mov	r0, r5
 8008e84:	4621      	mov	r1, r4
 8008e86:	f7ff ff59 	bl	8008d3c <__sflush_r>
 8008e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e8c:	07da      	lsls	r2, r3, #31
 8008e8e:	4605      	mov	r5, r0
 8008e90:	d4e0      	bmi.n	8008e54 <_fflush_r+0xc>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	059b      	lsls	r3, r3, #22
 8008e96:	d4dd      	bmi.n	8008e54 <_fflush_r+0xc>
 8008e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9a:	f000 f91f 	bl	80090dc <__retarget_lock_release_recursive>
 8008e9e:	e7d9      	b.n	8008e54 <_fflush_r+0xc>
 8008ea0:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <_fflush_r+0x70>)
 8008ea2:	429c      	cmp	r4, r3
 8008ea4:	d101      	bne.n	8008eaa <_fflush_r+0x62>
 8008ea6:	68ac      	ldr	r4, [r5, #8]
 8008ea8:	e7df      	b.n	8008e6a <_fflush_r+0x22>
 8008eaa:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <_fflush_r+0x74>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	bf08      	it	eq
 8008eb0:	68ec      	ldreq	r4, [r5, #12]
 8008eb2:	e7da      	b.n	8008e6a <_fflush_r+0x22>
 8008eb4:	0800a728 	.word	0x0800a728
 8008eb8:	0800a748 	.word	0x0800a748
 8008ebc:	0800a708 	.word	0x0800a708

08008ec0 <std>:
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ece:	6083      	str	r3, [r0, #8]
 8008ed0:	8181      	strh	r1, [r0, #12]
 8008ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ed4:	81c2      	strh	r2, [r0, #14]
 8008ed6:	6183      	str	r3, [r0, #24]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	2208      	movs	r2, #8
 8008edc:	305c      	adds	r0, #92	; 0x5c
 8008ede:	f7fe f9eb 	bl	80072b8 <memset>
 8008ee2:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <std+0x38>)
 8008ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ee6:	4b05      	ldr	r3, [pc, #20]	; (8008efc <std+0x3c>)
 8008ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eea:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <std+0x40>)
 8008eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008eee:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <std+0x44>)
 8008ef0:	6224      	str	r4, [r4, #32]
 8008ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ef4:	bd10      	pop	{r4, pc}
 8008ef6:	bf00      	nop
 8008ef8:	08009d9d 	.word	0x08009d9d
 8008efc:	08009dbf 	.word	0x08009dbf
 8008f00:	08009df7 	.word	0x08009df7
 8008f04:	08009e1b 	.word	0x08009e1b

08008f08 <_cleanup_r>:
 8008f08:	4901      	ldr	r1, [pc, #4]	; (8008f10 <_cleanup_r+0x8>)
 8008f0a:	f000 b8c1 	b.w	8009090 <_fwalk_reent>
 8008f0e:	bf00      	nop
 8008f10:	08008e49 	.word	0x08008e49

08008f14 <__sfmoreglue>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	2268      	movs	r2, #104	; 0x68
 8008f18:	1e4d      	subs	r5, r1, #1
 8008f1a:	4355      	muls	r5, r2
 8008f1c:	460e      	mov	r6, r1
 8008f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f22:	f000 fd5d 	bl	80099e0 <_malloc_r>
 8008f26:	4604      	mov	r4, r0
 8008f28:	b140      	cbz	r0, 8008f3c <__sfmoreglue+0x28>
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8008f30:	300c      	adds	r0, #12
 8008f32:	60a0      	str	r0, [r4, #8]
 8008f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f38:	f7fe f9be 	bl	80072b8 <memset>
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}

08008f40 <__sfp_lock_acquire>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__sfp_lock_acquire+0x8>)
 8008f42:	f000 b8ca 	b.w	80090da <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	20004fdd 	.word	0x20004fdd

08008f4c <__sfp_lock_release>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__sfp_lock_release+0x8>)
 8008f4e:	f000 b8c5 	b.w	80090dc <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	20004fdd 	.word	0x20004fdd

08008f58 <__sinit_lock_acquire>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__sinit_lock_acquire+0x8>)
 8008f5a:	f000 b8be 	b.w	80090da <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	20004fde 	.word	0x20004fde

08008f64 <__sinit_lock_release>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sinit_lock_release+0x8>)
 8008f66:	f000 b8b9 	b.w	80090dc <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	20004fde 	.word	0x20004fde

08008f70 <__sinit>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	4604      	mov	r4, r0
 8008f74:	f7ff fff0 	bl	8008f58 <__sinit_lock_acquire>
 8008f78:	69a3      	ldr	r3, [r4, #24]
 8008f7a:	b11b      	cbz	r3, 8008f84 <__sinit+0x14>
 8008f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f80:	f7ff bff0 	b.w	8008f64 <__sinit_lock_release>
 8008f84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f88:	6523      	str	r3, [r4, #80]	; 0x50
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <__sinit+0x68>)
 8008f8c:	4a13      	ldr	r2, [pc, #76]	; (8008fdc <__sinit+0x6c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	bf04      	itt	eq
 8008f96:	2301      	moveq	r3, #1
 8008f98:	61a3      	streq	r3, [r4, #24]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 f820 	bl	8008fe0 <__sfp>
 8008fa0:	6060      	str	r0, [r4, #4]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 f81c 	bl	8008fe0 <__sfp>
 8008fa8:	60a0      	str	r0, [r4, #8]
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 f818 	bl	8008fe0 <__sfp>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	60e0      	str	r0, [r4, #12]
 8008fb4:	2104      	movs	r1, #4
 8008fb6:	6860      	ldr	r0, [r4, #4]
 8008fb8:	f7ff ff82 	bl	8008ec0 <std>
 8008fbc:	68a0      	ldr	r0, [r4, #8]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	2109      	movs	r1, #9
 8008fc2:	f7ff ff7d 	bl	8008ec0 <std>
 8008fc6:	68e0      	ldr	r0, [r4, #12]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	2112      	movs	r1, #18
 8008fcc:	f7ff ff78 	bl	8008ec0 <std>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	61a3      	str	r3, [r4, #24]
 8008fd4:	e7d2      	b.n	8008f7c <__sinit+0xc>
 8008fd6:	bf00      	nop
 8008fd8:	0800a4a4 	.word	0x0800a4a4
 8008fdc:	08008f09 	.word	0x08008f09

08008fe0 <__sfp>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	f7ff ffac 	bl	8008f40 <__sfp_lock_acquire>
 8008fe8:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <__sfp+0x84>)
 8008fea:	681e      	ldr	r6, [r3, #0]
 8008fec:	69b3      	ldr	r3, [r6, #24]
 8008fee:	b913      	cbnz	r3, 8008ff6 <__sfp+0x16>
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f7ff ffbd 	bl	8008f70 <__sinit>
 8008ff6:	3648      	adds	r6, #72	; 0x48
 8008ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	d503      	bpl.n	8009008 <__sfp+0x28>
 8009000:	6833      	ldr	r3, [r6, #0]
 8009002:	b30b      	cbz	r3, 8009048 <__sfp+0x68>
 8009004:	6836      	ldr	r6, [r6, #0]
 8009006:	e7f7      	b.n	8008ff8 <__sfp+0x18>
 8009008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800900c:	b9d5      	cbnz	r5, 8009044 <__sfp+0x64>
 800900e:	4b16      	ldr	r3, [pc, #88]	; (8009068 <__sfp+0x88>)
 8009010:	60e3      	str	r3, [r4, #12]
 8009012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009016:	6665      	str	r5, [r4, #100]	; 0x64
 8009018:	f000 f85e 	bl	80090d8 <__retarget_lock_init_recursive>
 800901c:	f7ff ff96 	bl	8008f4c <__sfp_lock_release>
 8009020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009028:	6025      	str	r5, [r4, #0]
 800902a:	61a5      	str	r5, [r4, #24]
 800902c:	2208      	movs	r2, #8
 800902e:	4629      	mov	r1, r5
 8009030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009034:	f7fe f940 	bl	80072b8 <memset>
 8009038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800903c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009040:	4620      	mov	r0, r4
 8009042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009044:	3468      	adds	r4, #104	; 0x68
 8009046:	e7d9      	b.n	8008ffc <__sfp+0x1c>
 8009048:	2104      	movs	r1, #4
 800904a:	4638      	mov	r0, r7
 800904c:	f7ff ff62 	bl	8008f14 <__sfmoreglue>
 8009050:	4604      	mov	r4, r0
 8009052:	6030      	str	r0, [r6, #0]
 8009054:	2800      	cmp	r0, #0
 8009056:	d1d5      	bne.n	8009004 <__sfp+0x24>
 8009058:	f7ff ff78 	bl	8008f4c <__sfp_lock_release>
 800905c:	230c      	movs	r3, #12
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	e7ee      	b.n	8009040 <__sfp+0x60>
 8009062:	bf00      	nop
 8009064:	0800a4a4 	.word	0x0800a4a4
 8009068:	ffff0001 	.word	0xffff0001

0800906c <fiprintf>:
 800906c:	b40e      	push	{r1, r2, r3}
 800906e:	b503      	push	{r0, r1, lr}
 8009070:	4601      	mov	r1, r0
 8009072:	ab03      	add	r3, sp, #12
 8009074:	4805      	ldr	r0, [pc, #20]	; (800908c <fiprintf+0x20>)
 8009076:	f853 2b04 	ldr.w	r2, [r3], #4
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	f000 fd4d 	bl	8009b1c <_vfiprintf_r>
 8009082:	b002      	add	sp, #8
 8009084:	f85d eb04 	ldr.w	lr, [sp], #4
 8009088:	b003      	add	sp, #12
 800908a:	4770      	bx	lr
 800908c:	20000070 	.word	0x20000070

08009090 <_fwalk_reent>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4606      	mov	r6, r0
 8009096:	4688      	mov	r8, r1
 8009098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800909c:	2700      	movs	r7, #0
 800909e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090a2:	f1b9 0901 	subs.w	r9, r9, #1
 80090a6:	d505      	bpl.n	80090b4 <_fwalk_reent+0x24>
 80090a8:	6824      	ldr	r4, [r4, #0]
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	d1f7      	bne.n	800909e <_fwalk_reent+0xe>
 80090ae:	4638      	mov	r0, r7
 80090b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d907      	bls.n	80090ca <_fwalk_reent+0x3a>
 80090ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090be:	3301      	adds	r3, #1
 80090c0:	d003      	beq.n	80090ca <_fwalk_reent+0x3a>
 80090c2:	4629      	mov	r1, r5
 80090c4:	4630      	mov	r0, r6
 80090c6:	47c0      	blx	r8
 80090c8:	4307      	orrs	r7, r0
 80090ca:	3568      	adds	r5, #104	; 0x68
 80090cc:	e7e9      	b.n	80090a2 <_fwalk_reent+0x12>
	...

080090d0 <_localeconv_r>:
 80090d0:	4800      	ldr	r0, [pc, #0]	; (80090d4 <_localeconv_r+0x4>)
 80090d2:	4770      	bx	lr
 80090d4:	200001c4 	.word	0x200001c4

080090d8 <__retarget_lock_init_recursive>:
 80090d8:	4770      	bx	lr

080090da <__retarget_lock_acquire_recursive>:
 80090da:	4770      	bx	lr

080090dc <__retarget_lock_release_recursive>:
 80090dc:	4770      	bx	lr

080090de <__swhatbuf_r>:
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	460e      	mov	r6, r1
 80090e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e6:	2900      	cmp	r1, #0
 80090e8:	b096      	sub	sp, #88	; 0x58
 80090ea:	4614      	mov	r4, r2
 80090ec:	461d      	mov	r5, r3
 80090ee:	da08      	bge.n	8009102 <__swhatbuf_r+0x24>
 80090f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	602a      	str	r2, [r5, #0]
 80090f8:	061a      	lsls	r2, r3, #24
 80090fa:	d410      	bmi.n	800911e <__swhatbuf_r+0x40>
 80090fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009100:	e00e      	b.n	8009120 <__swhatbuf_r+0x42>
 8009102:	466a      	mov	r2, sp
 8009104:	f000 feb8 	bl	8009e78 <_fstat_r>
 8009108:	2800      	cmp	r0, #0
 800910a:	dbf1      	blt.n	80090f0 <__swhatbuf_r+0x12>
 800910c:	9a01      	ldr	r2, [sp, #4]
 800910e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009112:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009116:	425a      	negs	r2, r3
 8009118:	415a      	adcs	r2, r3
 800911a:	602a      	str	r2, [r5, #0]
 800911c:	e7ee      	b.n	80090fc <__swhatbuf_r+0x1e>
 800911e:	2340      	movs	r3, #64	; 0x40
 8009120:	2000      	movs	r0, #0
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	b016      	add	sp, #88	; 0x58
 8009126:	bd70      	pop	{r4, r5, r6, pc}

08009128 <__smakebuf_r>:
 8009128:	898b      	ldrh	r3, [r1, #12]
 800912a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800912c:	079d      	lsls	r5, r3, #30
 800912e:	4606      	mov	r6, r0
 8009130:	460c      	mov	r4, r1
 8009132:	d507      	bpl.n	8009144 <__smakebuf_r+0x1c>
 8009134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	6123      	str	r3, [r4, #16]
 800913c:	2301      	movs	r3, #1
 800913e:	6163      	str	r3, [r4, #20]
 8009140:	b002      	add	sp, #8
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	ab01      	add	r3, sp, #4
 8009146:	466a      	mov	r2, sp
 8009148:	f7ff ffc9 	bl	80090de <__swhatbuf_r>
 800914c:	9900      	ldr	r1, [sp, #0]
 800914e:	4605      	mov	r5, r0
 8009150:	4630      	mov	r0, r6
 8009152:	f000 fc45 	bl	80099e0 <_malloc_r>
 8009156:	b948      	cbnz	r0, 800916c <__smakebuf_r+0x44>
 8009158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915c:	059a      	lsls	r2, r3, #22
 800915e:	d4ef      	bmi.n	8009140 <__smakebuf_r+0x18>
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	f043 0302 	orr.w	r3, r3, #2
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	e7e3      	b.n	8009134 <__smakebuf_r+0xc>
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <__smakebuf_r+0x7c>)
 800916e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	6020      	str	r0, [r4, #0]
 8009174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	9b00      	ldr	r3, [sp, #0]
 800917c:	6163      	str	r3, [r4, #20]
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	6120      	str	r0, [r4, #16]
 8009182:	b15b      	cbz	r3, 800919c <__smakebuf_r+0x74>
 8009184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009188:	4630      	mov	r0, r6
 800918a:	f000 fe87 	bl	8009e9c <_isatty_r>
 800918e:	b128      	cbz	r0, 800919c <__smakebuf_r+0x74>
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	f023 0303 	bic.w	r3, r3, #3
 8009196:	f043 0301 	orr.w	r3, r3, #1
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	89a0      	ldrh	r0, [r4, #12]
 800919e:	4305      	orrs	r5, r0
 80091a0:	81a5      	strh	r5, [r4, #12]
 80091a2:	e7cd      	b.n	8009140 <__smakebuf_r+0x18>
 80091a4:	08008f09 	.word	0x08008f09

080091a8 <malloc>:
 80091a8:	4b02      	ldr	r3, [pc, #8]	; (80091b4 <malloc+0xc>)
 80091aa:	4601      	mov	r1, r0
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	f000 bc17 	b.w	80099e0 <_malloc_r>
 80091b2:	bf00      	nop
 80091b4:	20000070 	.word	0x20000070

080091b8 <memcpy>:
 80091b8:	440a      	add	r2, r1
 80091ba:	4291      	cmp	r1, r2
 80091bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80091c0:	d100      	bne.n	80091c4 <memcpy+0xc>
 80091c2:	4770      	bx	lr
 80091c4:	b510      	push	{r4, lr}
 80091c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ce:	4291      	cmp	r1, r2
 80091d0:	d1f9      	bne.n	80091c6 <memcpy+0xe>
 80091d2:	bd10      	pop	{r4, pc}

080091d4 <_Balloc>:
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091d8:	4604      	mov	r4, r0
 80091da:	460d      	mov	r5, r1
 80091dc:	b976      	cbnz	r6, 80091fc <_Balloc+0x28>
 80091de:	2010      	movs	r0, #16
 80091e0:	f7ff ffe2 	bl	80091a8 <malloc>
 80091e4:	4602      	mov	r2, r0
 80091e6:	6260      	str	r0, [r4, #36]	; 0x24
 80091e8:	b920      	cbnz	r0, 80091f4 <_Balloc+0x20>
 80091ea:	4b18      	ldr	r3, [pc, #96]	; (800924c <_Balloc+0x78>)
 80091ec:	4818      	ldr	r0, [pc, #96]	; (8009250 <_Balloc+0x7c>)
 80091ee:	2166      	movs	r1, #102	; 0x66
 80091f0:	f7fe ff0a 	bl	8008008 <__assert_func>
 80091f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091f8:	6006      	str	r6, [r0, #0]
 80091fa:	60c6      	str	r6, [r0, #12]
 80091fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091fe:	68f3      	ldr	r3, [r6, #12]
 8009200:	b183      	cbz	r3, 8009224 <_Balloc+0x50>
 8009202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800920a:	b9b8      	cbnz	r0, 800923c <_Balloc+0x68>
 800920c:	2101      	movs	r1, #1
 800920e:	fa01 f605 	lsl.w	r6, r1, r5
 8009212:	1d72      	adds	r2, r6, #5
 8009214:	0092      	lsls	r2, r2, #2
 8009216:	4620      	mov	r0, r4
 8009218:	f000 fb60 	bl	80098dc <_calloc_r>
 800921c:	b160      	cbz	r0, 8009238 <_Balloc+0x64>
 800921e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009222:	e00e      	b.n	8009242 <_Balloc+0x6e>
 8009224:	2221      	movs	r2, #33	; 0x21
 8009226:	2104      	movs	r1, #4
 8009228:	4620      	mov	r0, r4
 800922a:	f000 fb57 	bl	80098dc <_calloc_r>
 800922e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009230:	60f0      	str	r0, [r6, #12]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e4      	bne.n	8009202 <_Balloc+0x2e>
 8009238:	2000      	movs	r0, #0
 800923a:	bd70      	pop	{r4, r5, r6, pc}
 800923c:	6802      	ldr	r2, [r0, #0]
 800923e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009242:	2300      	movs	r3, #0
 8009244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009248:	e7f7      	b.n	800923a <_Balloc+0x66>
 800924a:	bf00      	nop
 800924c:	0800a4dc 	.word	0x0800a4dc
 8009250:	0800a768 	.word	0x0800a768

08009254 <_Bfree>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009258:	4605      	mov	r5, r0
 800925a:	460c      	mov	r4, r1
 800925c:	b976      	cbnz	r6, 800927c <_Bfree+0x28>
 800925e:	2010      	movs	r0, #16
 8009260:	f7ff ffa2 	bl	80091a8 <malloc>
 8009264:	4602      	mov	r2, r0
 8009266:	6268      	str	r0, [r5, #36]	; 0x24
 8009268:	b920      	cbnz	r0, 8009274 <_Bfree+0x20>
 800926a:	4b09      	ldr	r3, [pc, #36]	; (8009290 <_Bfree+0x3c>)
 800926c:	4809      	ldr	r0, [pc, #36]	; (8009294 <_Bfree+0x40>)
 800926e:	218a      	movs	r1, #138	; 0x8a
 8009270:	f7fe feca 	bl	8008008 <__assert_func>
 8009274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009278:	6006      	str	r6, [r0, #0]
 800927a:	60c6      	str	r6, [r0, #12]
 800927c:	b13c      	cbz	r4, 800928e <_Bfree+0x3a>
 800927e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009280:	6862      	ldr	r2, [r4, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009288:	6021      	str	r1, [r4, #0]
 800928a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	0800a4dc 	.word	0x0800a4dc
 8009294:	0800a768 	.word	0x0800a768

08009298 <__multadd>:
 8009298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929c:	690d      	ldr	r5, [r1, #16]
 800929e:	4607      	mov	r7, r0
 80092a0:	460c      	mov	r4, r1
 80092a2:	461e      	mov	r6, r3
 80092a4:	f101 0c14 	add.w	ip, r1, #20
 80092a8:	2000      	movs	r0, #0
 80092aa:	f8dc 3000 	ldr.w	r3, [ip]
 80092ae:	b299      	uxth	r1, r3
 80092b0:	fb02 6101 	mla	r1, r2, r1, r6
 80092b4:	0c1e      	lsrs	r6, r3, #16
 80092b6:	0c0b      	lsrs	r3, r1, #16
 80092b8:	fb02 3306 	mla	r3, r2, r6, r3
 80092bc:	b289      	uxth	r1, r1
 80092be:	3001      	adds	r0, #1
 80092c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092c4:	4285      	cmp	r5, r0
 80092c6:	f84c 1b04 	str.w	r1, [ip], #4
 80092ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092ce:	dcec      	bgt.n	80092aa <__multadd+0x12>
 80092d0:	b30e      	cbz	r6, 8009316 <__multadd+0x7e>
 80092d2:	68a3      	ldr	r3, [r4, #8]
 80092d4:	42ab      	cmp	r3, r5
 80092d6:	dc19      	bgt.n	800930c <__multadd+0x74>
 80092d8:	6861      	ldr	r1, [r4, #4]
 80092da:	4638      	mov	r0, r7
 80092dc:	3101      	adds	r1, #1
 80092de:	f7ff ff79 	bl	80091d4 <_Balloc>
 80092e2:	4680      	mov	r8, r0
 80092e4:	b928      	cbnz	r0, 80092f2 <__multadd+0x5a>
 80092e6:	4602      	mov	r2, r0
 80092e8:	4b0c      	ldr	r3, [pc, #48]	; (800931c <__multadd+0x84>)
 80092ea:	480d      	ldr	r0, [pc, #52]	; (8009320 <__multadd+0x88>)
 80092ec:	21b5      	movs	r1, #181	; 0xb5
 80092ee:	f7fe fe8b 	bl	8008008 <__assert_func>
 80092f2:	6922      	ldr	r2, [r4, #16]
 80092f4:	3202      	adds	r2, #2
 80092f6:	f104 010c 	add.w	r1, r4, #12
 80092fa:	0092      	lsls	r2, r2, #2
 80092fc:	300c      	adds	r0, #12
 80092fe:	f7ff ff5b 	bl	80091b8 <memcpy>
 8009302:	4621      	mov	r1, r4
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff ffa5 	bl	8009254 <_Bfree>
 800930a:	4644      	mov	r4, r8
 800930c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009310:	3501      	adds	r5, #1
 8009312:	615e      	str	r6, [r3, #20]
 8009314:	6125      	str	r5, [r4, #16]
 8009316:	4620      	mov	r0, r4
 8009318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931c:	0800a6f5 	.word	0x0800a6f5
 8009320:	0800a768 	.word	0x0800a768

08009324 <__hi0bits>:
 8009324:	0c03      	lsrs	r3, r0, #16
 8009326:	041b      	lsls	r3, r3, #16
 8009328:	b9d3      	cbnz	r3, 8009360 <__hi0bits+0x3c>
 800932a:	0400      	lsls	r0, r0, #16
 800932c:	2310      	movs	r3, #16
 800932e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009332:	bf04      	itt	eq
 8009334:	0200      	lsleq	r0, r0, #8
 8009336:	3308      	addeq	r3, #8
 8009338:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800933c:	bf04      	itt	eq
 800933e:	0100      	lsleq	r0, r0, #4
 8009340:	3304      	addeq	r3, #4
 8009342:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009346:	bf04      	itt	eq
 8009348:	0080      	lsleq	r0, r0, #2
 800934a:	3302      	addeq	r3, #2
 800934c:	2800      	cmp	r0, #0
 800934e:	db05      	blt.n	800935c <__hi0bits+0x38>
 8009350:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009354:	f103 0301 	add.w	r3, r3, #1
 8009358:	bf08      	it	eq
 800935a:	2320      	moveq	r3, #32
 800935c:	4618      	mov	r0, r3
 800935e:	4770      	bx	lr
 8009360:	2300      	movs	r3, #0
 8009362:	e7e4      	b.n	800932e <__hi0bits+0xa>

08009364 <__lo0bits>:
 8009364:	6803      	ldr	r3, [r0, #0]
 8009366:	f013 0207 	ands.w	r2, r3, #7
 800936a:	4601      	mov	r1, r0
 800936c:	d00b      	beq.n	8009386 <__lo0bits+0x22>
 800936e:	07da      	lsls	r2, r3, #31
 8009370:	d423      	bmi.n	80093ba <__lo0bits+0x56>
 8009372:	0798      	lsls	r0, r3, #30
 8009374:	bf49      	itett	mi
 8009376:	085b      	lsrmi	r3, r3, #1
 8009378:	089b      	lsrpl	r3, r3, #2
 800937a:	2001      	movmi	r0, #1
 800937c:	600b      	strmi	r3, [r1, #0]
 800937e:	bf5c      	itt	pl
 8009380:	600b      	strpl	r3, [r1, #0]
 8009382:	2002      	movpl	r0, #2
 8009384:	4770      	bx	lr
 8009386:	b298      	uxth	r0, r3
 8009388:	b9a8      	cbnz	r0, 80093b6 <__lo0bits+0x52>
 800938a:	0c1b      	lsrs	r3, r3, #16
 800938c:	2010      	movs	r0, #16
 800938e:	b2da      	uxtb	r2, r3
 8009390:	b90a      	cbnz	r2, 8009396 <__lo0bits+0x32>
 8009392:	3008      	adds	r0, #8
 8009394:	0a1b      	lsrs	r3, r3, #8
 8009396:	071a      	lsls	r2, r3, #28
 8009398:	bf04      	itt	eq
 800939a:	091b      	lsreq	r3, r3, #4
 800939c:	3004      	addeq	r0, #4
 800939e:	079a      	lsls	r2, r3, #30
 80093a0:	bf04      	itt	eq
 80093a2:	089b      	lsreq	r3, r3, #2
 80093a4:	3002      	addeq	r0, #2
 80093a6:	07da      	lsls	r2, r3, #31
 80093a8:	d403      	bmi.n	80093b2 <__lo0bits+0x4e>
 80093aa:	085b      	lsrs	r3, r3, #1
 80093ac:	f100 0001 	add.w	r0, r0, #1
 80093b0:	d005      	beq.n	80093be <__lo0bits+0x5a>
 80093b2:	600b      	str	r3, [r1, #0]
 80093b4:	4770      	bx	lr
 80093b6:	4610      	mov	r0, r2
 80093b8:	e7e9      	b.n	800938e <__lo0bits+0x2a>
 80093ba:	2000      	movs	r0, #0
 80093bc:	4770      	bx	lr
 80093be:	2020      	movs	r0, #32
 80093c0:	4770      	bx	lr
	...

080093c4 <__i2b>:
 80093c4:	b510      	push	{r4, lr}
 80093c6:	460c      	mov	r4, r1
 80093c8:	2101      	movs	r1, #1
 80093ca:	f7ff ff03 	bl	80091d4 <_Balloc>
 80093ce:	4602      	mov	r2, r0
 80093d0:	b928      	cbnz	r0, 80093de <__i2b+0x1a>
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <__i2b+0x24>)
 80093d4:	4805      	ldr	r0, [pc, #20]	; (80093ec <__i2b+0x28>)
 80093d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093da:	f7fe fe15 	bl	8008008 <__assert_func>
 80093de:	2301      	movs	r3, #1
 80093e0:	6144      	str	r4, [r0, #20]
 80093e2:	6103      	str	r3, [r0, #16]
 80093e4:	bd10      	pop	{r4, pc}
 80093e6:	bf00      	nop
 80093e8:	0800a6f5 	.word	0x0800a6f5
 80093ec:	0800a768 	.word	0x0800a768

080093f0 <__multiply>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	4691      	mov	r9, r2
 80093f6:	690a      	ldr	r2, [r1, #16]
 80093f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	bfb8      	it	lt
 8009400:	460b      	movlt	r3, r1
 8009402:	460c      	mov	r4, r1
 8009404:	bfbc      	itt	lt
 8009406:	464c      	movlt	r4, r9
 8009408:	4699      	movlt	r9, r3
 800940a:	6927      	ldr	r7, [r4, #16]
 800940c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009410:	68a3      	ldr	r3, [r4, #8]
 8009412:	6861      	ldr	r1, [r4, #4]
 8009414:	eb07 060a 	add.w	r6, r7, sl
 8009418:	42b3      	cmp	r3, r6
 800941a:	b085      	sub	sp, #20
 800941c:	bfb8      	it	lt
 800941e:	3101      	addlt	r1, #1
 8009420:	f7ff fed8 	bl	80091d4 <_Balloc>
 8009424:	b930      	cbnz	r0, 8009434 <__multiply+0x44>
 8009426:	4602      	mov	r2, r0
 8009428:	4b44      	ldr	r3, [pc, #272]	; (800953c <__multiply+0x14c>)
 800942a:	4845      	ldr	r0, [pc, #276]	; (8009540 <__multiply+0x150>)
 800942c:	f240 115d 	movw	r1, #349	; 0x15d
 8009430:	f7fe fdea 	bl	8008008 <__assert_func>
 8009434:	f100 0514 	add.w	r5, r0, #20
 8009438:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800943c:	462b      	mov	r3, r5
 800943e:	2200      	movs	r2, #0
 8009440:	4543      	cmp	r3, r8
 8009442:	d321      	bcc.n	8009488 <__multiply+0x98>
 8009444:	f104 0314 	add.w	r3, r4, #20
 8009448:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800944c:	f109 0314 	add.w	r3, r9, #20
 8009450:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009454:	9202      	str	r2, [sp, #8]
 8009456:	1b3a      	subs	r2, r7, r4
 8009458:	3a15      	subs	r2, #21
 800945a:	f022 0203 	bic.w	r2, r2, #3
 800945e:	3204      	adds	r2, #4
 8009460:	f104 0115 	add.w	r1, r4, #21
 8009464:	428f      	cmp	r7, r1
 8009466:	bf38      	it	cc
 8009468:	2204      	movcc	r2, #4
 800946a:	9201      	str	r2, [sp, #4]
 800946c:	9a02      	ldr	r2, [sp, #8]
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	429a      	cmp	r2, r3
 8009472:	d80c      	bhi.n	800948e <__multiply+0x9e>
 8009474:	2e00      	cmp	r6, #0
 8009476:	dd03      	ble.n	8009480 <__multiply+0x90>
 8009478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800947c:	2b00      	cmp	r3, #0
 800947e:	d05a      	beq.n	8009536 <__multiply+0x146>
 8009480:	6106      	str	r6, [r0, #16]
 8009482:	b005      	add	sp, #20
 8009484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009488:	f843 2b04 	str.w	r2, [r3], #4
 800948c:	e7d8      	b.n	8009440 <__multiply+0x50>
 800948e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009492:	f1ba 0f00 	cmp.w	sl, #0
 8009496:	d024      	beq.n	80094e2 <__multiply+0xf2>
 8009498:	f104 0e14 	add.w	lr, r4, #20
 800949c:	46a9      	mov	r9, r5
 800949e:	f04f 0c00 	mov.w	ip, #0
 80094a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094a6:	f8d9 1000 	ldr.w	r1, [r9]
 80094aa:	fa1f fb82 	uxth.w	fp, r2
 80094ae:	b289      	uxth	r1, r1
 80094b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80094b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094b8:	f8d9 2000 	ldr.w	r2, [r9]
 80094bc:	4461      	add	r1, ip
 80094be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80094c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094ca:	b289      	uxth	r1, r1
 80094cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094d0:	4577      	cmp	r7, lr
 80094d2:	f849 1b04 	str.w	r1, [r9], #4
 80094d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094da:	d8e2      	bhi.n	80094a2 <__multiply+0xb2>
 80094dc:	9a01      	ldr	r2, [sp, #4]
 80094de:	f845 c002 	str.w	ip, [r5, r2]
 80094e2:	9a03      	ldr	r2, [sp, #12]
 80094e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80094e8:	3304      	adds	r3, #4
 80094ea:	f1b9 0f00 	cmp.w	r9, #0
 80094ee:	d020      	beq.n	8009532 <__multiply+0x142>
 80094f0:	6829      	ldr	r1, [r5, #0]
 80094f2:	f104 0c14 	add.w	ip, r4, #20
 80094f6:	46ae      	mov	lr, r5
 80094f8:	f04f 0a00 	mov.w	sl, #0
 80094fc:	f8bc b000 	ldrh.w	fp, [ip]
 8009500:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009504:	fb09 220b 	mla	r2, r9, fp, r2
 8009508:	4492      	add	sl, r2
 800950a:	b289      	uxth	r1, r1
 800950c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009510:	f84e 1b04 	str.w	r1, [lr], #4
 8009514:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009518:	f8be 1000 	ldrh.w	r1, [lr]
 800951c:	0c12      	lsrs	r2, r2, #16
 800951e:	fb09 1102 	mla	r1, r9, r2, r1
 8009522:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009526:	4567      	cmp	r7, ip
 8009528:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800952c:	d8e6      	bhi.n	80094fc <__multiply+0x10c>
 800952e:	9a01      	ldr	r2, [sp, #4]
 8009530:	50a9      	str	r1, [r5, r2]
 8009532:	3504      	adds	r5, #4
 8009534:	e79a      	b.n	800946c <__multiply+0x7c>
 8009536:	3e01      	subs	r6, #1
 8009538:	e79c      	b.n	8009474 <__multiply+0x84>
 800953a:	bf00      	nop
 800953c:	0800a6f5 	.word	0x0800a6f5
 8009540:	0800a768 	.word	0x0800a768

08009544 <__pow5mult>:
 8009544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009548:	4615      	mov	r5, r2
 800954a:	f012 0203 	ands.w	r2, r2, #3
 800954e:	4606      	mov	r6, r0
 8009550:	460f      	mov	r7, r1
 8009552:	d007      	beq.n	8009564 <__pow5mult+0x20>
 8009554:	4c25      	ldr	r4, [pc, #148]	; (80095ec <__pow5mult+0xa8>)
 8009556:	3a01      	subs	r2, #1
 8009558:	2300      	movs	r3, #0
 800955a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800955e:	f7ff fe9b 	bl	8009298 <__multadd>
 8009562:	4607      	mov	r7, r0
 8009564:	10ad      	asrs	r5, r5, #2
 8009566:	d03d      	beq.n	80095e4 <__pow5mult+0xa0>
 8009568:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800956a:	b97c      	cbnz	r4, 800958c <__pow5mult+0x48>
 800956c:	2010      	movs	r0, #16
 800956e:	f7ff fe1b 	bl	80091a8 <malloc>
 8009572:	4602      	mov	r2, r0
 8009574:	6270      	str	r0, [r6, #36]	; 0x24
 8009576:	b928      	cbnz	r0, 8009584 <__pow5mult+0x40>
 8009578:	4b1d      	ldr	r3, [pc, #116]	; (80095f0 <__pow5mult+0xac>)
 800957a:	481e      	ldr	r0, [pc, #120]	; (80095f4 <__pow5mult+0xb0>)
 800957c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009580:	f7fe fd42 	bl	8008008 <__assert_func>
 8009584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009588:	6004      	str	r4, [r0, #0]
 800958a:	60c4      	str	r4, [r0, #12]
 800958c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009594:	b94c      	cbnz	r4, 80095aa <__pow5mult+0x66>
 8009596:	f240 2171 	movw	r1, #625	; 0x271
 800959a:	4630      	mov	r0, r6
 800959c:	f7ff ff12 	bl	80093c4 <__i2b>
 80095a0:	2300      	movs	r3, #0
 80095a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80095a6:	4604      	mov	r4, r0
 80095a8:	6003      	str	r3, [r0, #0]
 80095aa:	f04f 0900 	mov.w	r9, #0
 80095ae:	07eb      	lsls	r3, r5, #31
 80095b0:	d50a      	bpl.n	80095c8 <__pow5mult+0x84>
 80095b2:	4639      	mov	r1, r7
 80095b4:	4622      	mov	r2, r4
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7ff ff1a 	bl	80093f0 <__multiply>
 80095bc:	4639      	mov	r1, r7
 80095be:	4680      	mov	r8, r0
 80095c0:	4630      	mov	r0, r6
 80095c2:	f7ff fe47 	bl	8009254 <_Bfree>
 80095c6:	4647      	mov	r7, r8
 80095c8:	106d      	asrs	r5, r5, #1
 80095ca:	d00b      	beq.n	80095e4 <__pow5mult+0xa0>
 80095cc:	6820      	ldr	r0, [r4, #0]
 80095ce:	b938      	cbnz	r0, 80095e0 <__pow5mult+0x9c>
 80095d0:	4622      	mov	r2, r4
 80095d2:	4621      	mov	r1, r4
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7ff ff0b 	bl	80093f0 <__multiply>
 80095da:	6020      	str	r0, [r4, #0]
 80095dc:	f8c0 9000 	str.w	r9, [r0]
 80095e0:	4604      	mov	r4, r0
 80095e2:	e7e4      	b.n	80095ae <__pow5mult+0x6a>
 80095e4:	4638      	mov	r0, r7
 80095e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ea:	bf00      	nop
 80095ec:	0800a8b8 	.word	0x0800a8b8
 80095f0:	0800a4dc 	.word	0x0800a4dc
 80095f4:	0800a768 	.word	0x0800a768

080095f8 <__lshift>:
 80095f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095fc:	460c      	mov	r4, r1
 80095fe:	6849      	ldr	r1, [r1, #4]
 8009600:	6923      	ldr	r3, [r4, #16]
 8009602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009606:	68a3      	ldr	r3, [r4, #8]
 8009608:	4607      	mov	r7, r0
 800960a:	4691      	mov	r9, r2
 800960c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009610:	f108 0601 	add.w	r6, r8, #1
 8009614:	42b3      	cmp	r3, r6
 8009616:	db0b      	blt.n	8009630 <__lshift+0x38>
 8009618:	4638      	mov	r0, r7
 800961a:	f7ff fddb 	bl	80091d4 <_Balloc>
 800961e:	4605      	mov	r5, r0
 8009620:	b948      	cbnz	r0, 8009636 <__lshift+0x3e>
 8009622:	4602      	mov	r2, r0
 8009624:	4b2a      	ldr	r3, [pc, #168]	; (80096d0 <__lshift+0xd8>)
 8009626:	482b      	ldr	r0, [pc, #172]	; (80096d4 <__lshift+0xdc>)
 8009628:	f240 11d9 	movw	r1, #473	; 0x1d9
 800962c:	f7fe fcec 	bl	8008008 <__assert_func>
 8009630:	3101      	adds	r1, #1
 8009632:	005b      	lsls	r3, r3, #1
 8009634:	e7ee      	b.n	8009614 <__lshift+0x1c>
 8009636:	2300      	movs	r3, #0
 8009638:	f100 0114 	add.w	r1, r0, #20
 800963c:	f100 0210 	add.w	r2, r0, #16
 8009640:	4618      	mov	r0, r3
 8009642:	4553      	cmp	r3, sl
 8009644:	db37      	blt.n	80096b6 <__lshift+0xbe>
 8009646:	6920      	ldr	r0, [r4, #16]
 8009648:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800964c:	f104 0314 	add.w	r3, r4, #20
 8009650:	f019 091f 	ands.w	r9, r9, #31
 8009654:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800965c:	d02f      	beq.n	80096be <__lshift+0xc6>
 800965e:	f1c9 0e20 	rsb	lr, r9, #32
 8009662:	468a      	mov	sl, r1
 8009664:	f04f 0c00 	mov.w	ip, #0
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	fa02 f209 	lsl.w	r2, r2, r9
 800966e:	ea42 020c 	orr.w	r2, r2, ip
 8009672:	f84a 2b04 	str.w	r2, [sl], #4
 8009676:	f853 2b04 	ldr.w	r2, [r3], #4
 800967a:	4298      	cmp	r0, r3
 800967c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009680:	d8f2      	bhi.n	8009668 <__lshift+0x70>
 8009682:	1b03      	subs	r3, r0, r4
 8009684:	3b15      	subs	r3, #21
 8009686:	f023 0303 	bic.w	r3, r3, #3
 800968a:	3304      	adds	r3, #4
 800968c:	f104 0215 	add.w	r2, r4, #21
 8009690:	4290      	cmp	r0, r2
 8009692:	bf38      	it	cc
 8009694:	2304      	movcc	r3, #4
 8009696:	f841 c003 	str.w	ip, [r1, r3]
 800969a:	f1bc 0f00 	cmp.w	ip, #0
 800969e:	d001      	beq.n	80096a4 <__lshift+0xac>
 80096a0:	f108 0602 	add.w	r6, r8, #2
 80096a4:	3e01      	subs	r6, #1
 80096a6:	4638      	mov	r0, r7
 80096a8:	612e      	str	r6, [r5, #16]
 80096aa:	4621      	mov	r1, r4
 80096ac:	f7ff fdd2 	bl	8009254 <_Bfree>
 80096b0:	4628      	mov	r0, r5
 80096b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80096ba:	3301      	adds	r3, #1
 80096bc:	e7c1      	b.n	8009642 <__lshift+0x4a>
 80096be:	3904      	subs	r1, #4
 80096c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80096c8:	4298      	cmp	r0, r3
 80096ca:	d8f9      	bhi.n	80096c0 <__lshift+0xc8>
 80096cc:	e7ea      	b.n	80096a4 <__lshift+0xac>
 80096ce:	bf00      	nop
 80096d0:	0800a6f5 	.word	0x0800a6f5
 80096d4:	0800a768 	.word	0x0800a768

080096d8 <__mcmp>:
 80096d8:	b530      	push	{r4, r5, lr}
 80096da:	6902      	ldr	r2, [r0, #16]
 80096dc:	690c      	ldr	r4, [r1, #16]
 80096de:	1b12      	subs	r2, r2, r4
 80096e0:	d10e      	bne.n	8009700 <__mcmp+0x28>
 80096e2:	f100 0314 	add.w	r3, r0, #20
 80096e6:	3114      	adds	r1, #20
 80096e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80096ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80096f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80096f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096f8:	42a5      	cmp	r5, r4
 80096fa:	d003      	beq.n	8009704 <__mcmp+0x2c>
 80096fc:	d305      	bcc.n	800970a <__mcmp+0x32>
 80096fe:	2201      	movs	r2, #1
 8009700:	4610      	mov	r0, r2
 8009702:	bd30      	pop	{r4, r5, pc}
 8009704:	4283      	cmp	r3, r0
 8009706:	d3f3      	bcc.n	80096f0 <__mcmp+0x18>
 8009708:	e7fa      	b.n	8009700 <__mcmp+0x28>
 800970a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800970e:	e7f7      	b.n	8009700 <__mcmp+0x28>

08009710 <__mdiff>:
 8009710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	460c      	mov	r4, r1
 8009716:	4606      	mov	r6, r0
 8009718:	4611      	mov	r1, r2
 800971a:	4620      	mov	r0, r4
 800971c:	4690      	mov	r8, r2
 800971e:	f7ff ffdb 	bl	80096d8 <__mcmp>
 8009722:	1e05      	subs	r5, r0, #0
 8009724:	d110      	bne.n	8009748 <__mdiff+0x38>
 8009726:	4629      	mov	r1, r5
 8009728:	4630      	mov	r0, r6
 800972a:	f7ff fd53 	bl	80091d4 <_Balloc>
 800972e:	b930      	cbnz	r0, 800973e <__mdiff+0x2e>
 8009730:	4b3a      	ldr	r3, [pc, #232]	; (800981c <__mdiff+0x10c>)
 8009732:	4602      	mov	r2, r0
 8009734:	f240 2132 	movw	r1, #562	; 0x232
 8009738:	4839      	ldr	r0, [pc, #228]	; (8009820 <__mdiff+0x110>)
 800973a:	f7fe fc65 	bl	8008008 <__assert_func>
 800973e:	2301      	movs	r3, #1
 8009740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009748:	bfa4      	itt	ge
 800974a:	4643      	movge	r3, r8
 800974c:	46a0      	movge	r8, r4
 800974e:	4630      	mov	r0, r6
 8009750:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009754:	bfa6      	itte	ge
 8009756:	461c      	movge	r4, r3
 8009758:	2500      	movge	r5, #0
 800975a:	2501      	movlt	r5, #1
 800975c:	f7ff fd3a 	bl	80091d4 <_Balloc>
 8009760:	b920      	cbnz	r0, 800976c <__mdiff+0x5c>
 8009762:	4b2e      	ldr	r3, [pc, #184]	; (800981c <__mdiff+0x10c>)
 8009764:	4602      	mov	r2, r0
 8009766:	f44f 7110 	mov.w	r1, #576	; 0x240
 800976a:	e7e5      	b.n	8009738 <__mdiff+0x28>
 800976c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009770:	6926      	ldr	r6, [r4, #16]
 8009772:	60c5      	str	r5, [r0, #12]
 8009774:	f104 0914 	add.w	r9, r4, #20
 8009778:	f108 0514 	add.w	r5, r8, #20
 800977c:	f100 0e14 	add.w	lr, r0, #20
 8009780:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009784:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009788:	f108 0210 	add.w	r2, r8, #16
 800978c:	46f2      	mov	sl, lr
 800978e:	2100      	movs	r1, #0
 8009790:	f859 3b04 	ldr.w	r3, [r9], #4
 8009794:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009798:	fa1f f883 	uxth.w	r8, r3
 800979c:	fa11 f18b 	uxtah	r1, r1, fp
 80097a0:	0c1b      	lsrs	r3, r3, #16
 80097a2:	eba1 0808 	sub.w	r8, r1, r8
 80097a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097ae:	fa1f f888 	uxth.w	r8, r8
 80097b2:	1419      	asrs	r1, r3, #16
 80097b4:	454e      	cmp	r6, r9
 80097b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097ba:	f84a 3b04 	str.w	r3, [sl], #4
 80097be:	d8e7      	bhi.n	8009790 <__mdiff+0x80>
 80097c0:	1b33      	subs	r3, r6, r4
 80097c2:	3b15      	subs	r3, #21
 80097c4:	f023 0303 	bic.w	r3, r3, #3
 80097c8:	3304      	adds	r3, #4
 80097ca:	3415      	adds	r4, #21
 80097cc:	42a6      	cmp	r6, r4
 80097ce:	bf38      	it	cc
 80097d0:	2304      	movcc	r3, #4
 80097d2:	441d      	add	r5, r3
 80097d4:	4473      	add	r3, lr
 80097d6:	469e      	mov	lr, r3
 80097d8:	462e      	mov	r6, r5
 80097da:	4566      	cmp	r6, ip
 80097dc:	d30e      	bcc.n	80097fc <__mdiff+0xec>
 80097de:	f10c 0203 	add.w	r2, ip, #3
 80097e2:	1b52      	subs	r2, r2, r5
 80097e4:	f022 0203 	bic.w	r2, r2, #3
 80097e8:	3d03      	subs	r5, #3
 80097ea:	45ac      	cmp	ip, r5
 80097ec:	bf38      	it	cc
 80097ee:	2200      	movcc	r2, #0
 80097f0:	441a      	add	r2, r3
 80097f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80097f6:	b17b      	cbz	r3, 8009818 <__mdiff+0x108>
 80097f8:	6107      	str	r7, [r0, #16]
 80097fa:	e7a3      	b.n	8009744 <__mdiff+0x34>
 80097fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8009800:	fa11 f288 	uxtah	r2, r1, r8
 8009804:	1414      	asrs	r4, r2, #16
 8009806:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800980a:	b292      	uxth	r2, r2
 800980c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009810:	f84e 2b04 	str.w	r2, [lr], #4
 8009814:	1421      	asrs	r1, r4, #16
 8009816:	e7e0      	b.n	80097da <__mdiff+0xca>
 8009818:	3f01      	subs	r7, #1
 800981a:	e7ea      	b.n	80097f2 <__mdiff+0xe2>
 800981c:	0800a6f5 	.word	0x0800a6f5
 8009820:	0800a768 	.word	0x0800a768

08009824 <__d2b>:
 8009824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009828:	4689      	mov	r9, r1
 800982a:	2101      	movs	r1, #1
 800982c:	ec57 6b10 	vmov	r6, r7, d0
 8009830:	4690      	mov	r8, r2
 8009832:	f7ff fccf 	bl	80091d4 <_Balloc>
 8009836:	4604      	mov	r4, r0
 8009838:	b930      	cbnz	r0, 8009848 <__d2b+0x24>
 800983a:	4602      	mov	r2, r0
 800983c:	4b25      	ldr	r3, [pc, #148]	; (80098d4 <__d2b+0xb0>)
 800983e:	4826      	ldr	r0, [pc, #152]	; (80098d8 <__d2b+0xb4>)
 8009840:	f240 310a 	movw	r1, #778	; 0x30a
 8009844:	f7fe fbe0 	bl	8008008 <__assert_func>
 8009848:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800984c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009850:	bb35      	cbnz	r5, 80098a0 <__d2b+0x7c>
 8009852:	2e00      	cmp	r6, #0
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	d028      	beq.n	80098aa <__d2b+0x86>
 8009858:	4668      	mov	r0, sp
 800985a:	9600      	str	r6, [sp, #0]
 800985c:	f7ff fd82 	bl	8009364 <__lo0bits>
 8009860:	9900      	ldr	r1, [sp, #0]
 8009862:	b300      	cbz	r0, 80098a6 <__d2b+0x82>
 8009864:	9a01      	ldr	r2, [sp, #4]
 8009866:	f1c0 0320 	rsb	r3, r0, #32
 800986a:	fa02 f303 	lsl.w	r3, r2, r3
 800986e:	430b      	orrs	r3, r1
 8009870:	40c2      	lsrs	r2, r0
 8009872:	6163      	str	r3, [r4, #20]
 8009874:	9201      	str	r2, [sp, #4]
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	61a3      	str	r3, [r4, #24]
 800987a:	2b00      	cmp	r3, #0
 800987c:	bf14      	ite	ne
 800987e:	2202      	movne	r2, #2
 8009880:	2201      	moveq	r2, #1
 8009882:	6122      	str	r2, [r4, #16]
 8009884:	b1d5      	cbz	r5, 80098bc <__d2b+0x98>
 8009886:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800988a:	4405      	add	r5, r0
 800988c:	f8c9 5000 	str.w	r5, [r9]
 8009890:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009894:	f8c8 0000 	str.w	r0, [r8]
 8009898:	4620      	mov	r0, r4
 800989a:	b003      	add	sp, #12
 800989c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098a4:	e7d5      	b.n	8009852 <__d2b+0x2e>
 80098a6:	6161      	str	r1, [r4, #20]
 80098a8:	e7e5      	b.n	8009876 <__d2b+0x52>
 80098aa:	a801      	add	r0, sp, #4
 80098ac:	f7ff fd5a 	bl	8009364 <__lo0bits>
 80098b0:	9b01      	ldr	r3, [sp, #4]
 80098b2:	6163      	str	r3, [r4, #20]
 80098b4:	2201      	movs	r2, #1
 80098b6:	6122      	str	r2, [r4, #16]
 80098b8:	3020      	adds	r0, #32
 80098ba:	e7e3      	b.n	8009884 <__d2b+0x60>
 80098bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098c4:	f8c9 0000 	str.w	r0, [r9]
 80098c8:	6918      	ldr	r0, [r3, #16]
 80098ca:	f7ff fd2b 	bl	8009324 <__hi0bits>
 80098ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098d2:	e7df      	b.n	8009894 <__d2b+0x70>
 80098d4:	0800a6f5 	.word	0x0800a6f5
 80098d8:	0800a768 	.word	0x0800a768

080098dc <_calloc_r>:
 80098dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098de:	fba1 2402 	umull	r2, r4, r1, r2
 80098e2:	b94c      	cbnz	r4, 80098f8 <_calloc_r+0x1c>
 80098e4:	4611      	mov	r1, r2
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	f000 f87a 	bl	80099e0 <_malloc_r>
 80098ec:	9a01      	ldr	r2, [sp, #4]
 80098ee:	4605      	mov	r5, r0
 80098f0:	b930      	cbnz	r0, 8009900 <_calloc_r+0x24>
 80098f2:	4628      	mov	r0, r5
 80098f4:	b003      	add	sp, #12
 80098f6:	bd30      	pop	{r4, r5, pc}
 80098f8:	220c      	movs	r2, #12
 80098fa:	6002      	str	r2, [r0, #0]
 80098fc:	2500      	movs	r5, #0
 80098fe:	e7f8      	b.n	80098f2 <_calloc_r+0x16>
 8009900:	4621      	mov	r1, r4
 8009902:	f7fd fcd9 	bl	80072b8 <memset>
 8009906:	e7f4      	b.n	80098f2 <_calloc_r+0x16>

08009908 <_free_r>:
 8009908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800990a:	2900      	cmp	r1, #0
 800990c:	d044      	beq.n	8009998 <_free_r+0x90>
 800990e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009912:	9001      	str	r0, [sp, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	f1a1 0404 	sub.w	r4, r1, #4
 800991a:	bfb8      	it	lt
 800991c:	18e4      	addlt	r4, r4, r3
 800991e:	f000 faf1 	bl	8009f04 <__malloc_lock>
 8009922:	4a1e      	ldr	r2, [pc, #120]	; (800999c <_free_r+0x94>)
 8009924:	9801      	ldr	r0, [sp, #4]
 8009926:	6813      	ldr	r3, [r2, #0]
 8009928:	b933      	cbnz	r3, 8009938 <_free_r+0x30>
 800992a:	6063      	str	r3, [r4, #4]
 800992c:	6014      	str	r4, [r2, #0]
 800992e:	b003      	add	sp, #12
 8009930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009934:	f000 baec 	b.w	8009f10 <__malloc_unlock>
 8009938:	42a3      	cmp	r3, r4
 800993a:	d908      	bls.n	800994e <_free_r+0x46>
 800993c:	6825      	ldr	r5, [r4, #0]
 800993e:	1961      	adds	r1, r4, r5
 8009940:	428b      	cmp	r3, r1
 8009942:	bf01      	itttt	eq
 8009944:	6819      	ldreq	r1, [r3, #0]
 8009946:	685b      	ldreq	r3, [r3, #4]
 8009948:	1949      	addeq	r1, r1, r5
 800994a:	6021      	streq	r1, [r4, #0]
 800994c:	e7ed      	b.n	800992a <_free_r+0x22>
 800994e:	461a      	mov	r2, r3
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	b10b      	cbz	r3, 8009958 <_free_r+0x50>
 8009954:	42a3      	cmp	r3, r4
 8009956:	d9fa      	bls.n	800994e <_free_r+0x46>
 8009958:	6811      	ldr	r1, [r2, #0]
 800995a:	1855      	adds	r5, r2, r1
 800995c:	42a5      	cmp	r5, r4
 800995e:	d10b      	bne.n	8009978 <_free_r+0x70>
 8009960:	6824      	ldr	r4, [r4, #0]
 8009962:	4421      	add	r1, r4
 8009964:	1854      	adds	r4, r2, r1
 8009966:	42a3      	cmp	r3, r4
 8009968:	6011      	str	r1, [r2, #0]
 800996a:	d1e0      	bne.n	800992e <_free_r+0x26>
 800996c:	681c      	ldr	r4, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	6053      	str	r3, [r2, #4]
 8009972:	4421      	add	r1, r4
 8009974:	6011      	str	r1, [r2, #0]
 8009976:	e7da      	b.n	800992e <_free_r+0x26>
 8009978:	d902      	bls.n	8009980 <_free_r+0x78>
 800997a:	230c      	movs	r3, #12
 800997c:	6003      	str	r3, [r0, #0]
 800997e:	e7d6      	b.n	800992e <_free_r+0x26>
 8009980:	6825      	ldr	r5, [r4, #0]
 8009982:	1961      	adds	r1, r4, r5
 8009984:	428b      	cmp	r3, r1
 8009986:	bf04      	itt	eq
 8009988:	6819      	ldreq	r1, [r3, #0]
 800998a:	685b      	ldreq	r3, [r3, #4]
 800998c:	6063      	str	r3, [r4, #4]
 800998e:	bf04      	itt	eq
 8009990:	1949      	addeq	r1, r1, r5
 8009992:	6021      	streq	r1, [r4, #0]
 8009994:	6054      	str	r4, [r2, #4]
 8009996:	e7ca      	b.n	800992e <_free_r+0x26>
 8009998:	b003      	add	sp, #12
 800999a:	bd30      	pop	{r4, r5, pc}
 800999c:	20004fe0 	.word	0x20004fe0

080099a0 <sbrk_aligned>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	4e0e      	ldr	r6, [pc, #56]	; (80099dc <sbrk_aligned+0x3c>)
 80099a4:	460c      	mov	r4, r1
 80099a6:	6831      	ldr	r1, [r6, #0]
 80099a8:	4605      	mov	r5, r0
 80099aa:	b911      	cbnz	r1, 80099b2 <sbrk_aligned+0x12>
 80099ac:	f000 f9e6 	bl	8009d7c <_sbrk_r>
 80099b0:	6030      	str	r0, [r6, #0]
 80099b2:	4621      	mov	r1, r4
 80099b4:	4628      	mov	r0, r5
 80099b6:	f000 f9e1 	bl	8009d7c <_sbrk_r>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d00a      	beq.n	80099d4 <sbrk_aligned+0x34>
 80099be:	1cc4      	adds	r4, r0, #3
 80099c0:	f024 0403 	bic.w	r4, r4, #3
 80099c4:	42a0      	cmp	r0, r4
 80099c6:	d007      	beq.n	80099d8 <sbrk_aligned+0x38>
 80099c8:	1a21      	subs	r1, r4, r0
 80099ca:	4628      	mov	r0, r5
 80099cc:	f000 f9d6 	bl	8009d7c <_sbrk_r>
 80099d0:	3001      	adds	r0, #1
 80099d2:	d101      	bne.n	80099d8 <sbrk_aligned+0x38>
 80099d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80099d8:	4620      	mov	r0, r4
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	20004fe4 	.word	0x20004fe4

080099e0 <_malloc_r>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	1ccd      	adds	r5, r1, #3
 80099e6:	f025 0503 	bic.w	r5, r5, #3
 80099ea:	3508      	adds	r5, #8
 80099ec:	2d0c      	cmp	r5, #12
 80099ee:	bf38      	it	cc
 80099f0:	250c      	movcc	r5, #12
 80099f2:	2d00      	cmp	r5, #0
 80099f4:	4607      	mov	r7, r0
 80099f6:	db01      	blt.n	80099fc <_malloc_r+0x1c>
 80099f8:	42a9      	cmp	r1, r5
 80099fa:	d905      	bls.n	8009a08 <_malloc_r+0x28>
 80099fc:	230c      	movs	r3, #12
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	2600      	movs	r6, #0
 8009a02:	4630      	mov	r0, r6
 8009a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a08:	4e2e      	ldr	r6, [pc, #184]	; (8009ac4 <_malloc_r+0xe4>)
 8009a0a:	f000 fa7b 	bl	8009f04 <__malloc_lock>
 8009a0e:	6833      	ldr	r3, [r6, #0]
 8009a10:	461c      	mov	r4, r3
 8009a12:	bb34      	cbnz	r4, 8009a62 <_malloc_r+0x82>
 8009a14:	4629      	mov	r1, r5
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7ff ffc2 	bl	80099a0 <sbrk_aligned>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	4604      	mov	r4, r0
 8009a20:	d14d      	bne.n	8009abe <_malloc_r+0xde>
 8009a22:	6834      	ldr	r4, [r6, #0]
 8009a24:	4626      	mov	r6, r4
 8009a26:	2e00      	cmp	r6, #0
 8009a28:	d140      	bne.n	8009aac <_malloc_r+0xcc>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4638      	mov	r0, r7
 8009a30:	eb04 0803 	add.w	r8, r4, r3
 8009a34:	f000 f9a2 	bl	8009d7c <_sbrk_r>
 8009a38:	4580      	cmp	r8, r0
 8009a3a:	d13a      	bne.n	8009ab2 <_malloc_r+0xd2>
 8009a3c:	6821      	ldr	r1, [r4, #0]
 8009a3e:	3503      	adds	r5, #3
 8009a40:	1a6d      	subs	r5, r5, r1
 8009a42:	f025 0503 	bic.w	r5, r5, #3
 8009a46:	3508      	adds	r5, #8
 8009a48:	2d0c      	cmp	r5, #12
 8009a4a:	bf38      	it	cc
 8009a4c:	250c      	movcc	r5, #12
 8009a4e:	4629      	mov	r1, r5
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff ffa5 	bl	80099a0 <sbrk_aligned>
 8009a56:	3001      	adds	r0, #1
 8009a58:	d02b      	beq.n	8009ab2 <_malloc_r+0xd2>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	442b      	add	r3, r5
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	e00e      	b.n	8009a80 <_malloc_r+0xa0>
 8009a62:	6822      	ldr	r2, [r4, #0]
 8009a64:	1b52      	subs	r2, r2, r5
 8009a66:	d41e      	bmi.n	8009aa6 <_malloc_r+0xc6>
 8009a68:	2a0b      	cmp	r2, #11
 8009a6a:	d916      	bls.n	8009a9a <_malloc_r+0xba>
 8009a6c:	1961      	adds	r1, r4, r5
 8009a6e:	42a3      	cmp	r3, r4
 8009a70:	6025      	str	r5, [r4, #0]
 8009a72:	bf18      	it	ne
 8009a74:	6059      	strne	r1, [r3, #4]
 8009a76:	6863      	ldr	r3, [r4, #4]
 8009a78:	bf08      	it	eq
 8009a7a:	6031      	streq	r1, [r6, #0]
 8009a7c:	5162      	str	r2, [r4, r5]
 8009a7e:	604b      	str	r3, [r1, #4]
 8009a80:	4638      	mov	r0, r7
 8009a82:	f104 060b 	add.w	r6, r4, #11
 8009a86:	f000 fa43 	bl	8009f10 <__malloc_unlock>
 8009a8a:	f026 0607 	bic.w	r6, r6, #7
 8009a8e:	1d23      	adds	r3, r4, #4
 8009a90:	1af2      	subs	r2, r6, r3
 8009a92:	d0b6      	beq.n	8009a02 <_malloc_r+0x22>
 8009a94:	1b9b      	subs	r3, r3, r6
 8009a96:	50a3      	str	r3, [r4, r2]
 8009a98:	e7b3      	b.n	8009a02 <_malloc_r+0x22>
 8009a9a:	6862      	ldr	r2, [r4, #4]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	bf0c      	ite	eq
 8009aa0:	6032      	streq	r2, [r6, #0]
 8009aa2:	605a      	strne	r2, [r3, #4]
 8009aa4:	e7ec      	b.n	8009a80 <_malloc_r+0xa0>
 8009aa6:	4623      	mov	r3, r4
 8009aa8:	6864      	ldr	r4, [r4, #4]
 8009aaa:	e7b2      	b.n	8009a12 <_malloc_r+0x32>
 8009aac:	4634      	mov	r4, r6
 8009aae:	6876      	ldr	r6, [r6, #4]
 8009ab0:	e7b9      	b.n	8009a26 <_malloc_r+0x46>
 8009ab2:	230c      	movs	r3, #12
 8009ab4:	603b      	str	r3, [r7, #0]
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	f000 fa2a 	bl	8009f10 <__malloc_unlock>
 8009abc:	e7a1      	b.n	8009a02 <_malloc_r+0x22>
 8009abe:	6025      	str	r5, [r4, #0]
 8009ac0:	e7de      	b.n	8009a80 <_malloc_r+0xa0>
 8009ac2:	bf00      	nop
 8009ac4:	20004fe0 	.word	0x20004fe0

08009ac8 <__sfputc_r>:
 8009ac8:	6893      	ldr	r3, [r2, #8]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	b410      	push	{r4}
 8009ad0:	6093      	str	r3, [r2, #8]
 8009ad2:	da08      	bge.n	8009ae6 <__sfputc_r+0x1e>
 8009ad4:	6994      	ldr	r4, [r2, #24]
 8009ad6:	42a3      	cmp	r3, r4
 8009ad8:	db01      	blt.n	8009ade <__sfputc_r+0x16>
 8009ada:	290a      	cmp	r1, #10
 8009adc:	d103      	bne.n	8009ae6 <__sfputc_r+0x1e>
 8009ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae2:	f7fe b9d1 	b.w	8007e88 <__swbuf_r>
 8009ae6:	6813      	ldr	r3, [r2, #0]
 8009ae8:	1c58      	adds	r0, r3, #1
 8009aea:	6010      	str	r0, [r2, #0]
 8009aec:	7019      	strb	r1, [r3, #0]
 8009aee:	4608      	mov	r0, r1
 8009af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <__sfputs_r>:
 8009af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af8:	4606      	mov	r6, r0
 8009afa:	460f      	mov	r7, r1
 8009afc:	4614      	mov	r4, r2
 8009afe:	18d5      	adds	r5, r2, r3
 8009b00:	42ac      	cmp	r4, r5
 8009b02:	d101      	bne.n	8009b08 <__sfputs_r+0x12>
 8009b04:	2000      	movs	r0, #0
 8009b06:	e007      	b.n	8009b18 <__sfputs_r+0x22>
 8009b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0c:	463a      	mov	r2, r7
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f7ff ffda 	bl	8009ac8 <__sfputc_r>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d1f3      	bne.n	8009b00 <__sfputs_r+0xa>
 8009b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b1c <_vfiprintf_r>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	460d      	mov	r5, r1
 8009b22:	b09d      	sub	sp, #116	; 0x74
 8009b24:	4614      	mov	r4, r2
 8009b26:	4698      	mov	r8, r3
 8009b28:	4606      	mov	r6, r0
 8009b2a:	b118      	cbz	r0, 8009b34 <_vfiprintf_r+0x18>
 8009b2c:	6983      	ldr	r3, [r0, #24]
 8009b2e:	b90b      	cbnz	r3, 8009b34 <_vfiprintf_r+0x18>
 8009b30:	f7ff fa1e 	bl	8008f70 <__sinit>
 8009b34:	4b89      	ldr	r3, [pc, #548]	; (8009d5c <_vfiprintf_r+0x240>)
 8009b36:	429d      	cmp	r5, r3
 8009b38:	d11b      	bne.n	8009b72 <_vfiprintf_r+0x56>
 8009b3a:	6875      	ldr	r5, [r6, #4]
 8009b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b3e:	07d9      	lsls	r1, r3, #31
 8009b40:	d405      	bmi.n	8009b4e <_vfiprintf_r+0x32>
 8009b42:	89ab      	ldrh	r3, [r5, #12]
 8009b44:	059a      	lsls	r2, r3, #22
 8009b46:	d402      	bmi.n	8009b4e <_vfiprintf_r+0x32>
 8009b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b4a:	f7ff fac6 	bl	80090da <__retarget_lock_acquire_recursive>
 8009b4e:	89ab      	ldrh	r3, [r5, #12]
 8009b50:	071b      	lsls	r3, r3, #28
 8009b52:	d501      	bpl.n	8009b58 <_vfiprintf_r+0x3c>
 8009b54:	692b      	ldr	r3, [r5, #16]
 8009b56:	b9eb      	cbnz	r3, 8009b94 <_vfiprintf_r+0x78>
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f7fe f9e6 	bl	8007f2c <__swsetup_r>
 8009b60:	b1c0      	cbz	r0, 8009b94 <_vfiprintf_r+0x78>
 8009b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b64:	07dc      	lsls	r4, r3, #31
 8009b66:	d50e      	bpl.n	8009b86 <_vfiprintf_r+0x6a>
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b6c:	b01d      	add	sp, #116	; 0x74
 8009b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b72:	4b7b      	ldr	r3, [pc, #492]	; (8009d60 <_vfiprintf_r+0x244>)
 8009b74:	429d      	cmp	r5, r3
 8009b76:	d101      	bne.n	8009b7c <_vfiprintf_r+0x60>
 8009b78:	68b5      	ldr	r5, [r6, #8]
 8009b7a:	e7df      	b.n	8009b3c <_vfiprintf_r+0x20>
 8009b7c:	4b79      	ldr	r3, [pc, #484]	; (8009d64 <_vfiprintf_r+0x248>)
 8009b7e:	429d      	cmp	r5, r3
 8009b80:	bf08      	it	eq
 8009b82:	68f5      	ldreq	r5, [r6, #12]
 8009b84:	e7da      	b.n	8009b3c <_vfiprintf_r+0x20>
 8009b86:	89ab      	ldrh	r3, [r5, #12]
 8009b88:	0598      	lsls	r0, r3, #22
 8009b8a:	d4ed      	bmi.n	8009b68 <_vfiprintf_r+0x4c>
 8009b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b8e:	f7ff faa5 	bl	80090dc <__retarget_lock_release_recursive>
 8009b92:	e7e9      	b.n	8009b68 <_vfiprintf_r+0x4c>
 8009b94:	2300      	movs	r3, #0
 8009b96:	9309      	str	r3, [sp, #36]	; 0x24
 8009b98:	2320      	movs	r3, #32
 8009b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba2:	2330      	movs	r3, #48	; 0x30
 8009ba4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d68 <_vfiprintf_r+0x24c>
 8009ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bac:	f04f 0901 	mov.w	r9, #1
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	469a      	mov	sl, r3
 8009bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb8:	b10a      	cbz	r2, 8009bbe <_vfiprintf_r+0xa2>
 8009bba:	2a25      	cmp	r2, #37	; 0x25
 8009bbc:	d1f9      	bne.n	8009bb2 <_vfiprintf_r+0x96>
 8009bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc2:	d00b      	beq.n	8009bdc <_vfiprintf_r+0xc0>
 8009bc4:	465b      	mov	r3, fp
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f7ff ff93 	bl	8009af6 <__sfputs_r>
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	f000 80aa 	beq.w	8009d2a <_vfiprintf_r+0x20e>
 8009bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd8:	445a      	add	r2, fp
 8009bda:	9209      	str	r2, [sp, #36]	; 0x24
 8009bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 80a2 	beq.w	8009d2a <_vfiprintf_r+0x20e>
 8009be6:	2300      	movs	r3, #0
 8009be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf0:	f10a 0a01 	add.w	sl, sl, #1
 8009bf4:	9304      	str	r3, [sp, #16]
 8009bf6:	9307      	str	r3, [sp, #28]
 8009bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8009bfe:	4654      	mov	r4, sl
 8009c00:	2205      	movs	r2, #5
 8009c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c06:	4858      	ldr	r0, [pc, #352]	; (8009d68 <_vfiprintf_r+0x24c>)
 8009c08:	f7f6 fb02 	bl	8000210 <memchr>
 8009c0c:	9a04      	ldr	r2, [sp, #16]
 8009c0e:	b9d8      	cbnz	r0, 8009c48 <_vfiprintf_r+0x12c>
 8009c10:	06d1      	lsls	r1, r2, #27
 8009c12:	bf44      	itt	mi
 8009c14:	2320      	movmi	r3, #32
 8009c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c1a:	0713      	lsls	r3, r2, #28
 8009c1c:	bf44      	itt	mi
 8009c1e:	232b      	movmi	r3, #43	; 0x2b
 8009c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c24:	f89a 3000 	ldrb.w	r3, [sl]
 8009c28:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2a:	d015      	beq.n	8009c58 <_vfiprintf_r+0x13c>
 8009c2c:	9a07      	ldr	r2, [sp, #28]
 8009c2e:	4654      	mov	r4, sl
 8009c30:	2000      	movs	r0, #0
 8009c32:	f04f 0c0a 	mov.w	ip, #10
 8009c36:	4621      	mov	r1, r4
 8009c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c3c:	3b30      	subs	r3, #48	; 0x30
 8009c3e:	2b09      	cmp	r3, #9
 8009c40:	d94e      	bls.n	8009ce0 <_vfiprintf_r+0x1c4>
 8009c42:	b1b0      	cbz	r0, 8009c72 <_vfiprintf_r+0x156>
 8009c44:	9207      	str	r2, [sp, #28]
 8009c46:	e014      	b.n	8009c72 <_vfiprintf_r+0x156>
 8009c48:	eba0 0308 	sub.w	r3, r0, r8
 8009c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c50:	4313      	orrs	r3, r2
 8009c52:	9304      	str	r3, [sp, #16]
 8009c54:	46a2      	mov	sl, r4
 8009c56:	e7d2      	b.n	8009bfe <_vfiprintf_r+0xe2>
 8009c58:	9b03      	ldr	r3, [sp, #12]
 8009c5a:	1d19      	adds	r1, r3, #4
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	9103      	str	r1, [sp, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfbb      	ittet	lt
 8009c64:	425b      	neglt	r3, r3
 8009c66:	f042 0202 	orrlt.w	r2, r2, #2
 8009c6a:	9307      	strge	r3, [sp, #28]
 8009c6c:	9307      	strlt	r3, [sp, #28]
 8009c6e:	bfb8      	it	lt
 8009c70:	9204      	strlt	r2, [sp, #16]
 8009c72:	7823      	ldrb	r3, [r4, #0]
 8009c74:	2b2e      	cmp	r3, #46	; 0x2e
 8009c76:	d10c      	bne.n	8009c92 <_vfiprintf_r+0x176>
 8009c78:	7863      	ldrb	r3, [r4, #1]
 8009c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c7c:	d135      	bne.n	8009cea <_vfiprintf_r+0x1ce>
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	1d1a      	adds	r2, r3, #4
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	9203      	str	r2, [sp, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bfb8      	it	lt
 8009c8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009c8e:	3402      	adds	r4, #2
 8009c90:	9305      	str	r3, [sp, #20]
 8009c92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d78 <_vfiprintf_r+0x25c>
 8009c96:	7821      	ldrb	r1, [r4, #0]
 8009c98:	2203      	movs	r2, #3
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	f7f6 fab8 	bl	8000210 <memchr>
 8009ca0:	b140      	cbz	r0, 8009cb4 <_vfiprintf_r+0x198>
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	eba0 000a 	sub.w	r0, r0, sl
 8009ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8009cac:	9b04      	ldr	r3, [sp, #16]
 8009cae:	4303      	orrs	r3, r0
 8009cb0:	3401      	adds	r4, #1
 8009cb2:	9304      	str	r3, [sp, #16]
 8009cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb8:	482c      	ldr	r0, [pc, #176]	; (8009d6c <_vfiprintf_r+0x250>)
 8009cba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cbe:	2206      	movs	r2, #6
 8009cc0:	f7f6 faa6 	bl	8000210 <memchr>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d03f      	beq.n	8009d48 <_vfiprintf_r+0x22c>
 8009cc8:	4b29      	ldr	r3, [pc, #164]	; (8009d70 <_vfiprintf_r+0x254>)
 8009cca:	bb1b      	cbnz	r3, 8009d14 <_vfiprintf_r+0x1f8>
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	3307      	adds	r3, #7
 8009cd0:	f023 0307 	bic.w	r3, r3, #7
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	9303      	str	r3, [sp, #12]
 8009cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cda:	443b      	add	r3, r7
 8009cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cde:	e767      	b.n	8009bb0 <_vfiprintf_r+0x94>
 8009ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e7a5      	b.n	8009c36 <_vfiprintf_r+0x11a>
 8009cea:	2300      	movs	r3, #0
 8009cec:	3401      	adds	r4, #1
 8009cee:	9305      	str	r3, [sp, #20]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f04f 0c0a 	mov.w	ip, #10
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfc:	3a30      	subs	r2, #48	; 0x30
 8009cfe:	2a09      	cmp	r2, #9
 8009d00:	d903      	bls.n	8009d0a <_vfiprintf_r+0x1ee>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0c5      	beq.n	8009c92 <_vfiprintf_r+0x176>
 8009d06:	9105      	str	r1, [sp, #20]
 8009d08:	e7c3      	b.n	8009c92 <_vfiprintf_r+0x176>
 8009d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0e:	4604      	mov	r4, r0
 8009d10:	2301      	movs	r3, #1
 8009d12:	e7f0      	b.n	8009cf6 <_vfiprintf_r+0x1da>
 8009d14:	ab03      	add	r3, sp, #12
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	462a      	mov	r2, r5
 8009d1a:	4b16      	ldr	r3, [pc, #88]	; (8009d74 <_vfiprintf_r+0x258>)
 8009d1c:	a904      	add	r1, sp, #16
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7fd fb72 	bl	8007408 <_printf_float>
 8009d24:	4607      	mov	r7, r0
 8009d26:	1c78      	adds	r0, r7, #1
 8009d28:	d1d6      	bne.n	8009cd8 <_vfiprintf_r+0x1bc>
 8009d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d2c:	07d9      	lsls	r1, r3, #31
 8009d2e:	d405      	bmi.n	8009d3c <_vfiprintf_r+0x220>
 8009d30:	89ab      	ldrh	r3, [r5, #12]
 8009d32:	059a      	lsls	r2, r3, #22
 8009d34:	d402      	bmi.n	8009d3c <_vfiprintf_r+0x220>
 8009d36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d38:	f7ff f9d0 	bl	80090dc <__retarget_lock_release_recursive>
 8009d3c:	89ab      	ldrh	r3, [r5, #12]
 8009d3e:	065b      	lsls	r3, r3, #25
 8009d40:	f53f af12 	bmi.w	8009b68 <_vfiprintf_r+0x4c>
 8009d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d46:	e711      	b.n	8009b6c <_vfiprintf_r+0x50>
 8009d48:	ab03      	add	r3, sp, #12
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <_vfiprintf_r+0x258>)
 8009d50:	a904      	add	r1, sp, #16
 8009d52:	4630      	mov	r0, r6
 8009d54:	f7fd fdfc 	bl	8007950 <_printf_i>
 8009d58:	e7e4      	b.n	8009d24 <_vfiprintf_r+0x208>
 8009d5a:	bf00      	nop
 8009d5c:	0800a728 	.word	0x0800a728
 8009d60:	0800a748 	.word	0x0800a748
 8009d64:	0800a708 	.word	0x0800a708
 8009d68:	0800a8c4 	.word	0x0800a8c4
 8009d6c:	0800a8ce 	.word	0x0800a8ce
 8009d70:	08007409 	.word	0x08007409
 8009d74:	08009af7 	.word	0x08009af7
 8009d78:	0800a8ca 	.word	0x0800a8ca

08009d7c <_sbrk_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d06      	ldr	r5, [pc, #24]	; (8009d98 <_sbrk_r+0x1c>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	f7f8 f886 	bl	8001e98 <_sbrk>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_sbrk_r+0x1a>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_sbrk_r+0x1a>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	20004fe8 	.word	0x20004fe8

08009d9c <__sread>:
 8009d9c:	b510      	push	{r4, lr}
 8009d9e:	460c      	mov	r4, r1
 8009da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da4:	f000 f8ba 	bl	8009f1c <_read_r>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	bfab      	itete	ge
 8009dac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dae:	89a3      	ldrhlt	r3, [r4, #12]
 8009db0:	181b      	addge	r3, r3, r0
 8009db2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009db6:	bfac      	ite	ge
 8009db8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dba:	81a3      	strhlt	r3, [r4, #12]
 8009dbc:	bd10      	pop	{r4, pc}

08009dbe <__swrite>:
 8009dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc2:	461f      	mov	r7, r3
 8009dc4:	898b      	ldrh	r3, [r1, #12]
 8009dc6:	05db      	lsls	r3, r3, #23
 8009dc8:	4605      	mov	r5, r0
 8009dca:	460c      	mov	r4, r1
 8009dcc:	4616      	mov	r6, r2
 8009dce:	d505      	bpl.n	8009ddc <__swrite+0x1e>
 8009dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f000 f870 	bl	8009ebc <_lseek_r>
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009de6:	81a3      	strh	r3, [r4, #12]
 8009de8:	4632      	mov	r2, r6
 8009dea:	463b      	mov	r3, r7
 8009dec:	4628      	mov	r0, r5
 8009dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df2:	f000 b817 	b.w	8009e24 <_write_r>

08009df6 <__sseek>:
 8009df6:	b510      	push	{r4, lr}
 8009df8:	460c      	mov	r4, r1
 8009dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfe:	f000 f85d 	bl	8009ebc <_lseek_r>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	bf15      	itete	ne
 8009e08:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e12:	81a3      	strheq	r3, [r4, #12]
 8009e14:	bf18      	it	ne
 8009e16:	81a3      	strhne	r3, [r4, #12]
 8009e18:	bd10      	pop	{r4, pc}

08009e1a <__sclose>:
 8009e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1e:	f000 b81b 	b.w	8009e58 <_close_r>
	...

08009e24 <_write_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	; (8009e44 <_write_r+0x20>)
 8009e28:	4604      	mov	r4, r0
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	2200      	movs	r2, #0
 8009e30:	602a      	str	r2, [r5, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	f7f7 ffdf 	bl	8001df6 <_write>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_write_r+0x1e>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_write_r+0x1e>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	20004fe8 	.word	0x20004fe8

08009e48 <abort>:
 8009e48:	b508      	push	{r3, lr}
 8009e4a:	2006      	movs	r0, #6
 8009e4c:	f000 f8a0 	bl	8009f90 <raise>
 8009e50:	2001      	movs	r0, #1
 8009e52:	f7f7 ffa9 	bl	8001da8 <_exit>
	...

08009e58 <_close_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d06      	ldr	r5, [pc, #24]	; (8009e74 <_close_r+0x1c>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	f7f7 ffe3 	bl	8001e2e <_close>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_close_r+0x1a>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_close_r+0x1a>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	20004fe8 	.word	0x20004fe8

08009e78 <_fstat_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4d07      	ldr	r5, [pc, #28]	; (8009e98 <_fstat_r+0x20>)
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4604      	mov	r4, r0
 8009e80:	4608      	mov	r0, r1
 8009e82:	4611      	mov	r1, r2
 8009e84:	602b      	str	r3, [r5, #0]
 8009e86:	f7f7 ffde 	bl	8001e46 <_fstat>
 8009e8a:	1c43      	adds	r3, r0, #1
 8009e8c:	d102      	bne.n	8009e94 <_fstat_r+0x1c>
 8009e8e:	682b      	ldr	r3, [r5, #0]
 8009e90:	b103      	cbz	r3, 8009e94 <_fstat_r+0x1c>
 8009e92:	6023      	str	r3, [r4, #0]
 8009e94:	bd38      	pop	{r3, r4, r5, pc}
 8009e96:	bf00      	nop
 8009e98:	20004fe8 	.word	0x20004fe8

08009e9c <_isatty_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d06      	ldr	r5, [pc, #24]	; (8009eb8 <_isatty_r+0x1c>)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	602b      	str	r3, [r5, #0]
 8009ea8:	f7f7 ffdd 	bl	8001e66 <_isatty>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	d102      	bne.n	8009eb6 <_isatty_r+0x1a>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	b103      	cbz	r3, 8009eb6 <_isatty_r+0x1a>
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}
 8009eb8:	20004fe8 	.word	0x20004fe8

08009ebc <_lseek_r>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	4d07      	ldr	r5, [pc, #28]	; (8009edc <_lseek_r+0x20>)
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	4608      	mov	r0, r1
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	602a      	str	r2, [r5, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f7f7 ffd6 	bl	8001e7c <_lseek>
 8009ed0:	1c43      	adds	r3, r0, #1
 8009ed2:	d102      	bne.n	8009eda <_lseek_r+0x1e>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	b103      	cbz	r3, 8009eda <_lseek_r+0x1e>
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	20004fe8 	.word	0x20004fe8

08009ee0 <__ascii_mbtowc>:
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	b901      	cbnz	r1, 8009ee6 <__ascii_mbtowc+0x6>
 8009ee4:	a901      	add	r1, sp, #4
 8009ee6:	b142      	cbz	r2, 8009efa <__ascii_mbtowc+0x1a>
 8009ee8:	b14b      	cbz	r3, 8009efe <__ascii_mbtowc+0x1e>
 8009eea:	7813      	ldrb	r3, [r2, #0]
 8009eec:	600b      	str	r3, [r1, #0]
 8009eee:	7812      	ldrb	r2, [r2, #0]
 8009ef0:	1e10      	subs	r0, r2, #0
 8009ef2:	bf18      	it	ne
 8009ef4:	2001      	movne	r0, #1
 8009ef6:	b002      	add	sp, #8
 8009ef8:	4770      	bx	lr
 8009efa:	4610      	mov	r0, r2
 8009efc:	e7fb      	b.n	8009ef6 <__ascii_mbtowc+0x16>
 8009efe:	f06f 0001 	mvn.w	r0, #1
 8009f02:	e7f8      	b.n	8009ef6 <__ascii_mbtowc+0x16>

08009f04 <__malloc_lock>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__malloc_lock+0x8>)
 8009f06:	f7ff b8e8 	b.w	80090da <__retarget_lock_acquire_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	20004fdc 	.word	0x20004fdc

08009f10 <__malloc_unlock>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__malloc_unlock+0x8>)
 8009f12:	f7ff b8e3 	b.w	80090dc <__retarget_lock_release_recursive>
 8009f16:	bf00      	nop
 8009f18:	20004fdc 	.word	0x20004fdc

08009f1c <_read_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	; (8009f3c <_read_r+0x20>)
 8009f20:	4604      	mov	r4, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f7 ff46 	bl	8001dbc <_read>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_read_r+0x1e>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_read_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	20004fe8 	.word	0x20004fe8

08009f40 <_raise_r>:
 8009f40:	291f      	cmp	r1, #31
 8009f42:	b538      	push	{r3, r4, r5, lr}
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	d904      	bls.n	8009f54 <_raise_r+0x14>
 8009f4a:	2316      	movs	r3, #22
 8009f4c:	6003      	str	r3, [r0, #0]
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f56:	b112      	cbz	r2, 8009f5e <_raise_r+0x1e>
 8009f58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f5c:	b94b      	cbnz	r3, 8009f72 <_raise_r+0x32>
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 f830 	bl	8009fc4 <_getpid_r>
 8009f64:	462a      	mov	r2, r5
 8009f66:	4601      	mov	r1, r0
 8009f68:	4620      	mov	r0, r4
 8009f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f6e:	f000 b817 	b.w	8009fa0 <_kill_r>
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d00a      	beq.n	8009f8c <_raise_r+0x4c>
 8009f76:	1c59      	adds	r1, r3, #1
 8009f78:	d103      	bne.n	8009f82 <_raise_r+0x42>
 8009f7a:	2316      	movs	r3, #22
 8009f7c:	6003      	str	r3, [r0, #0]
 8009f7e:	2001      	movs	r0, #1
 8009f80:	e7e7      	b.n	8009f52 <_raise_r+0x12>
 8009f82:	2400      	movs	r4, #0
 8009f84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f88:	4628      	mov	r0, r5
 8009f8a:	4798      	blx	r3
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	e7e0      	b.n	8009f52 <_raise_r+0x12>

08009f90 <raise>:
 8009f90:	4b02      	ldr	r3, [pc, #8]	; (8009f9c <raise+0xc>)
 8009f92:	4601      	mov	r1, r0
 8009f94:	6818      	ldr	r0, [r3, #0]
 8009f96:	f7ff bfd3 	b.w	8009f40 <_raise_r>
 8009f9a:	bf00      	nop
 8009f9c:	20000070 	.word	0x20000070

08009fa0 <_kill_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4d07      	ldr	r5, [pc, #28]	; (8009fc0 <_kill_r+0x20>)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	4608      	mov	r0, r1
 8009faa:	4611      	mov	r1, r2
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	f7f7 feeb 	bl	8001d88 <_kill>
 8009fb2:	1c43      	adds	r3, r0, #1
 8009fb4:	d102      	bne.n	8009fbc <_kill_r+0x1c>
 8009fb6:	682b      	ldr	r3, [r5, #0]
 8009fb8:	b103      	cbz	r3, 8009fbc <_kill_r+0x1c>
 8009fba:	6023      	str	r3, [r4, #0]
 8009fbc:	bd38      	pop	{r3, r4, r5, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20004fe8 	.word	0x20004fe8

08009fc4 <_getpid_r>:
 8009fc4:	f7f7 bed8 	b.w	8001d78 <_getpid>

08009fc8 <__ascii_wctomb>:
 8009fc8:	b149      	cbz	r1, 8009fde <__ascii_wctomb+0x16>
 8009fca:	2aff      	cmp	r2, #255	; 0xff
 8009fcc:	bf85      	ittet	hi
 8009fce:	238a      	movhi	r3, #138	; 0x8a
 8009fd0:	6003      	strhi	r3, [r0, #0]
 8009fd2:	700a      	strbls	r2, [r1, #0]
 8009fd4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009fd8:	bf98      	it	ls
 8009fda:	2001      	movls	r0, #1
 8009fdc:	4770      	bx	lr
 8009fde:	4608      	mov	r0, r1
 8009fe0:	4770      	bx	lr
	...

08009fe4 <_init>:
 8009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe6:	bf00      	nop
 8009fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fea:	bc08      	pop	{r3}
 8009fec:	469e      	mov	lr, r3
 8009fee:	4770      	bx	lr

08009ff0 <_fini>:
 8009ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff2:	bf00      	nop
 8009ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff6:	bc08      	pop	{r3}
 8009ff8:	469e      	mov	lr, r3
 8009ffa:	4770      	bx	lr
